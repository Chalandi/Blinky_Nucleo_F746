#ifndef STM32F7X6_H
#define STM32F7X6_H

#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
  #define   __I     volatile        
#else
  #define   __I     volatile const  
#endif
#define     __O     volatile        
#define     __IO    volatile        

#define     __IM     volatile const 
#define     __OM     volatile       
#define     __IOM    volatile       

typedef unsigned long uint32;

/* =========================================================================================================================== */
/* ================                                            RNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Random number generator (RNG)
  */

typedef struct {                                /*!< (@ 0x50060800) RNG Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register                                           */
    
    struct {
            uint32            : 2;
      __IOM uint32 RNGEN      : 1;            /*!< [2..2] Random number generator enable                                     */
      __IOM uint32 IE         : 1;            /*!< [3..3] Interrupt enable                                                   */
            uint32            : 28;
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) status register                                            */
    
    struct {
      __IM  uint32 DRDY       : 1;            /*!< [0..0] Data ready                                                         */
      __IM  uint32 CECS       : 1;            /*!< [1..1] Clock error current status                                         */
      __IM  uint32 SECS       : 1;            /*!< [2..2] Seed error current status                                          */
            uint32            : 2;
      __IOM uint32 CEIS       : 1;            /*!< [5..5] Clock error interrupt status                                       */
      __IOM uint32 SEIS       : 1;            /*!< [6..6] Seed error interrupt status                                        */
            uint32            : 25;
    } bit;
  } SR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) data register                                              */
    
    struct {
      __IM  uint32 RNDATA     : 32;           /*!< [31..0] Random data                                                       */
    } bit;
  } DR;
} RNG_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           HASH                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Hash processor (HASH)
  */

typedef struct {                                /*!< (@ 0x50060400) HASH Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register                                           */
    
    struct {
            uint32            : 2;
      __OM  uint32 INIT       : 1;            /*!< [2..2] Initialize message digest calculation                              */
      __IOM uint32 DMAE       : 1;            /*!< [3..3] DMA enable                                                         */
      __IOM uint32 DATATYPE   : 2;            /*!< [5..4] Data type selection                                                */
      __IOM uint32 MODE       : 1;            /*!< [6..6] Mode selection                                                     */
      __IOM uint32 ALGO0      : 1;            /*!< [7..7] Algorithm selection                                                */
      __IM  uint32 NBW        : 4;            /*!< [11..8] Number of words already pushed                                    */
      __IM  uint32 DINNE      : 1;            /*!< [12..12] DIN not empty                                                    */
      __IOM uint32 MDMAT      : 1;            /*!< [13..13] Multiple DMA Transfers                                           */
            uint32            : 2;
      __IOM uint32 LKEY       : 1;            /*!< [16..16] Long key selection                                               */
            uint32            : 1;
      __IOM uint32 ALGO1      : 1;            /*!< [18..18] ALGO                                                             */
            uint32            : 13;
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) data input register                                        */
    
    struct {
      __IOM uint32 DATAIN     : 32;           /*!< [31..0] Data input                                                        */
    } bit;
  } DIN;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) start register                                             */
    
    struct {
      __IOM uint32 NBLW       : 5;            /*!< [4..0] Number of valid bits in the last word of the message               */
            uint32            : 3;
      __OM  uint32 DCAL       : 1;            /*!< [8..8] Digest calculation                                                 */
            uint32            : 23;
    } bit;
  } STR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000000C) digest registers                                           */
    
    struct {
      __IM  uint32 H0         : 32;           /*!< [31..0] H0                                                                */
    } bit;
  } HR0;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000010) digest registers                                           */
    
    struct {
      __IM  uint32 H1         : 32;           /*!< [31..0] H1                                                                */
    } bit;
  } HR1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000014) digest registers                                           */
    
    struct {
      __IM  uint32 H2         : 32;           /*!< [31..0] H2                                                                */
    } bit;
  } HR2;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000018) digest registers                                           */
    
    struct {
      __IM  uint32 H3         : 32;           /*!< [31..0] H3                                                                */
    } bit;
  } HR3;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000001C) digest registers                                           */
    
    struct {
      __IM  uint32 H4         : 32;           /*!< [31..0] H4                                                                */
    } bit;
  } HR4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) interrupt enable register                                  */
    
    struct {
      __IOM uint32 DINIE      : 1;            /*!< [0..0] Data input interrupt enable                                        */
      __IOM uint32 DCIE       : 1;            /*!< [1..1] Digest calculation completion interrupt enable                     */
            uint32            : 30;
    } bit;
  } IMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) status register                                            */
    
    struct {
      __IOM uint32 DINIS      : 1;            /*!< [0..0] Data input interrupt status                                        */
      __IOM uint32 DCIS       : 1;            /*!< [1..1] Digest calculation completion interrupt status                     */
      __IM  uint32 DMAS       : 1;            /*!< [2..2] DMA Status                                                         */
      __IM  uint32 BUSY       : 1;            /*!< [3..3] Busy bit                                                           */
            uint32            : 28;
    } bit;
  } SR;
  __IM  uint32  RESERVED[52];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000F8) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR0       : 32;           /*!< [31..0] CSR0                                                              */
    } bit;
  } CSR0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000FC) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR1       : 32;           /*!< [31..0] CSR1                                                              */
    } bit;
  } CSR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000100) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR2       : 32;           /*!< [31..0] CSR2                                                              */
    } bit;
  } CSR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000104) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR3       : 32;           /*!< [31..0] CSR3                                                              */
    } bit;
  } CSR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR4       : 32;           /*!< [31..0] CSR4                                                              */
    } bit;
  } CSR4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000010C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR5       : 32;           /*!< [31..0] CSR5                                                              */
    } bit;
  } CSR5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000110) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR6       : 32;           /*!< [31..0] CSR6                                                              */
    } bit;
  } CSR6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000114) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR7       : 32;           /*!< [31..0] CSR7                                                              */
    } bit;
  } CSR7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000118) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR8       : 32;           /*!< [31..0] CSR8                                                              */
    } bit;
  } CSR8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000011C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR9       : 32;           /*!< [31..0] CSR9                                                              */
    } bit;
  } CSR9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000120) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR10      : 32;           /*!< [31..0] CSR10                                                             */
    } bit;
  } CSR10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000124) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR11      : 32;           /*!< [31..0] CSR11                                                             */
    } bit;
  } CSR11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000128) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR12      : 32;           /*!< [31..0] CSR12                                                             */
    } bit;
  } CSR12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000012C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR13      : 32;           /*!< [31..0] CSR13                                                             */
    } bit;
  } CSR13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000130) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR14      : 32;           /*!< [31..0] CSR14                                                             */
    } bit;
  } CSR14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000134) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR15      : 32;           /*!< [31..0] CSR15                                                             */
    } bit;
  } CSR15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000138) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR16      : 32;           /*!< [31..0] CSR16                                                             */
    } bit;
  } CSR16;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000013C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR17      : 32;           /*!< [31..0] CSR17                                                             */
    } bit;
  } CSR17;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000140) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR18      : 32;           /*!< [31..0] CSR18                                                             */
    } bit;
  } CSR18;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000144) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR19      : 32;           /*!< [31..0] CSR19                                                             */
    } bit;
  } CSR19;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000148) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR20      : 32;           /*!< [31..0] CSR20                                                             */
    } bit;
  } CSR20;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000014C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR21      : 32;           /*!< [31..0] CSR21                                                             */
    } bit;
  } CSR21;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000150) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR22      : 32;           /*!< [31..0] CSR22                                                             */
    } bit;
  } CSR22;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000154) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR23      : 32;           /*!< [31..0] CSR23                                                             */
    } bit;
  } CSR23;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000158) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR24      : 32;           /*!< [31..0] CSR24                                                             */
    } bit;
  } CSR24;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000015C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR25      : 32;           /*!< [31..0] CSR25                                                             */
    } bit;
  } CSR25;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000160) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR26      : 32;           /*!< [31..0] CSR26                                                             */
    } bit;
  } CSR26;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000164) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR27      : 32;           /*!< [31..0] CSR27                                                             */
    } bit;
  } CSR27;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000168) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR28      : 32;           /*!< [31..0] CSR28                                                             */
    } bit;
  } CSR28;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000016C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR29      : 32;           /*!< [31..0] CSR29                                                             */
    } bit;
  } CSR29;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000170) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR30      : 32;           /*!< [31..0] CSR30                                                             */
    } bit;
  } CSR30;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000174) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR31      : 32;           /*!< [31..0] CSR31                                                             */
    } bit;
  } CSR31;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000178) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR32      : 32;           /*!< [31..0] CSR32                                                             */
    } bit;
  } CSR32;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000017C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR33      : 32;           /*!< [31..0] CSR33                                                             */
    } bit;
  } CSR33;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000180) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR34      : 32;           /*!< [31..0] CSR34                                                             */
    } bit;
  } CSR34;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000184) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR35      : 32;           /*!< [31..0] CSR35                                                             */
    } bit;
  } CSR35;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000188) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR36      : 32;           /*!< [31..0] CSR36                                                             */
    } bit;
  } CSR36;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000018C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR37      : 32;           /*!< [31..0] CSR37                                                             */
    } bit;
  } CSR37;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000190) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR38      : 32;           /*!< [31..0] CSR38                                                             */
    } bit;
  } CSR38;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000194) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR39      : 32;           /*!< [31..0] CSR39                                                             */
    } bit;
  } CSR39;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000198) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR40      : 32;           /*!< [31..0] CSR40                                                             */
    } bit;
  } CSR40;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000019C) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR41      : 32;           /*!< [31..0] CSR41                                                             */
    } bit;
  } CSR41;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A0) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR42      : 32;           /*!< [31..0] CSR42                                                             */
    } bit;
  } CSR42;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A4) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR43      : 32;           /*!< [31..0] CSR43                                                             */
    } bit;
  } CSR43;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A8) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR44      : 32;           /*!< [31..0] CSR44                                                             */
    } bit;
  } CSR44;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001AC) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR45      : 32;           /*!< [31..0] CSR45                                                             */
    } bit;
  } CSR45;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B0) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR46      : 32;           /*!< [31..0] CSR46                                                             */
    } bit;
  } CSR46;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B4) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR47      : 32;           /*!< [31..0] CSR47                                                             */
    } bit;
  } CSR47;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B8) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR48      : 32;           /*!< [31..0] CSR48                                                             */
    } bit;
  } CSR48;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001BC) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR49      : 32;           /*!< [31..0] CSR49                                                             */
    } bit;
  } CSR49;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C0) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR50      : 32;           /*!< [31..0] CSR50                                                             */
    } bit;
  } CSR50;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C4) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR51      : 32;           /*!< [31..0] CSR51                                                             */
    } bit;
  } CSR51;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C8) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR52      : 32;           /*!< [31..0] CSR52                                                             */
    } bit;
  } CSR52;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001CC) context swap registers                                     */
    
    struct {
      __IOM uint32 CSR53      : 32;           /*!< [31..0] CSR53                                                             */
    } bit;
  } CSR53;
  __IM  uint32  RESERVED1[80];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000310) HASH digest register                                       */
    
    struct {
      __IM  uint32 H0         : 32;           /*!< [31..0] H0                                                                */
    } bit;
  } HASH_HR0;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000314) read-only                                                  */
    
    struct {
      __IM  uint32 H1         : 32;           /*!< [31..0] H1                                                                */
    } bit;
  } HASH_HR1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000318) read-only                                                  */
    
    struct {
      __IM  uint32 H2         : 32;           /*!< [31..0] H2                                                                */
    } bit;
  } HASH_HR2;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000031C) read-only                                                  */
    
    struct {
      __IM  uint32 H3         : 32;           /*!< [31..0] H3                                                                */
    } bit;
  } HASH_HR3;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000320) read-only                                                  */
    
    struct {
      __IM  uint32 H4         : 32;           /*!< [31..0] H4                                                                */
    } bit;
  } HASH_HR4;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000324) read-only                                                  */
    
    struct {
      __IM  uint32 H5         : 32;           /*!< [31..0] H5                                                                */
    } bit;
  } HASH_HR5;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000328) read-only                                                  */
    
    struct {
      __IM  uint32 H6         : 32;           /*!< [31..0] H6                                                                */
    } bit;
  } HASH_HR6;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000032C) read-only                                                  */
    
    struct {
      __IM  uint32 H7         : 32;           /*!< [31..0] H7                                                                */
    } bit;
  } HASH_HR7;
} HASH_Type;                                    /*!< Size = 816 (0x330)                                                        */



/* =========================================================================================================================== */
/* ================                                           CRYP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cryptographic processor (CRYP)
  */

typedef struct {                                /*!< (@ 0x50060000) CRYP Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register                                           */
    
    struct {
            uint32            : 2;
      __IOM uint32 ALGODIR    : 1;            /*!< [2..2] Algorithm direction                                                */
      __IOM uint32 ALGOMODE0  : 3;            /*!< [5..3] Algorithm mode                                                     */
      __IOM uint32 DATATYPE   : 2;            /*!< [7..6] Data type selection                                                */
      __IOM uint32 KEYSIZE    : 2;            /*!< [9..8] Key size selection (AES mode only)                                 */
            uint32            : 4;
      __OM  uint32 FFLUSH     : 1;            /*!< [14..14] FIFO flush                                                       */
      __IOM uint32 CRYPEN     : 1;            /*!< [15..15] Cryptographic processor enable                                   */
      __IOM uint32 GCM_CCMPH  : 2;            /*!< [17..16] GCM_CCMPH                                                        */
            uint32            : 1;
      __IOM uint32 ALGOMODE3  : 1;            /*!< [19..19] ALGOMODE                                                         */
            uint32            : 12;
    } bit;
  } CR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000004) status register                                            */
    
    struct {
      __IM  uint32 IFEM       : 1;            /*!< [0..0] Input FIFO empty                                                   */
      __IM  uint32 IFNF       : 1;            /*!< [1..1] Input FIFO not full                                                */
      __IM  uint32 OFNE       : 1;            /*!< [2..2] Output FIFO not empty                                              */
      __IM  uint32 OFFU       : 1;            /*!< [3..3] Output FIFO full                                                   */
      __IM  uint32 BUSY       : 1;            /*!< [4..4] Busy bit                                                           */
            uint32            : 27;
    } bit;
  } SR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) data input register                                        */
    
    struct {
      __IOM uint32 DATAIN     : 32;           /*!< [31..0] Data input                                                        */
    } bit;
  } DIN;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000000C) data output register                                       */
    
    struct {
      __IM  uint32 DATAOUT    : 32;           /*!< [31..0] Data output                                                       */
    } bit;
  } DOUT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) DMA control register                                       */
    
    struct {
      __IOM uint32 DIEN       : 1;            /*!< [0..0] DMA input enable                                                   */
      __IOM uint32 DOEN       : 1;            /*!< [1..1] DMA output enable                                                  */
            uint32            : 30;
    } bit;
  } DMACR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) interrupt mask set/clear register                          */
    
    struct {
      __IOM uint32 INIM       : 1;            /*!< [0..0] Input FIFO service interrupt mask                                  */
      __IOM uint32 OUTIM      : 1;            /*!< [1..1] Output FIFO service interrupt mask                                 */
            uint32            : 30;
    } bit;
  } IMSCR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000018) raw interrupt status register                              */
    
    struct {
      __IM  uint32 INRIS      : 1;            /*!< [0..0] Input FIFO service raw interrupt status                            */
      __IM  uint32 OUTRIS     : 1;            /*!< [1..1] Output FIFO service raw interrupt status                           */
            uint32            : 30;
    } bit;
  } RISR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000001C) masked interrupt status register                           */
    
    struct {
      __IM  uint32 INMIS      : 1;            /*!< [0..0] Input FIFO service masked interrupt status                         */
      __IM  uint32 OUTMIS     : 1;            /*!< [1..1] Output FIFO service masked interrupt status                        */
            uint32            : 30;
    } bit;
  } MISR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000020) key registers                                              */
    
    struct {
      __OM  uint32 b224       : 1;            /*!< [0..0] b224                                                               */
      __OM  uint32 b225       : 1;            /*!< [1..1] b225                                                               */
      __OM  uint32 b226       : 1;            /*!< [2..2] b226                                                               */
      __OM  uint32 b227       : 1;            /*!< [3..3] b227                                                               */
      __OM  uint32 b228       : 1;            /*!< [4..4] b228                                                               */
      __OM  uint32 b229       : 1;            /*!< [5..5] b229                                                               */
      __OM  uint32 b230       : 1;            /*!< [6..6] b230                                                               */
      __OM  uint32 b231       : 1;            /*!< [7..7] b231                                                               */
      __OM  uint32 b232       : 1;            /*!< [8..8] b232                                                               */
      __OM  uint32 b233       : 1;            /*!< [9..9] b233                                                               */
      __OM  uint32 b234       : 1;            /*!< [10..10] b234                                                             */
      __OM  uint32 b235       : 1;            /*!< [11..11] b235                                                             */
      __OM  uint32 b236       : 1;            /*!< [12..12] b236                                                             */
      __OM  uint32 b237       : 1;            /*!< [13..13] b237                                                             */
      __OM  uint32 b238       : 1;            /*!< [14..14] b238                                                             */
      __OM  uint32 b239       : 1;            /*!< [15..15] b239                                                             */
      __OM  uint32 b240       : 1;            /*!< [16..16] b240                                                             */
      __OM  uint32 b241       : 1;            /*!< [17..17] b241                                                             */
      __OM  uint32 b242       : 1;            /*!< [18..18] b242                                                             */
      __OM  uint32 b243       : 1;            /*!< [19..19] b243                                                             */
      __OM  uint32 b244       : 1;            /*!< [20..20] b244                                                             */
      __OM  uint32 b245       : 1;            /*!< [21..21] b245                                                             */
      __OM  uint32 b246       : 1;            /*!< [22..22] b246                                                             */
      __OM  uint32 b247       : 1;            /*!< [23..23] b247                                                             */
      __OM  uint32 b248       : 1;            /*!< [24..24] b248                                                             */
      __OM  uint32 b249       : 1;            /*!< [25..25] b249                                                             */
      __OM  uint32 b250       : 1;            /*!< [26..26] b250                                                             */
      __OM  uint32 b251       : 1;            /*!< [27..27] b251                                                             */
      __OM  uint32 b252       : 1;            /*!< [28..28] b252                                                             */
      __OM  uint32 b253       : 1;            /*!< [29..29] b253                                                             */
      __OM  uint32 b254       : 1;            /*!< [30..30] b254                                                             */
      __OM  uint32 b255       : 1;            /*!< [31..31] b255                                                             */
    } bit;
  } K0LR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000024) key registers                                              */
    
    struct {
      __OM  uint32 b192       : 1;            /*!< [0..0] b192                                                               */
      __OM  uint32 b193       : 1;            /*!< [1..1] b193                                                               */
      __OM  uint32 b194       : 1;            /*!< [2..2] b194                                                               */
      __OM  uint32 b195       : 1;            /*!< [3..3] b195                                                               */
      __OM  uint32 b196       : 1;            /*!< [4..4] b196                                                               */
      __OM  uint32 b197       : 1;            /*!< [5..5] b197                                                               */
      __OM  uint32 b198       : 1;            /*!< [6..6] b198                                                               */
      __OM  uint32 b199       : 1;            /*!< [7..7] b199                                                               */
      __OM  uint32 b200       : 1;            /*!< [8..8] b200                                                               */
      __OM  uint32 b201       : 1;            /*!< [9..9] b201                                                               */
      __OM  uint32 b202       : 1;            /*!< [10..10] b202                                                             */
      __OM  uint32 b203       : 1;            /*!< [11..11] b203                                                             */
      __OM  uint32 b204       : 1;            /*!< [12..12] b204                                                             */
      __OM  uint32 b205       : 1;            /*!< [13..13] b205                                                             */
      __OM  uint32 b206       : 1;            /*!< [14..14] b206                                                             */
      __OM  uint32 b207       : 1;            /*!< [15..15] b207                                                             */
      __OM  uint32 b208       : 1;            /*!< [16..16] b208                                                             */
      __OM  uint32 b209       : 1;            /*!< [17..17] b209                                                             */
      __OM  uint32 b210       : 1;            /*!< [18..18] b210                                                             */
      __OM  uint32 b211       : 1;            /*!< [19..19] b211                                                             */
      __OM  uint32 b212       : 1;            /*!< [20..20] b212                                                             */
      __OM  uint32 b213       : 1;            /*!< [21..21] b213                                                             */
      __OM  uint32 b214       : 1;            /*!< [22..22] b214                                                             */
      __OM  uint32 b215       : 1;            /*!< [23..23] b215                                                             */
      __OM  uint32 b216       : 1;            /*!< [24..24] b216                                                             */
      __OM  uint32 b217       : 1;            /*!< [25..25] b217                                                             */
      __OM  uint32 b218       : 1;            /*!< [26..26] b218                                                             */
      __OM  uint32 b219       : 1;            /*!< [27..27] b219                                                             */
      __OM  uint32 b220       : 1;            /*!< [28..28] b220                                                             */
      __OM  uint32 b221       : 1;            /*!< [29..29] b221                                                             */
      __OM  uint32 b222       : 1;            /*!< [30..30] b222                                                             */
      __OM  uint32 b223       : 1;            /*!< [31..31] b223                                                             */
    } bit;
  } K0RR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000028) key registers                                              */
    
    struct {
      __OM  uint32 b160       : 1;            /*!< [0..0] b160                                                               */
      __OM  uint32 b161       : 1;            /*!< [1..1] b161                                                               */
      __OM  uint32 b162       : 1;            /*!< [2..2] b162                                                               */
      __OM  uint32 b163       : 1;            /*!< [3..3] b163                                                               */
      __OM  uint32 b164       : 1;            /*!< [4..4] b164                                                               */
      __OM  uint32 b165       : 1;            /*!< [5..5] b165                                                               */
      __OM  uint32 b166       : 1;            /*!< [6..6] b166                                                               */
      __OM  uint32 b167       : 1;            /*!< [7..7] b167                                                               */
      __OM  uint32 b168       : 1;            /*!< [8..8] b168                                                               */
      __OM  uint32 b169       : 1;            /*!< [9..9] b169                                                               */
      __OM  uint32 b170       : 1;            /*!< [10..10] b170                                                             */
      __OM  uint32 b171       : 1;            /*!< [11..11] b171                                                             */
      __OM  uint32 b172       : 1;            /*!< [12..12] b172                                                             */
      __OM  uint32 b173       : 1;            /*!< [13..13] b173                                                             */
      __OM  uint32 b174       : 1;            /*!< [14..14] b174                                                             */
      __OM  uint32 b175       : 1;            /*!< [15..15] b175                                                             */
      __OM  uint32 b176       : 1;            /*!< [16..16] b176                                                             */
      __OM  uint32 b177       : 1;            /*!< [17..17] b177                                                             */
      __OM  uint32 b178       : 1;            /*!< [18..18] b178                                                             */
      __OM  uint32 b179       : 1;            /*!< [19..19] b179                                                             */
      __OM  uint32 b180       : 1;            /*!< [20..20] b180                                                             */
      __OM  uint32 b181       : 1;            /*!< [21..21] b181                                                             */
      __OM  uint32 b182       : 1;            /*!< [22..22] b182                                                             */
      __OM  uint32 b183       : 1;            /*!< [23..23] b183                                                             */
      __OM  uint32 b184       : 1;            /*!< [24..24] b184                                                             */
      __OM  uint32 b185       : 1;            /*!< [25..25] b185                                                             */
      __OM  uint32 b186       : 1;            /*!< [26..26] b186                                                             */
      __OM  uint32 b187       : 1;            /*!< [27..27] b187                                                             */
      __OM  uint32 b188       : 1;            /*!< [28..28] b188                                                             */
      __OM  uint32 b189       : 1;            /*!< [29..29] b189                                                             */
      __OM  uint32 b190       : 1;            /*!< [30..30] b190                                                             */
      __OM  uint32 b191       : 1;            /*!< [31..31] b191                                                             */
    } bit;
  } K1LR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x0000002C) key registers                                              */
    
    struct {
      __OM  uint32 b128       : 1;            /*!< [0..0] b128                                                               */
      __OM  uint32 b129       : 1;            /*!< [1..1] b129                                                               */
      __OM  uint32 b130       : 1;            /*!< [2..2] b130                                                               */
      __OM  uint32 b131       : 1;            /*!< [3..3] b131                                                               */
      __OM  uint32 b132       : 1;            /*!< [4..4] b132                                                               */
      __OM  uint32 b133       : 1;            /*!< [5..5] b133                                                               */
      __OM  uint32 b134       : 1;            /*!< [6..6] b134                                                               */
      __OM  uint32 b135       : 1;            /*!< [7..7] b135                                                               */
      __OM  uint32 b136       : 1;            /*!< [8..8] b136                                                               */
      __OM  uint32 b137       : 1;            /*!< [9..9] b137                                                               */
      __OM  uint32 b138       : 1;            /*!< [10..10] b138                                                             */
      __OM  uint32 b139       : 1;            /*!< [11..11] b139                                                             */
      __OM  uint32 b140       : 1;            /*!< [12..12] b140                                                             */
      __OM  uint32 b141       : 1;            /*!< [13..13] b141                                                             */
      __OM  uint32 b142       : 1;            /*!< [14..14] b142                                                             */
      __OM  uint32 b143       : 1;            /*!< [15..15] b143                                                             */
      __OM  uint32 b144       : 1;            /*!< [16..16] b144                                                             */
      __OM  uint32 b145       : 1;            /*!< [17..17] b145                                                             */
      __OM  uint32 b146       : 1;            /*!< [18..18] b146                                                             */
      __OM  uint32 b147       : 1;            /*!< [19..19] b147                                                             */
      __OM  uint32 b148       : 1;            /*!< [20..20] b148                                                             */
      __OM  uint32 b149       : 1;            /*!< [21..21] b149                                                             */
      __OM  uint32 b150       : 1;            /*!< [22..22] b150                                                             */
      __OM  uint32 b151       : 1;            /*!< [23..23] b151                                                             */
      __OM  uint32 b152       : 1;            /*!< [24..24] b152                                                             */
      __OM  uint32 b153       : 1;            /*!< [25..25] b153                                                             */
      __OM  uint32 b154       : 1;            /*!< [26..26] b154                                                             */
      __OM  uint32 b155       : 1;            /*!< [27..27] b155                                                             */
      __OM  uint32 b156       : 1;            /*!< [28..28] b156                                                             */
      __OM  uint32 b157       : 1;            /*!< [29..29] b157                                                             */
      __OM  uint32 b158       : 1;            /*!< [30..30] b158                                                             */
      __OM  uint32 b159       : 1;            /*!< [31..31] b159                                                             */
    } bit;
  } K1RR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000030) key registers                                              */
    
    struct {
      __OM  uint32 b96        : 1;            /*!< [0..0] b96                                                                */
      __OM  uint32 b97        : 1;            /*!< [1..1] b97                                                                */
      __OM  uint32 b98        : 1;            /*!< [2..2] b98                                                                */
      __OM  uint32 b99        : 1;            /*!< [3..3] b99                                                                */
      __OM  uint32 b100       : 1;            /*!< [4..4] b100                                                               */
      __OM  uint32 b101       : 1;            /*!< [5..5] b101                                                               */
      __OM  uint32 b102       : 1;            /*!< [6..6] b102                                                               */
      __OM  uint32 b103       : 1;            /*!< [7..7] b103                                                               */
      __OM  uint32 b104       : 1;            /*!< [8..8] b104                                                               */
      __OM  uint32 b105       : 1;            /*!< [9..9] b105                                                               */
      __OM  uint32 b106       : 1;            /*!< [10..10] b106                                                             */
      __OM  uint32 b107       : 1;            /*!< [11..11] b107                                                             */
      __OM  uint32 b108       : 1;            /*!< [12..12] b108                                                             */
      __OM  uint32 b109       : 1;            /*!< [13..13] b109                                                             */
      __OM  uint32 b110       : 1;            /*!< [14..14] b110                                                             */
      __OM  uint32 b111       : 1;            /*!< [15..15] b111                                                             */
      __OM  uint32 b112       : 1;            /*!< [16..16] b112                                                             */
      __OM  uint32 b113       : 1;            /*!< [17..17] b113                                                             */
      __OM  uint32 b114       : 1;            /*!< [18..18] b114                                                             */
      __OM  uint32 b115       : 1;            /*!< [19..19] b115                                                             */
      __OM  uint32 b116       : 1;            /*!< [20..20] b116                                                             */
      __OM  uint32 b117       : 1;            /*!< [21..21] b117                                                             */
      __OM  uint32 b118       : 1;            /*!< [22..22] b118                                                             */
      __OM  uint32 b119       : 1;            /*!< [23..23] b119                                                             */
      __OM  uint32 b120       : 1;            /*!< [24..24] b120                                                             */
      __OM  uint32 b121       : 1;            /*!< [25..25] b121                                                             */
      __OM  uint32 b122       : 1;            /*!< [26..26] b122                                                             */
      __OM  uint32 b123       : 1;            /*!< [27..27] b123                                                             */
      __OM  uint32 b124       : 1;            /*!< [28..28] b124                                                             */
      __OM  uint32 b125       : 1;            /*!< [29..29] b125                                                             */
      __OM  uint32 b126       : 1;            /*!< [30..30] b126                                                             */
      __OM  uint32 b127       : 1;            /*!< [31..31] b127                                                             */
    } bit;
  } K2LR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000034) key registers                                              */
    
    struct {
      __OM  uint32 b64        : 1;            /*!< [0..0] b64                                                                */
      __OM  uint32 b65        : 1;            /*!< [1..1] b65                                                                */
      __OM  uint32 b66        : 1;            /*!< [2..2] b66                                                                */
      __OM  uint32 b67        : 1;            /*!< [3..3] b67                                                                */
      __OM  uint32 b68        : 1;            /*!< [4..4] b68                                                                */
      __OM  uint32 b69        : 1;            /*!< [5..5] b69                                                                */
      __OM  uint32 b70        : 1;            /*!< [6..6] b70                                                                */
      __OM  uint32 b71        : 1;            /*!< [7..7] b71                                                                */
      __OM  uint32 b72        : 1;            /*!< [8..8] b72                                                                */
      __OM  uint32 b73        : 1;            /*!< [9..9] b73                                                                */
      __OM  uint32 b74        : 1;            /*!< [10..10] b74                                                              */
      __OM  uint32 b75        : 1;            /*!< [11..11] b75                                                              */
      __OM  uint32 b76        : 1;            /*!< [12..12] b76                                                              */
      __OM  uint32 b77        : 1;            /*!< [13..13] b77                                                              */
      __OM  uint32 b78        : 1;            /*!< [14..14] b78                                                              */
      __OM  uint32 b79        : 1;            /*!< [15..15] b79                                                              */
      __OM  uint32 b80        : 1;            /*!< [16..16] b80                                                              */
      __OM  uint32 b81        : 1;            /*!< [17..17] b81                                                              */
      __OM  uint32 b82        : 1;            /*!< [18..18] b82                                                              */
      __OM  uint32 b83        : 1;            /*!< [19..19] b83                                                              */
      __OM  uint32 b84        : 1;            /*!< [20..20] b84                                                              */
      __OM  uint32 b85        : 1;            /*!< [21..21] b85                                                              */
      __OM  uint32 b86        : 1;            /*!< [22..22] b86                                                              */
      __OM  uint32 b87        : 1;            /*!< [23..23] b87                                                              */
      __OM  uint32 b88        : 1;            /*!< [24..24] b88                                                              */
      __OM  uint32 b89        : 1;            /*!< [25..25] b89                                                              */
      __OM  uint32 b90        : 1;            /*!< [26..26] b90                                                              */
      __OM  uint32 b91        : 1;            /*!< [27..27] b91                                                              */
      __OM  uint32 b92        : 1;            /*!< [28..28] b92                                                              */
      __OM  uint32 b93        : 1;            /*!< [29..29] b93                                                              */
      __OM  uint32 b94        : 1;            /*!< [30..30] b94                                                              */
      __OM  uint32 b95        : 1;            /*!< [31..31] b95                                                              */
    } bit;
  } K2RR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000038) key registers                                              */
    
    struct {
      __OM  uint32 b32        : 1;            /*!< [0..0] b32                                                                */
      __OM  uint32 b33        : 1;            /*!< [1..1] b33                                                                */
      __OM  uint32 b34        : 1;            /*!< [2..2] b34                                                                */
      __OM  uint32 b35        : 1;            /*!< [3..3] b35                                                                */
      __OM  uint32 b36        : 1;            /*!< [4..4] b36                                                                */
      __OM  uint32 b37        : 1;            /*!< [5..5] b37                                                                */
      __OM  uint32 b38        : 1;            /*!< [6..6] b38                                                                */
      __OM  uint32 b39        : 1;            /*!< [7..7] b39                                                                */
      __OM  uint32 b40        : 1;            /*!< [8..8] b40                                                                */
      __OM  uint32 b41        : 1;            /*!< [9..9] b41                                                                */
      __OM  uint32 b42        : 1;            /*!< [10..10] b42                                                              */
      __OM  uint32 b43        : 1;            /*!< [11..11] b43                                                              */
      __OM  uint32 b44        : 1;            /*!< [12..12] b44                                                              */
      __OM  uint32 b45        : 1;            /*!< [13..13] b45                                                              */
      __OM  uint32 b46        : 1;            /*!< [14..14] b46                                                              */
      __OM  uint32 b47        : 1;            /*!< [15..15] b47                                                              */
      __OM  uint32 b48        : 1;            /*!< [16..16] b48                                                              */
      __OM  uint32 b49        : 1;            /*!< [17..17] b49                                                              */
      __OM  uint32 b50        : 1;            /*!< [18..18] b50                                                              */
      __OM  uint32 b51        : 1;            /*!< [19..19] b51                                                              */
      __OM  uint32 b52        : 1;            /*!< [20..20] b52                                                              */
      __OM  uint32 b53        : 1;            /*!< [21..21] b53                                                              */
      __OM  uint32 b54        : 1;            /*!< [22..22] b54                                                              */
      __OM  uint32 b55        : 1;            /*!< [23..23] b55                                                              */
      __OM  uint32 b56        : 1;            /*!< [24..24] b56                                                              */
      __OM  uint32 b57        : 1;            /*!< [25..25] b57                                                              */
      __OM  uint32 b58        : 1;            /*!< [26..26] b58                                                              */
      __OM  uint32 b59        : 1;            /*!< [27..27] b59                                                              */
      __OM  uint32 b60        : 1;            /*!< [28..28] b60                                                              */
      __OM  uint32 b61        : 1;            /*!< [29..29] b61                                                              */
      __OM  uint32 b62        : 1;            /*!< [30..30] b62                                                              */
      __OM  uint32 b63        : 1;            /*!< [31..31] b63                                                              */
    } bit;
  } K3LR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x0000003C) key registers                                              */
    
    struct {
      __OM  uint32 b0         : 1;            /*!< [0..0] b0                                                                 */
      __OM  uint32 b1         : 1;            /*!< [1..1] b1                                                                 */
      __OM  uint32 b2         : 1;            /*!< [2..2] b2                                                                 */
      __OM  uint32 b3         : 1;            /*!< [3..3] b3                                                                 */
      __OM  uint32 b4         : 1;            /*!< [4..4] b4                                                                 */
      __OM  uint32 b5         : 1;            /*!< [5..5] b5                                                                 */
      __OM  uint32 b6         : 1;            /*!< [6..6] b6                                                                 */
      __OM  uint32 b7         : 1;            /*!< [7..7] b7                                                                 */
      __OM  uint32 b8         : 1;            /*!< [8..8] b8                                                                 */
      __OM  uint32 b9         : 1;            /*!< [9..9] b9                                                                 */
      __OM  uint32 b10        : 1;            /*!< [10..10] b10                                                              */
      __OM  uint32 b11        : 1;            /*!< [11..11] b11                                                              */
      __OM  uint32 b12        : 1;            /*!< [12..12] b12                                                              */
      __OM  uint32 b13        : 1;            /*!< [13..13] b13                                                              */
      __OM  uint32 b14        : 1;            /*!< [14..14] b14                                                              */
      __OM  uint32 b15        : 1;            /*!< [15..15] b15                                                              */
      __OM  uint32 b16        : 1;            /*!< [16..16] b16                                                              */
      __OM  uint32 b17        : 1;            /*!< [17..17] b17                                                              */
      __OM  uint32 b18        : 1;            /*!< [18..18] b18                                                              */
      __OM  uint32 b19        : 1;            /*!< [19..19] b19                                                              */
      __OM  uint32 b20        : 1;            /*!< [20..20] b20                                                              */
      __OM  uint32 b21        : 1;            /*!< [21..21] b21                                                              */
      __OM  uint32 b22        : 1;            /*!< [22..22] b22                                                              */
      __OM  uint32 b23        : 1;            /*!< [23..23] b23                                                              */
      __OM  uint32 b24        : 1;            /*!< [24..24] b24                                                              */
      __OM  uint32 b25        : 1;            /*!< [25..25] b25                                                              */
      __OM  uint32 b26        : 1;            /*!< [26..26] b26                                                              */
      __OM  uint32 b27        : 1;            /*!< [27..27] b27                                                              */
      __OM  uint32 b28        : 1;            /*!< [28..28] b28                                                              */
      __OM  uint32 b29        : 1;            /*!< [29..29] b29                                                              */
      __OM  uint32 b30        : 1;            /*!< [30..30] b30                                                              */
      __OM  uint32 b31        : 1;            /*!< [31..31] b31                                                              */
    } bit;
  } K3RR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) initialization vector registers                            */
    
    struct {
      __IOM uint32 IV31       : 1;            /*!< [0..0] IV31                                                               */
      __IOM uint32 IV30       : 1;            /*!< [1..1] IV30                                                               */
      __IOM uint32 IV29       : 1;            /*!< [2..2] IV29                                                               */
      __IOM uint32 IV28       : 1;            /*!< [3..3] IV28                                                               */
      __IOM uint32 IV27       : 1;            /*!< [4..4] IV27                                                               */
      __IOM uint32 IV26       : 1;            /*!< [5..5] IV26                                                               */
      __IOM uint32 IV25       : 1;            /*!< [6..6] IV25                                                               */
      __IOM uint32 IV24       : 1;            /*!< [7..7] IV24                                                               */
      __IOM uint32 IV23       : 1;            /*!< [8..8] IV23                                                               */
      __IOM uint32 IV22       : 1;            /*!< [9..9] IV22                                                               */
      __IOM uint32 IV21       : 1;            /*!< [10..10] IV21                                                             */
      __IOM uint32 IV20       : 1;            /*!< [11..11] IV20                                                             */
      __IOM uint32 IV19       : 1;            /*!< [12..12] IV19                                                             */
      __IOM uint32 IV18       : 1;            /*!< [13..13] IV18                                                             */
      __IOM uint32 IV17       : 1;            /*!< [14..14] IV17                                                             */
      __IOM uint32 IV16       : 1;            /*!< [15..15] IV16                                                             */
      __IOM uint32 IV15       : 1;            /*!< [16..16] IV15                                                             */
      __IOM uint32 IV14       : 1;            /*!< [17..17] IV14                                                             */
      __IOM uint32 IV13       : 1;            /*!< [18..18] IV13                                                             */
      __IOM uint32 IV12       : 1;            /*!< [19..19] IV12                                                             */
      __IOM uint32 IV11       : 1;            /*!< [20..20] IV11                                                             */
      __IOM uint32 IV10       : 1;            /*!< [21..21] IV10                                                             */
      __IOM uint32 IV9        : 1;            /*!< [22..22] IV9                                                              */
      __IOM uint32 IV8        : 1;            /*!< [23..23] IV8                                                              */
      __IOM uint32 IV7        : 1;            /*!< [24..24] IV7                                                              */
      __IOM uint32 IV6        : 1;            /*!< [25..25] IV6                                                              */
      __IOM uint32 IV5        : 1;            /*!< [26..26] IV5                                                              */
      __IOM uint32 IV4        : 1;            /*!< [27..27] IV4                                                              */
      __IOM uint32 IV3        : 1;            /*!< [28..28] IV3                                                              */
      __IOM uint32 IV2        : 1;            /*!< [29..29] IV2                                                              */
      __IOM uint32 IV1        : 1;            /*!< [30..30] IV1                                                              */
      __IOM uint32 IV0        : 1;            /*!< [31..31] IV0                                                              */
    } bit;
  } IV0LR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000044) initialization vector registers                            */
    
    struct {
      __IOM uint32 IV63       : 1;            /*!< [0..0] IV63                                                               */
      __IOM uint32 IV62       : 1;            /*!< [1..1] IV62                                                               */
      __IOM uint32 IV61       : 1;            /*!< [2..2] IV61                                                               */
      __IOM uint32 IV60       : 1;            /*!< [3..3] IV60                                                               */
      __IOM uint32 IV59       : 1;            /*!< [4..4] IV59                                                               */
      __IOM uint32 IV58       : 1;            /*!< [5..5] IV58                                                               */
      __IOM uint32 IV57       : 1;            /*!< [6..6] IV57                                                               */
      __IOM uint32 IV56       : 1;            /*!< [7..7] IV56                                                               */
      __IOM uint32 IV55       : 1;            /*!< [8..8] IV55                                                               */
      __IOM uint32 IV54       : 1;            /*!< [9..9] IV54                                                               */
      __IOM uint32 IV53       : 1;            /*!< [10..10] IV53                                                             */
      __IOM uint32 IV52       : 1;            /*!< [11..11] IV52                                                             */
      __IOM uint32 IV51       : 1;            /*!< [12..12] IV51                                                             */
      __IOM uint32 IV50       : 1;            /*!< [13..13] IV50                                                             */
      __IOM uint32 IV49       : 1;            /*!< [14..14] IV49                                                             */
      __IOM uint32 IV48       : 1;            /*!< [15..15] IV48                                                             */
      __IOM uint32 IV47       : 1;            /*!< [16..16] IV47                                                             */
      __IOM uint32 IV46       : 1;            /*!< [17..17] IV46                                                             */
      __IOM uint32 IV45       : 1;            /*!< [18..18] IV45                                                             */
      __IOM uint32 IV44       : 1;            /*!< [19..19] IV44                                                             */
      __IOM uint32 IV43       : 1;            /*!< [20..20] IV43                                                             */
      __IOM uint32 IV42       : 1;            /*!< [21..21] IV42                                                             */
      __IOM uint32 IV41       : 1;            /*!< [22..22] IV41                                                             */
      __IOM uint32 IV40       : 1;            /*!< [23..23] IV40                                                             */
      __IOM uint32 IV39       : 1;            /*!< [24..24] IV39                                                             */
      __IOM uint32 IV38       : 1;            /*!< [25..25] IV38                                                             */
      __IOM uint32 IV37       : 1;            /*!< [26..26] IV37                                                             */
      __IOM uint32 IV36       : 1;            /*!< [27..27] IV36                                                             */
      __IOM uint32 IV35       : 1;            /*!< [28..28] IV35                                                             */
      __IOM uint32 IV34       : 1;            /*!< [29..29] IV34                                                             */
      __IOM uint32 IV33       : 1;            /*!< [30..30] IV33                                                             */
      __IOM uint32 IV32       : 1;            /*!< [31..31] IV32                                                             */
    } bit;
  } IV0RR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) initialization vector registers                            */
    
    struct {
      __IOM uint32 IV95       : 1;            /*!< [0..0] IV95                                                               */
      __IOM uint32 IV94       : 1;            /*!< [1..1] IV94                                                               */
      __IOM uint32 IV93       : 1;            /*!< [2..2] IV93                                                               */
      __IOM uint32 IV92       : 1;            /*!< [3..3] IV92                                                               */
      __IOM uint32 IV91       : 1;            /*!< [4..4] IV91                                                               */
      __IOM uint32 IV90       : 1;            /*!< [5..5] IV90                                                               */
      __IOM uint32 IV89       : 1;            /*!< [6..6] IV89                                                               */
      __IOM uint32 IV88       : 1;            /*!< [7..7] IV88                                                               */
      __IOM uint32 IV87       : 1;            /*!< [8..8] IV87                                                               */
      __IOM uint32 IV86       : 1;            /*!< [9..9] IV86                                                               */
      __IOM uint32 IV85       : 1;            /*!< [10..10] IV85                                                             */
      __IOM uint32 IV84       : 1;            /*!< [11..11] IV84                                                             */
      __IOM uint32 IV83       : 1;            /*!< [12..12] IV83                                                             */
      __IOM uint32 IV82       : 1;            /*!< [13..13] IV82                                                             */
      __IOM uint32 IV81       : 1;            /*!< [14..14] IV81                                                             */
      __IOM uint32 IV80       : 1;            /*!< [15..15] IV80                                                             */
      __IOM uint32 IV79       : 1;            /*!< [16..16] IV79                                                             */
      __IOM uint32 IV78       : 1;            /*!< [17..17] IV78                                                             */
      __IOM uint32 IV77       : 1;            /*!< [18..18] IV77                                                             */
      __IOM uint32 IV76       : 1;            /*!< [19..19] IV76                                                             */
      __IOM uint32 IV75       : 1;            /*!< [20..20] IV75                                                             */
      __IOM uint32 IV74       : 1;            /*!< [21..21] IV74                                                             */
      __IOM uint32 IV73       : 1;            /*!< [22..22] IV73                                                             */
      __IOM uint32 IV72       : 1;            /*!< [23..23] IV72                                                             */
      __IOM uint32 IV71       : 1;            /*!< [24..24] IV71                                                             */
      __IOM uint32 IV70       : 1;            /*!< [25..25] IV70                                                             */
      __IOM uint32 IV69       : 1;            /*!< [26..26] IV69                                                             */
      __IOM uint32 IV68       : 1;            /*!< [27..27] IV68                                                             */
      __IOM uint32 IV67       : 1;            /*!< [28..28] IV67                                                             */
      __IOM uint32 IV66       : 1;            /*!< [29..29] IV66                                                             */
      __IOM uint32 IV65       : 1;            /*!< [30..30] IV65                                                             */
      __IOM uint32 IV64       : 1;            /*!< [31..31] IV64                                                             */
    } bit;
  } IV1LR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) initialization vector registers                            */
    
    struct {
      __IOM uint32 IV127      : 1;            /*!< [0..0] IV127                                                              */
      __IOM uint32 IV126      : 1;            /*!< [1..1] IV126                                                              */
      __IOM uint32 IV125      : 1;            /*!< [2..2] IV125                                                              */
      __IOM uint32 IV124      : 1;            /*!< [3..3] IV124                                                              */
      __IOM uint32 IV123      : 1;            /*!< [4..4] IV123                                                              */
      __IOM uint32 IV122      : 1;            /*!< [5..5] IV122                                                              */
      __IOM uint32 IV121      : 1;            /*!< [6..6] IV121                                                              */
      __IOM uint32 IV120      : 1;            /*!< [7..7] IV120                                                              */
      __IOM uint32 IV119      : 1;            /*!< [8..8] IV119                                                              */
      __IOM uint32 IV118      : 1;            /*!< [9..9] IV118                                                              */
      __IOM uint32 IV117      : 1;            /*!< [10..10] IV117                                                            */
      __IOM uint32 IV116      : 1;            /*!< [11..11] IV116                                                            */
      __IOM uint32 IV115      : 1;            /*!< [12..12] IV115                                                            */
      __IOM uint32 IV114      : 1;            /*!< [13..13] IV114                                                            */
      __IOM uint32 IV113      : 1;            /*!< [14..14] IV113                                                            */
      __IOM uint32 IV112      : 1;            /*!< [15..15] IV112                                                            */
      __IOM uint32 IV111      : 1;            /*!< [16..16] IV111                                                            */
      __IOM uint32 IV110      : 1;            /*!< [17..17] IV110                                                            */
      __IOM uint32 IV109      : 1;            /*!< [18..18] IV109                                                            */
      __IOM uint32 IV108      : 1;            /*!< [19..19] IV108                                                            */
      __IOM uint32 IV107      : 1;            /*!< [20..20] IV107                                                            */
      __IOM uint32 IV106      : 1;            /*!< [21..21] IV106                                                            */
      __IOM uint32 IV105      : 1;            /*!< [22..22] IV105                                                            */
      __IOM uint32 IV104      : 1;            /*!< [23..23] IV104                                                            */
      __IOM uint32 IV103      : 1;            /*!< [24..24] IV103                                                            */
      __IOM uint32 IV102      : 1;            /*!< [25..25] IV102                                                            */
      __IOM uint32 IV101      : 1;            /*!< [26..26] IV101                                                            */
      __IOM uint32 IV100      : 1;            /*!< [27..27] IV100                                                            */
      __IOM uint32 IV99       : 1;            /*!< [28..28] IV99                                                             */
      __IOM uint32 IV98       : 1;            /*!< [29..29] IV98                                                             */
      __IOM uint32 IV97       : 1;            /*!< [30..30] IV97                                                             */
      __IOM uint32 IV96       : 1;            /*!< [31..31] IV96                                                             */
    } bit;
  } IV1RR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000050) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCMCCM0R : 32;           /*!< [31..0] CSGCMCCM0R                                                        */
    } bit;
  } CSGCMCCM0R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000054) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCMCCM1R : 32;           /*!< [31..0] CSGCMCCM1R                                                        */
    } bit;
  } CSGCMCCM1R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000058) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCMCCM2R : 32;           /*!< [31..0] CSGCMCCM2R                                                        */
    } bit;
  } CSGCMCCM2R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000005C) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCMCCM3R : 32;           /*!< [31..0] CSGCMCCM3R                                                        */
    } bit;
  } CSGCMCCM3R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000060) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCMCCM4R : 32;           /*!< [31..0] CSGCMCCM4R                                                        */
    } bit;
  } CSGCMCCM4R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000064) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCMCCM5R : 32;           /*!< [31..0] CSGCMCCM5R                                                        */
    } bit;
  } CSGCMCCM5R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000068) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCMCCM6R : 32;           /*!< [31..0] CSGCMCCM6R                                                        */
    } bit;
  } CSGCMCCM6R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000006C) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCMCCM7R : 32;           /*!< [31..0] CSGCMCCM7R                                                        */
    } bit;
  } CSGCMCCM7R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000070) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCM0R    : 32;           /*!< [31..0] CSGCM0R                                                           */
    } bit;
  } CSGCM0R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000074) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCM1R    : 32;           /*!< [31..0] CSGCM1R                                                           */
    } bit;
  } CSGCM1R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000078) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCM2R    : 32;           /*!< [31..0] CSGCM2R                                                           */
    } bit;
  } CSGCM2R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000007C) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCM3R    : 32;           /*!< [31..0] CSGCM3R                                                           */
    } bit;
  } CSGCM3R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000080) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCM4R    : 32;           /*!< [31..0] CSGCM4R                                                           */
    } bit;
  } CSGCM4R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000084) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCM5R    : 32;           /*!< [31..0] CSGCM5R                                                           */
    } bit;
  } CSGCM5R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000088) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCM6R    : 32;           /*!< [31..0] CSGCM6R                                                           */
    } bit;
  } CSGCM6R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000008C) context swap register                                      */
    
    struct {
      __IOM uint32 CSGCM7R    : 32;           /*!< [31..0] CSGCM7R                                                           */
    } bit;
  } CSGCM7R;
} CRYP_Type;                                    /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                           DCMI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital camera interface (DCMI)
  */

typedef struct {                                /*!< (@ 0x50050000) DCMI Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CAPTURE    : 1;            /*!< [0..0] Capture enable                                                     */
      __IOM uint32 CM         : 1;            /*!< [1..1] Capture mode                                                       */
      __IOM uint32 CROP       : 1;            /*!< [2..2] Crop feature                                                       */
      __IOM uint32 JPEG       : 1;            /*!< [3..3] JPEG format                                                        */
      __IOM uint32 ESS        : 1;            /*!< [4..4] Embedded synchronization select                                    */
      __IOM uint32 PCKPOL     : 1;            /*!< [5..5] Pixel clock polarity                                               */
      __IOM uint32 HSPOL      : 1;            /*!< [6..6] Horizontal synchronization polarity                                */
      __IOM uint32 VSPOL      : 1;            /*!< [7..7] Vertical synchronization polarity                                  */
      __IOM uint32 FCRC       : 2;            /*!< [9..8] Frame capture rate control                                         */
      __IOM uint32 EDM        : 2;            /*!< [11..10] Extended data mode                                               */
            uint32            : 2;
      __IOM uint32 ENABLE     : 1;            /*!< [14..14] DCMI enable                                                      */
            uint32            : 17;
    } bit;
  } CR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000004) status register                                            */
    
    struct {
      __IM  uint32 HSYNC      : 1;            /*!< [0..0] HSYNC                                                              */
      __IM  uint32 VSYNC      : 1;            /*!< [1..1] VSYNC                                                              */
      __IM  uint32 FNE        : 1;            /*!< [2..2] FIFO not empty                                                     */
            uint32            : 29;
    } bit;
  } SR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) raw interrupt status register                              */
    
    struct {
      __IM  uint32 FRAME_RIS  : 1;            /*!< [0..0] Capture complete raw interrupt status                              */
      __IM  uint32 OVR_RIS    : 1;            /*!< [1..1] Overrun raw interrupt status                                       */
      __IM  uint32 ERR_RIS    : 1;            /*!< [2..2] Synchronization error raw interrupt status                         */
      __IM  uint32 VSYNC_RIS  : 1;            /*!< [3..3] VSYNC raw interrupt status                                         */
      __IM  uint32 LINE_RIS   : 1;            /*!< [4..4] Line raw interrupt status                                          */
            uint32            : 27;
    } bit;
  } RIS;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) interrupt enable register                                  */
    
    struct {
      __IOM uint32 FRAME_IE   : 1;            /*!< [0..0] Capture complete interrupt enable                                  */
      __IOM uint32 OVR_IE     : 1;            /*!< [1..1] Overrun interrupt enable                                           */
      __IOM uint32 ERR_IE     : 1;            /*!< [2..2] Synchronization error interrupt enable                             */
      __IOM uint32 VSYNC_IE   : 1;            /*!< [3..3] VSYNC interrupt enable                                             */
      __IOM uint32 LINE_IE    : 1;            /*!< [4..4] Line interrupt enable                                              */
            uint32            : 27;
    } bit;
  } IER;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000010) masked interrupt status register                           */
    
    struct {
      __IM  uint32 FRAME_MIS  : 1;            /*!< [0..0] Capture complete masked interrupt status                           */
      __IM  uint32 OVR_MIS    : 1;            /*!< [1..1] Overrun masked interrupt status                                    */
      __IM  uint32 ERR_MIS    : 1;            /*!< [2..2] Synchronization error masked interrupt status                      */
      __IM  uint32 VSYNC_MIS  : 1;            /*!< [3..3] VSYNC masked interrupt status                                      */
      __IM  uint32 LINE_MIS   : 1;            /*!< [4..4] Line masked interrupt status                                       */
            uint32            : 27;
    } bit;
  } MIS;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000014) interrupt clear register                                   */
    
    struct {
      __OM  uint32 FRAME_ISC  : 1;            /*!< [0..0] Capture complete interrupt status clear                            */
      __OM  uint32 OVR_ISC    : 1;            /*!< [1..1] Overrun interrupt status clear                                     */
      __OM  uint32 ERR_ISC    : 1;            /*!< [2..2] Synchronization error interrupt status clear                       */
      __OM  uint32 VSYNC_ISC  : 1;            /*!< [3..3] Vertical synch interrupt status clear                              */
      __OM  uint32 LINE_ISC   : 1;            /*!< [4..4] line interrupt status clear                                        */
            uint32            : 27;
    } bit;
  } ICR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) embedded synchronization code register                     */
    
    struct {
      __IOM uint32 FSC        : 8;            /*!< [7..0] Frame start delimiter code                                         */
      __IOM uint32 LSC        : 8;            /*!< [15..8] Line start delimiter code                                         */
      __IOM uint32 LEC        : 8;            /*!< [23..16] Line end delimiter code                                          */
      __IOM uint32 FEC        : 8;            /*!< [31..24] Frame end delimiter code                                         */
    } bit;
  } ESCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) embedded synchronization unmask register                   */
    
    struct {
      __IOM uint32 FSU        : 8;            /*!< [7..0] Frame start delimiter unmask                                       */
      __IOM uint32 LSU        : 8;            /*!< [15..8] Line start delimiter unmask                                       */
      __IOM uint32 LEU        : 8;            /*!< [23..16] Line end delimiter unmask                                        */
      __IOM uint32 FEU        : 8;            /*!< [31..24] Frame end delimiter unmask                                       */
    } bit;
  } ESUR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) crop window start                                          */
    
    struct {
      __IOM uint32 HOFFCNT    : 14;           /*!< [13..0] Horizontal offset count                                           */
            uint32            : 2;
      __IOM uint32 VST        : 13;           /*!< [28..16] Vertical start line count                                        */
            uint32            : 3;
    } bit;
  } CWSTRT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) crop window size                                           */
    
    struct {
      __IOM uint32 CAPCNT     : 14;           /*!< [13..0] Capture count                                                     */
            uint32            : 2;
      __IOM uint32 VLINE      : 14;           /*!< [29..16] Vertical line count                                              */
            uint32            : 2;
    } bit;
  } CWSIZE;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000028) data register                                              */
    
    struct {
      __IM  uint32 Byte0      : 8;            /*!< [7..0] Data byte 0                                                        */
      __IM  uint32 Byte1      : 8;            /*!< [15..8] Data byte 1                                                       */
      __IM  uint32 Byte2      : 8;            /*!< [23..16] Data byte 2                                                      */
      __IM  uint32 Byte3      : 8;            /*!< [31..24] Data byte 3                                                      */
    } bit;
  } DR;
} DCMI_Type;                                    /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Flexible memory controller (FMC)
  */

typedef struct {                                /*!< (@ 0xA0000000) FMC Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) SRAM/NOR-Flash chip-select control register 1              */
    
    struct {
      __IOM uint32 MBKEN      : 1;            /*!< [0..0] MBKEN                                                              */
      __IOM uint32 MUXEN      : 1;            /*!< [1..1] MUXEN                                                              */
      __IOM uint32 MTYP       : 2;            /*!< [3..2] MTYP                                                               */
      __IOM uint32 MWID       : 2;            /*!< [5..4] MWID                                                               */
      __IOM uint32 FACCEN     : 1;            /*!< [6..6] FACCEN                                                             */
            uint32            : 1;
      __IOM uint32 BURSTEN    : 1;            /*!< [8..8] BURSTEN                                                            */
      __IOM uint32 WAITPOL    : 1;            /*!< [9..9] WAITPOL                                                            */
            uint32            : 1;
      __IOM uint32 WAITCFG    : 1;            /*!< [11..11] WAITCFG                                                          */
      __IOM uint32 WREN       : 1;            /*!< [12..12] WREN                                                             */
      __IOM uint32 WAITEN     : 1;            /*!< [13..13] WAITEN                                                           */
      __IOM uint32 EXTMOD     : 1;            /*!< [14..14] EXTMOD                                                           */
      __IOM uint32 ASYNCWAIT  : 1;            /*!< [15..15] ASYNCWAIT                                                        */
            uint32            : 3;
      __IOM uint32 CBURSTRW   : 1;            /*!< [19..19] CBURSTRW                                                         */
      __IOM uint32 CCLKEN     : 1;            /*!< [20..20] CCLKEN                                                           */
            uint32            : 11;
    } bit;
  } BCR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) SRAM/NOR-Flash chip-select timing register 1               */
    
    struct {
      __IOM uint32 ADDSET     : 4;            /*!< [3..0] ADDSET                                                             */
      __IOM uint32 ADDHLD     : 4;            /*!< [7..4] ADDHLD                                                             */
      __IOM uint32 DATAST     : 8;            /*!< [15..8] DATAST                                                            */
      __IOM uint32 BUSTURN    : 4;            /*!< [19..16] BUSTURN                                                          */
      __IOM uint32 CLKDIV     : 4;            /*!< [23..20] CLKDIV                                                           */
      __IOM uint32 DATLAT     : 4;            /*!< [27..24] DATLAT                                                           */
      __IOM uint32 ACCMOD     : 2;            /*!< [29..28] ACCMOD                                                           */
            uint32            : 2;
    } bit;
  } BTR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) SRAM/NOR-Flash chip-select control register 2              */
    
    struct {
      __IOM uint32 MBKEN      : 1;            /*!< [0..0] MBKEN                                                              */
      __IOM uint32 MUXEN      : 1;            /*!< [1..1] MUXEN                                                              */
      __IOM uint32 MTYP       : 2;            /*!< [3..2] MTYP                                                               */
      __IOM uint32 MWID       : 2;            /*!< [5..4] MWID                                                               */
      __IOM uint32 FACCEN     : 1;            /*!< [6..6] FACCEN                                                             */
            uint32            : 1;
      __IOM uint32 BURSTEN    : 1;            /*!< [8..8] BURSTEN                                                            */
      __IOM uint32 WAITPOL    : 1;            /*!< [9..9] WAITPOL                                                            */
      __IOM uint32 WRAPMOD    : 1;            /*!< [10..10] WRAPMOD                                                          */
      __IOM uint32 WAITCFG    : 1;            /*!< [11..11] WAITCFG                                                          */
      __IOM uint32 WREN       : 1;            /*!< [12..12] WREN                                                             */
      __IOM uint32 WAITEN     : 1;            /*!< [13..13] WAITEN                                                           */
      __IOM uint32 EXTMOD     : 1;            /*!< [14..14] EXTMOD                                                           */
      __IOM uint32 ASYNCWAIT  : 1;            /*!< [15..15] ASYNCWAIT                                                        */
            uint32            : 3;
      __IOM uint32 CBURSTRW   : 1;            /*!< [19..19] CBURSTRW                                                         */
            uint32            : 12;
    } bit;
  } BCR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) SRAM/NOR-Flash chip-select timing register 2               */
    
    struct {
      __IOM uint32 ADDSET     : 4;            /*!< [3..0] ADDSET                                                             */
      __IOM uint32 ADDHLD     : 4;            /*!< [7..4] ADDHLD                                                             */
      __IOM uint32 DATAST     : 8;            /*!< [15..8] DATAST                                                            */
      __IOM uint32 BUSTURN    : 4;            /*!< [19..16] BUSTURN                                                          */
      __IOM uint32 CLKDIV     : 4;            /*!< [23..20] CLKDIV                                                           */
      __IOM uint32 DATLAT     : 4;            /*!< [27..24] DATLAT                                                           */
      __IOM uint32 ACCMOD     : 2;            /*!< [29..28] ACCMOD                                                           */
            uint32            : 2;
    } bit;
  } BTR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) SRAM/NOR-Flash chip-select control register 3              */
    
    struct {
      __IOM uint32 MBKEN      : 1;            /*!< [0..0] MBKEN                                                              */
      __IOM uint32 MUXEN      : 1;            /*!< [1..1] MUXEN                                                              */
      __IOM uint32 MTYP       : 2;            /*!< [3..2] MTYP                                                               */
      __IOM uint32 MWID       : 2;            /*!< [5..4] MWID                                                               */
      __IOM uint32 FACCEN     : 1;            /*!< [6..6] FACCEN                                                             */
            uint32            : 1;
      __IOM uint32 BURSTEN    : 1;            /*!< [8..8] BURSTEN                                                            */
      __IOM uint32 WAITPOL    : 1;            /*!< [9..9] WAITPOL                                                            */
      __IOM uint32 WRAPMOD    : 1;            /*!< [10..10] WRAPMOD                                                          */
      __IOM uint32 WAITCFG    : 1;            /*!< [11..11] WAITCFG                                                          */
      __IOM uint32 WREN       : 1;            /*!< [12..12] WREN                                                             */
      __IOM uint32 WAITEN     : 1;            /*!< [13..13] WAITEN                                                           */
      __IOM uint32 EXTMOD     : 1;            /*!< [14..14] EXTMOD                                                           */
      __IOM uint32 ASYNCWAIT  : 1;            /*!< [15..15] ASYNCWAIT                                                        */
            uint32            : 3;
      __IOM uint32 CBURSTRW   : 1;            /*!< [19..19] CBURSTRW                                                         */
            uint32            : 12;
    } bit;
  } BCR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) SRAM/NOR-Flash chip-select timing register 3               */
    
    struct {
      __IOM uint32 ADDSET     : 4;            /*!< [3..0] ADDSET                                                             */
      __IOM uint32 ADDHLD     : 4;            /*!< [7..4] ADDHLD                                                             */
      __IOM uint32 DATAST     : 8;            /*!< [15..8] DATAST                                                            */
      __IOM uint32 BUSTURN    : 4;            /*!< [19..16] BUSTURN                                                          */
      __IOM uint32 CLKDIV     : 4;            /*!< [23..20] CLKDIV                                                           */
      __IOM uint32 DATLAT     : 4;            /*!< [27..24] DATLAT                                                           */
      __IOM uint32 ACCMOD     : 2;            /*!< [29..28] ACCMOD                                                           */
            uint32            : 2;
    } bit;
  } BTR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) SRAM/NOR-Flash chip-select control register 4              */
    
    struct {
      __IOM uint32 MBKEN      : 1;            /*!< [0..0] MBKEN                                                              */
      __IOM uint32 MUXEN      : 1;            /*!< [1..1] MUXEN                                                              */
      __IOM uint32 MTYP       : 2;            /*!< [3..2] MTYP                                                               */
      __IOM uint32 MWID       : 2;            /*!< [5..4] MWID                                                               */
      __IOM uint32 FACCEN     : 1;            /*!< [6..6] FACCEN                                                             */
            uint32            : 1;
      __IOM uint32 BURSTEN    : 1;            /*!< [8..8] BURSTEN                                                            */
      __IOM uint32 WAITPOL    : 1;            /*!< [9..9] WAITPOL                                                            */
      __IOM uint32 WRAPMOD    : 1;            /*!< [10..10] WRAPMOD                                                          */
      __IOM uint32 WAITCFG    : 1;            /*!< [11..11] WAITCFG                                                          */
      __IOM uint32 WREN       : 1;            /*!< [12..12] WREN                                                             */
      __IOM uint32 WAITEN     : 1;            /*!< [13..13] WAITEN                                                           */
      __IOM uint32 EXTMOD     : 1;            /*!< [14..14] EXTMOD                                                           */
      __IOM uint32 ASYNCWAIT  : 1;            /*!< [15..15] ASYNCWAIT                                                        */
            uint32            : 3;
      __IOM uint32 CBURSTRW   : 1;            /*!< [19..19] CBURSTRW                                                         */
            uint32            : 12;
    } bit;
  } BCR4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) SRAM/NOR-Flash chip-select timing register 4               */
    
    struct {
      __IOM uint32 ADDSET     : 4;            /*!< [3..0] ADDSET                                                             */
      __IOM uint32 ADDHLD     : 4;            /*!< [7..4] ADDHLD                                                             */
      __IOM uint32 DATAST     : 8;            /*!< [15..8] DATAST                                                            */
      __IOM uint32 BUSTURN    : 4;            /*!< [19..16] BUSTURN                                                          */
      __IOM uint32 CLKDIV     : 4;            /*!< [23..20] CLKDIV                                                           */
      __IOM uint32 DATLAT     : 4;            /*!< [27..24] DATLAT                                                           */
      __IOM uint32 ACCMOD     : 2;            /*!< [29..28] ACCMOD                                                           */
            uint32            : 2;
    } bit;
  } BTR4;
  __IM  uint32  RESERVED[24];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000080) PC Card/NAND Flash control register                        */
    
    struct {
            uint32            : 1;
      __IOM uint32 PWAITEN    : 1;            /*!< [1..1] PWAITEN                                                            */
      __IOM uint32 PBKEN      : 1;            /*!< [2..2] PBKEN                                                              */
      __IOM uint32 PTYP       : 1;            /*!< [3..3] PTYP                                                               */
      __IOM uint32 PWID       : 2;            /*!< [5..4] PWID                                                               */
      __IOM uint32 ECCEN      : 1;            /*!< [6..6] ECCEN                                                              */
            uint32            : 2;
      __IOM uint32 TCLR       : 4;            /*!< [12..9] TCLR                                                              */
      __IOM uint32 TAR        : 4;            /*!< [16..13] TAR                                                              */
      __IOM uint32 ECCPS      : 3;            /*!< [19..17] ECCPS                                                            */
            uint32            : 12;
    } bit;
  } PCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000084) FIFO status and interrupt register                         */
    
    struct {
      __IOM uint32 IRS        : 1;            /*!< [0..0] IRS                                                                */
      __IOM uint32 ILS        : 1;            /*!< [1..1] ILS                                                                */
      __IOM uint32 IFS        : 1;            /*!< [2..2] IFS                                                                */
      __IOM uint32 IREN       : 1;            /*!< [3..3] IREN                                                               */
      __IOM uint32 ILEN       : 1;            /*!< [4..4] ILEN                                                               */
      __IOM uint32 IFEN       : 1;            /*!< [5..5] IFEN                                                               */
      __IM  uint32 FEMPT      : 1;            /*!< [6..6] FEMPT                                                              */
            uint32            : 25;
    } bit;
  } SR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000088) Common memory space timing register                        */
    
    struct {
      __IOM uint32 MEMSETx    : 8;            /*!< [7..0] MEMSETx                                                            */
      __IOM uint32 MEMWAITx   : 8;            /*!< [15..8] MEMWAITx                                                          */
      __IOM uint32 MEMHOLDx   : 8;            /*!< [23..16] MEMHOLDx                                                         */
      __IOM uint32 MEMHIZx    : 8;            /*!< [31..24] MEMHIZx                                                          */
    } bit;
  } PMEM;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000008C) Attribute memory space timing register                     */
    
    struct {
      __IOM uint32 ATTSETx    : 8;            /*!< [7..0] ATTSETx                                                            */
      __IOM uint32 ATTWAITx   : 8;            /*!< [15..8] ATTWAITx                                                          */
      __IOM uint32 ATTHOLDx   : 8;            /*!< [23..16] ATTHOLDx                                                         */
      __IOM uint32 ATTHIZx    : 8;            /*!< [31..24] ATTHIZx                                                          */
    } bit;
  } PATT;
  __IM  uint32  RESERVED1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000094) ECC result register                                        */
    
    struct {
      __IM  uint32 ECCx       : 32;           /*!< [31..0] ECCx                                                              */
    } bit;
  } ECCR;
  __IM  uint32  RESERVED2[27];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000104) SRAM/NOR-Flash write timing registers 1                    */
    
    struct {
      __IOM uint32 ADDSET     : 4;            /*!< [3..0] ADDSET                                                             */
      __IOM uint32 ADDHLD     : 4;            /*!< [7..4] ADDHLD                                                             */
      __IOM uint32 DATAST     : 8;            /*!< [15..8] DATAST                                                            */
            uint32            : 4;
      __IOM uint32 CLKDIV     : 4;            /*!< [23..20] CLKDIV                                                           */
      __IOM uint32 DATLAT     : 4;            /*!< [27..24] DATLAT                                                           */
      __IOM uint32 ACCMOD     : 2;            /*!< [29..28] ACCMOD                                                           */
            uint32            : 2;
    } bit;
  } BWTR1;
  __IM  uint32  RESERVED3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000010C) SRAM/NOR-Flash write timing registers 2                    */
    
    struct {
      __IOM uint32 ADDSET     : 4;            /*!< [3..0] ADDSET                                                             */
      __IOM uint32 ADDHLD     : 4;            /*!< [7..4] ADDHLD                                                             */
      __IOM uint32 DATAST     : 8;            /*!< [15..8] DATAST                                                            */
            uint32            : 4;
      __IOM uint32 CLKDIV     : 4;            /*!< [23..20] CLKDIV                                                           */
      __IOM uint32 DATLAT     : 4;            /*!< [27..24] DATLAT                                                           */
      __IOM uint32 ACCMOD     : 2;            /*!< [29..28] ACCMOD                                                           */
            uint32            : 2;
    } bit;
  } BWTR2;
  __IM  uint32  RESERVED4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000114) SRAM/NOR-Flash write timing registers 3                    */
    
    struct {
      __IOM uint32 ADDSET     : 4;            /*!< [3..0] ADDSET                                                             */
      __IOM uint32 ADDHLD     : 4;            /*!< [7..4] ADDHLD                                                             */
      __IOM uint32 DATAST     : 8;            /*!< [15..8] DATAST                                                            */
            uint32            : 4;
      __IOM uint32 CLKDIV     : 4;            /*!< [23..20] CLKDIV                                                           */
      __IOM uint32 DATLAT     : 4;            /*!< [27..24] DATLAT                                                           */
      __IOM uint32 ACCMOD     : 2;            /*!< [29..28] ACCMOD                                                           */
            uint32            : 2;
    } bit;
  } BWTR3;
  __IM  uint32  RESERVED5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000011C) SRAM/NOR-Flash write timing registers 4                    */
    
    struct {
      __IOM uint32 ADDSET     : 4;            /*!< [3..0] ADDSET                                                             */
      __IOM uint32 ADDHLD     : 4;            /*!< [7..4] ADDHLD                                                             */
      __IOM uint32 DATAST     : 8;            /*!< [15..8] DATAST                                                            */
            uint32            : 4;
      __IOM uint32 CLKDIV     : 4;            /*!< [23..20] CLKDIV                                                           */
      __IOM uint32 DATLAT     : 4;            /*!< [27..24] DATLAT                                                           */
      __IOM uint32 ACCMOD     : 2;            /*!< [29..28] ACCMOD                                                           */
            uint32            : 2;
    } bit;
  } BWTR4;
  __IM  uint32  RESERVED6[8];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000140) SDRAM Control Register 1                                   */
    
    struct {
      __IOM uint32 NC         : 2;            /*!< [1..0] Number of column address bits                                      */
      __IOM uint32 NR         : 2;            /*!< [3..2] Number of row address bits                                         */
      __IOM uint32 MWID       : 2;            /*!< [5..4] Memory data bus width                                              */
      __IOM uint32 NB         : 1;            /*!< [6..6] Number of internal banks                                           */
      __IOM uint32 CAS        : 2;            /*!< [8..7] CAS latency                                                        */
      __IOM uint32 WP         : 1;            /*!< [9..9] Write protection                                                   */
      __IOM uint32 SDCLK      : 2;            /*!< [11..10] SDRAM clock configuration                                        */
      __IOM uint32 RBURST     : 1;            /*!< [12..12] Burst read                                                       */
      __IOM uint32 RPIPE      : 2;            /*!< [14..13] Read pipe                                                        */
            uint32            : 17;
    } bit;
  } SDCR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000144) SDRAM Control Register 2                                   */
    
    struct {
      __IOM uint32 NC         : 2;            /*!< [1..0] Number of column address bits                                      */
      __IOM uint32 NR         : 2;            /*!< [3..2] Number of row address bits                                         */
      __IOM uint32 MWID       : 2;            /*!< [5..4] Memory data bus width                                              */
      __IOM uint32 NB         : 1;            /*!< [6..6] Number of internal banks                                           */
      __IOM uint32 CAS        : 2;            /*!< [8..7] CAS latency                                                        */
      __IOM uint32 WP         : 1;            /*!< [9..9] Write protection                                                   */
      __IOM uint32 SDCLK      : 2;            /*!< [11..10] SDRAM clock configuration                                        */
      __IOM uint32 RBURST     : 1;            /*!< [12..12] Burst read                                                       */
      __IOM uint32 RPIPE      : 2;            /*!< [14..13] Read pipe                                                        */
            uint32            : 17;
    } bit;
  } SDCR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000148) SDRAM Timing register 1                                    */
    
    struct {
      __IOM uint32 TMRD       : 4;            /*!< [3..0] Load Mode Register to Active                                       */
      __IOM uint32 TXSR       : 4;            /*!< [7..4] Exit self-refresh delay                                            */
      __IOM uint32 TRAS       : 4;            /*!< [11..8] Self refresh time                                                 */
      __IOM uint32 TRC        : 4;            /*!< [15..12] Row cycle delay                                                  */
      __IOM uint32 TWR        : 4;            /*!< [19..16] Recovery delay                                                   */
      __IOM uint32 TRP        : 4;            /*!< [23..20] Row precharge delay                                              */
      __IOM uint32 TRCD       : 4;            /*!< [27..24] Row to column delay                                              */
            uint32            : 4;
    } bit;
  } SDTR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000014C) SDRAM Timing register 2                                    */
    
    struct {
      __IOM uint32 TMRD       : 4;            /*!< [3..0] Load Mode Register to Active                                       */
      __IOM uint32 TXSR       : 4;            /*!< [7..4] Exit self-refresh delay                                            */
      __IOM uint32 TRAS       : 4;            /*!< [11..8] Self refresh time                                                 */
      __IOM uint32 TRC        : 4;            /*!< [15..12] Row cycle delay                                                  */
      __IOM uint32 TWR        : 4;            /*!< [19..16] Recovery delay                                                   */
      __IOM uint32 TRP        : 4;            /*!< [23..20] Row precharge delay                                              */
      __IOM uint32 TRCD       : 4;            /*!< [27..24] Row to column delay                                              */
            uint32            : 4;
    } bit;
  } SDTR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000150) SDRAM Command Mode register                                */
    
    struct {
      __OM  uint32 MODE       : 3;            /*!< [2..0] Command mode                                                       */
      __OM  uint32 CTB2       : 1;            /*!< [3..3] Command target bank 2                                              */
      __OM  uint32 CTB1       : 1;            /*!< [4..4] Command target bank 1                                              */
      __IOM uint32 NRFS       : 4;            /*!< [8..5] Number of Auto-refresh                                             */
      __IOM uint32 MRD        : 13;           /*!< [21..9] Mode Register definition                                          */
            uint32            : 10;
    } bit;
  } SDCMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000154) SDRAM Refresh Timer register                               */
    
    struct {
      __OM  uint32 CRE        : 1;            /*!< [0..0] Clear Refresh error flag                                           */
      __IOM uint32 COUNT      : 13;           /*!< [13..1] Refresh Timer Count                                               */
      __IOM uint32 REIE       : 1;            /*!< [14..14] RES Interrupt Enable                                             */
            uint32            : 17;
    } bit;
  } SDRTR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000158) SDRAM Status register                                      */
    
    struct {
      __IM  uint32 RE         : 1;            /*!< [0..0] Refresh error flag                                                 */
      __IM  uint32 MODES1     : 2;            /*!< [2..1] Status Mode for Bank 1                                             */
      __IM  uint32 MODES2     : 2;            /*!< [4..3] Status Mode for Bank 2                                             */
      __IM  uint32 BUSY       : 1;            /*!< [5..5] Busy status                                                        */
            uint32            : 26;
    } bit;
  } SDSR;
} FMC_Type;                                     /*!< Size = 348 (0x15c)                                                        */



/* =========================================================================================================================== */
/* ================                                            DBG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug support (DBG)
  */

typedef struct {                                /*!< (@ 0xE0042000) DBG Structure                                              */
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000000) IDCODE                                                     */
    
    struct {
      __IM  uint32 DEV_ID     : 12;           /*!< [11..0] DEV_ID                                                            */
            uint32            : 4;
      __IM  uint32 REV_ID     : 16;           /*!< [31..16] REV_ID                                                           */
    } bit;
  } DBGMCU_IDCODE;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Control Register                                           */
    
    struct {
      __IOM uint32 DBG_SLEEP  : 1;            /*!< [0..0] DBG_SLEEP                                                          */
      __IOM uint32 DBG_STOP   : 1;            /*!< [1..1] DBG_STOP                                                           */
      __IOM uint32 DBG_STANDBY : 1;           /*!< [2..2] DBG_STANDBY                                                        */
            uint32            : 2;
      __IOM uint32 TRACE_IOEN : 1;            /*!< [5..5] TRACE_IOEN                                                         */
      __IOM uint32 TRACE_MODE : 2;            /*!< [7..6] TRACE_MODE                                                         */
            uint32            : 24;
    } bit;
  } DBGMCU_CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Debug MCU APB1 Freeze registe                              */
    
    struct {
      __IOM uint32 DBG_TIM2_STOP : 1;         /*!< [0..0] DBG_TIM2_STOP                                                      */
      __IOM uint32 DBG_TIM3_STOP : 1;         /*!< [1..1] DBG_TIM3 _STOP                                                     */
      __IOM uint32 DBG_TIM4_STOP : 1;         /*!< [2..2] DBG_TIM4_STOP                                                      */
      __IOM uint32 DBG_TIM5_STOP : 1;         /*!< [3..3] DBG_TIM5_STOP                                                      */
      __IOM uint32 DBG_TIM6_STOP : 1;         /*!< [4..4] DBG_TIM6_STOP                                                      */
      __IOM uint32 DBG_TIM7_STOP : 1;         /*!< [5..5] DBG_TIM7_STOP                                                      */
      __IOM uint32 DBG_TIM12_STOP : 1;        /*!< [6..6] DBG_TIM12_STOP                                                     */
      __IOM uint32 DBG_TIM13_STOP : 1;        /*!< [7..7] DBG_TIM13_STOP                                                     */
      __IOM uint32 DBG_TIM14_STOP : 1;        /*!< [8..8] DBG_TIM14_STOP                                                     */
            uint32            : 2;
      __IOM uint32 DBG_WWDG_STOP : 1;         /*!< [11..11] DBG_WWDG_STOP                                                    */
      __IOM uint32 DBG_IWDEG_STOP : 1;        /*!< [12..12] DBG_IWDEG_STOP                                                   */
            uint32            : 8;
      __IOM uint32 DBG_J2C1_SMBUS_TIMEOUT : 1;/*!< [21..21] DBG_J2C1_SMBUS_TIMEOUT                                           */
      __IOM uint32 DBG_J2C2_SMBUS_TIMEOUT : 1;/*!< [22..22] DBG_J2C2_SMBUS_TIMEOUT                                           */
      __IOM uint32 DBG_J2C3SMBUS_TIMEOUT : 1; /*!< [23..23] DBG_J2C3SMBUS_TIMEOUT                                            */
            uint32            : 1;
      __IOM uint32 DBG_CAN1_STOP : 1;         /*!< [25..25] DBG_CAN1_STOP                                                    */
      __IOM uint32 DBG_CAN2_STOP : 1;         /*!< [26..26] DBG_CAN2_STOP                                                    */
            uint32            : 5;
    } bit;
  } DBGMCU_APB1_FZ;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Debug MCU APB2 Freeze registe                              */
    
    struct {
      __IOM uint32 DBG_TIM1_STOP : 1;         /*!< [0..0] TIM1 counter stopped when core is halted                           */
      __IOM uint32 DBG_TIM8_STOP : 1;         /*!< [1..1] TIM8 counter stopped when core is halted                           */
            uint32            : 14;
      __IOM uint32 DBG_TIM9_STOP : 1;         /*!< [16..16] TIM9 counter stopped when core is halted                         */
      __IOM uint32 DBG_TIM10_STOP : 1;        /*!< [17..17] TIM10 counter stopped when core is halted                        */
      __IOM uint32 DBG_TIM11_STOP : 1;        /*!< [18..18] TIM11 counter stopped when core is halted                        */
            uint32            : 13;
    } bit;
  } DBGMCU_APB2_FZ;
} DBG_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMA2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA controller (DMA2)
  */

typedef struct {                                /*!< (@ 0x40026400) DMA2 Structure                                             */
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000000) low interrupt status register                              */
    
    struct {
      __IM  uint32 FEIF0      : 1;            /*!< [0..0] Stream x FIFO error interrupt flag (x=3..0)                        */
            uint32            : 1;
      __IM  uint32 DMEIF0     : 1;            /*!< [2..2] Stream x direct mode error interrupt flag (x=3..0)                 */
      __IM  uint32 TEIF0      : 1;            /*!< [3..3] Stream x transfer error interrupt flag (x=3..0)                    */
      __IM  uint32 HTIF0      : 1;            /*!< [4..4] Stream x half transfer interrupt flag (x=3..0)                     */
      __IM  uint32 TCIF0      : 1;            /*!< [5..5] Stream x transfer complete interrupt flag (x = 3..0)               */
      __IM  uint32 FEIF1      : 1;            /*!< [6..6] Stream x FIFO error interrupt flag (x=3..0)                        */
            uint32            : 1;
      __IM  uint32 DMEIF1     : 1;            /*!< [8..8] Stream x direct mode error interrupt flag (x=3..0)                 */
      __IM  uint32 TEIF1      : 1;            /*!< [9..9] Stream x transfer error interrupt flag (x=3..0)                    */
      __IM  uint32 HTIF1      : 1;            /*!< [10..10] Stream x half transfer interrupt flag (x=3..0)                   */
      __IM  uint32 TCIF1      : 1;            /*!< [11..11] Stream x transfer complete interrupt flag (x = 3..0)             */
            uint32            : 4;
      __IM  uint32 FEIF2      : 1;            /*!< [16..16] Stream x FIFO error interrupt flag (x=3..0)                      */
            uint32            : 1;
      __IM  uint32 DMEIF2     : 1;            /*!< [18..18] Stream x direct mode error interrupt flag (x=3..0)               */
      __IM  uint32 TEIF2      : 1;            /*!< [19..19] Stream x transfer error interrupt flag (x=3..0)                  */
      __IM  uint32 HTIF2      : 1;            /*!< [20..20] Stream x half transfer interrupt flag (x=3..0)                   */
      __IM  uint32 TCIF2      : 1;            /*!< [21..21] Stream x transfer complete interrupt flag (x = 3..0)             */
      __IM  uint32 FEIF3      : 1;            /*!< [22..22] Stream x FIFO error interrupt flag (x=3..0)                      */
            uint32            : 1;
      __IM  uint32 DMEIF3     : 1;            /*!< [24..24] Stream x direct mode error interrupt flag (x=3..0)               */
      __IM  uint32 TEIF3      : 1;            /*!< [25..25] Stream x transfer error interrupt flag (x=3..0)                  */
      __IM  uint32 HTIF3      : 1;            /*!< [26..26] Stream x half transfer interrupt flag (x=3..0)                   */
      __IM  uint32 TCIF3      : 1;            /*!< [27..27] Stream x transfer complete interrupt flag (x = 3..0)             */
            uint32            : 4;
    } bit;
  } LISR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000004) high interrupt status register                             */
    
    struct {
      __IM  uint32 FEIF4      : 1;            /*!< [0..0] Stream x FIFO error interrupt flag (x=7..4)                        */
            uint32            : 1;
      __IM  uint32 DMEIF4     : 1;            /*!< [2..2] Stream x direct mode error interrupt flag (x=7..4)                 */
      __IM  uint32 TEIF4      : 1;            /*!< [3..3] Stream x transfer error interrupt flag (x=7..4)                    */
      __IM  uint32 HTIF4      : 1;            /*!< [4..4] Stream x half transfer interrupt flag (x=7..4)                     */
      __IM  uint32 TCIF4      : 1;            /*!< [5..5] Stream x transfer complete interrupt flag (x=7..4)                 */
      __IM  uint32 FEIF5      : 1;            /*!< [6..6] Stream x FIFO error interrupt flag (x=7..4)                        */
            uint32            : 1;
      __IM  uint32 DMEIF5     : 1;            /*!< [8..8] Stream x direct mode error interrupt flag (x=7..4)                 */
      __IM  uint32 TEIF5      : 1;            /*!< [9..9] Stream x transfer error interrupt flag (x=7..4)                    */
      __IM  uint32 HTIF5      : 1;            /*!< [10..10] Stream x half transfer interrupt flag (x=7..4)                   */
      __IM  uint32 TCIF5      : 1;            /*!< [11..11] Stream x transfer complete interrupt flag (x=7..4)               */
            uint32            : 4;
      __IM  uint32 FEIF6      : 1;            /*!< [16..16] Stream x FIFO error interrupt flag (x=7..4)                      */
            uint32            : 1;
      __IM  uint32 DMEIF6     : 1;            /*!< [18..18] Stream x direct mode error interrupt flag (x=7..4)               */
      __IM  uint32 TEIF6      : 1;            /*!< [19..19] Stream x transfer error interrupt flag (x=7..4)                  */
      __IM  uint32 HTIF6      : 1;            /*!< [20..20] Stream x half transfer interrupt flag (x=7..4)                   */
      __IM  uint32 TCIF6      : 1;            /*!< [21..21] Stream x transfer complete interrupt flag (x=7..4)               */
      __IM  uint32 FEIF7      : 1;            /*!< [22..22] Stream x FIFO error interrupt flag (x=7..4)                      */
            uint32            : 1;
      __IM  uint32 DMEIF7     : 1;            /*!< [24..24] Stream x direct mode error interrupt flag (x=7..4)               */
      __IM  uint32 TEIF7      : 1;            /*!< [25..25] Stream x transfer error interrupt flag (x=7..4)                  */
      __IM  uint32 HTIF7      : 1;            /*!< [26..26] Stream x half transfer interrupt flag (x=7..4)                   */
      __IM  uint32 TCIF7      : 1;            /*!< [27..27] Stream x transfer complete interrupt flag (x=7..4)               */
            uint32            : 4;
    } bit;
  } HISR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) low interrupt flag clear register                          */
    
    struct {
      __IOM uint32 CFEIF0     : 1;            /*!< [0..0] Stream x clear FIFO error interrupt flag (x = 3..0)                */
            uint32            : 1;
      __IOM uint32 CDMEIF0    : 1;            /*!< [2..2] Stream x clear direct mode error interrupt flag (x =
                                                     3..0)                                                                     */
      __IOM uint32 CTEIF0     : 1;            /*!< [3..3] Stream x clear transfer error interrupt flag (x = 3..0)            */
      __IOM uint32 CHTIF0     : 1;            /*!< [4..4] Stream x clear half transfer interrupt flag (x = 3..0)             */
      __IOM uint32 CTCIF0     : 1;            /*!< [5..5] Stream x clear transfer complete interrupt flag (x =
                                                     3..0)                                                                     */
      __IOM uint32 CFEIF1     : 1;            /*!< [6..6] Stream x clear FIFO error interrupt flag (x = 3..0)                */
            uint32            : 1;
      __IOM uint32 CDMEIF1    : 1;            /*!< [8..8] Stream x clear direct mode error interrupt flag (x =
                                                     3..0)                                                                     */
      __IOM uint32 CTEIF1     : 1;            /*!< [9..9] Stream x clear transfer error interrupt flag (x = 3..0)            */
      __IOM uint32 CHTIF1     : 1;            /*!< [10..10] Stream x clear half transfer interrupt flag (x = 3..0)           */
      __IOM uint32 CTCIF1     : 1;            /*!< [11..11] Stream x clear transfer complete interrupt flag (x
                                                     = 3..0)                                                                   */
            uint32            : 4;
      __IOM uint32 CFEIF2     : 1;            /*!< [16..16] Stream x clear FIFO error interrupt flag (x = 3..0)              */
            uint32            : 1;
      __IOM uint32 CDMEIF2    : 1;            /*!< [18..18] Stream x clear direct mode error interrupt flag (x
                                                     = 3..0)                                                                   */
      __IOM uint32 CTEIF2     : 1;            /*!< [19..19] Stream x clear transfer error interrupt flag (x = 3..0)          */
      __IOM uint32 CHTIF2     : 1;            /*!< [20..20] Stream x clear half transfer interrupt flag (x = 3..0)           */
      __IOM uint32 CTCIF2     : 1;            /*!< [21..21] Stream x clear transfer complete interrupt flag (x
                                                     = 3..0)                                                                   */
      __IOM uint32 CFEIF3     : 1;            /*!< [22..22] Stream x clear FIFO error interrupt flag (x = 3..0)              */
            uint32            : 1;
      __IOM uint32 CDMEIF3    : 1;            /*!< [24..24] Stream x clear direct mode error interrupt flag (x
                                                     = 3..0)                                                                   */
      __IOM uint32 CTEIF3     : 1;            /*!< [25..25] Stream x clear transfer error interrupt flag (x = 3..0)          */
      __IOM uint32 CHTIF3     : 1;            /*!< [26..26] Stream x clear half transfer interrupt flag (x = 3..0)           */
      __IOM uint32 CTCIF3     : 1;            /*!< [27..27] Stream x clear transfer complete interrupt flag (x
                                                     = 3..0)                                                                   */
            uint32            : 4;
    } bit;
  } LIFCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) high interrupt flag clear register                         */
    
    struct {
      __IOM uint32 CFEIF4     : 1;            /*!< [0..0] Stream x clear FIFO error interrupt flag (x = 7..4)                */
            uint32            : 1;
      __IOM uint32 CDMEIF4    : 1;            /*!< [2..2] Stream x clear direct mode error interrupt flag (x =
                                                     7..4)                                                                     */
      __IOM uint32 CTEIF4     : 1;            /*!< [3..3] Stream x clear transfer error interrupt flag (x = 7..4)            */
      __IOM uint32 CHTIF4     : 1;            /*!< [4..4] Stream x clear half transfer interrupt flag (x = 7..4)             */
      __IOM uint32 CTCIF4     : 1;            /*!< [5..5] Stream x clear transfer complete interrupt flag (x =
                                                     7..4)                                                                     */
      __IOM uint32 CFEIF5     : 1;            /*!< [6..6] Stream x clear FIFO error interrupt flag (x = 7..4)                */
            uint32            : 1;
      __IOM uint32 CDMEIF5    : 1;            /*!< [8..8] Stream x clear direct mode error interrupt flag (x =
                                                     7..4)                                                                     */
      __IOM uint32 CTEIF5     : 1;            /*!< [9..9] Stream x clear transfer error interrupt flag (x = 7..4)            */
      __IOM uint32 CHTIF5     : 1;            /*!< [10..10] Stream x clear half transfer interrupt flag (x = 7..4)           */
      __IOM uint32 CTCIF5     : 1;            /*!< [11..11] Stream x clear transfer complete interrupt flag (x
                                                     = 7..4)                                                                   */
            uint32            : 4;
      __IOM uint32 CFEIF6     : 1;            /*!< [16..16] Stream x clear FIFO error interrupt flag (x = 7..4)              */
            uint32            : 1;
      __IOM uint32 CDMEIF6    : 1;            /*!< [18..18] Stream x clear direct mode error interrupt flag (x
                                                     = 7..4)                                                                   */
      __IOM uint32 CTEIF6     : 1;            /*!< [19..19] Stream x clear transfer error interrupt flag (x = 7..4)          */
      __IOM uint32 CHTIF6     : 1;            /*!< [20..20] Stream x clear half transfer interrupt flag (x = 7..4)           */
      __IOM uint32 CTCIF6     : 1;            /*!< [21..21] Stream x clear transfer complete interrupt flag (x
                                                     = 7..4)                                                                   */
      __IOM uint32 CFEIF7     : 1;            /*!< [22..22] Stream x clear FIFO error interrupt flag (x = 7..4)              */
            uint32            : 1;
      __IOM uint32 CDMEIF7    : 1;            /*!< [24..24] Stream x clear direct mode error interrupt flag (x
                                                     = 7..4)                                                                   */
      __IOM uint32 CTEIF7     : 1;            /*!< [25..25] Stream x clear transfer error interrupt flag (x = 7..4)          */
      __IOM uint32 CHTIF7     : 1;            /*!< [26..26] Stream x clear half transfer interrupt flag (x = 7..4)           */
      __IOM uint32 CTCIF7     : 1;            /*!< [27..27] Stream x clear transfer complete interrupt flag (x
                                                     = 7..4)                                                                   */
            uint32            : 4;
    } bit;
  } HIFCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) stream x configuration register                            */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Stream enable / flag stream ready when read low                    */
      __IOM uint32 DMEIE      : 1;            /*!< [1..1] Direct mode error interrupt enable                                 */
      __IOM uint32 TEIE       : 1;            /*!< [2..2] Transfer error interrupt enable                                    */
      __IOM uint32 HTIE       : 1;            /*!< [3..3] Half transfer interrupt enable                                     */
      __IOM uint32 TCIE       : 1;            /*!< [4..4] Transfer complete interrupt enable                                 */
      __IOM uint32 PFCTRL     : 1;            /*!< [5..5] Peripheral flow controller                                         */
      __IOM uint32 DIR        : 2;            /*!< [7..6] Data transfer direction                                            */
      __IOM uint32 CIRC       : 1;            /*!< [8..8] Circular mode                                                      */
      __IOM uint32 PINC       : 1;            /*!< [9..9] Peripheral increment mode                                          */
      __IOM uint32 MINC       : 1;            /*!< [10..10] Memory increment mode                                            */
      __IOM uint32 PSIZE      : 2;            /*!< [12..11] Peripheral data size                                             */
      __IOM uint32 MSIZE      : 2;            /*!< [14..13] Memory data size                                                 */
      __IOM uint32 PINCOS     : 1;            /*!< [15..15] Peripheral increment offset size                                 */
      __IOM uint32 PL         : 2;            /*!< [17..16] Priority level                                                   */
      __IOM uint32 DBM        : 1;            /*!< [18..18] Double buffer mode                                               */
      __IOM uint32 CT         : 1;            /*!< [19..19] Current target (only in double buffer mode)                      */
            uint32            : 1;
      __IOM uint32 PBURST     : 2;            /*!< [22..21] Peripheral burst transfer configuration                          */
      __IOM uint32 MBURST     : 2;            /*!< [24..23] Memory burst transfer configuration                              */
      __IOM uint32 CHSEL      : 3;            /*!< [27..25] Channel selection                                                */
            uint32            : 4;
    } bit;
  } S0CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) stream x number of data register                           */
    
    struct {
      __IOM uint32 NDT        : 16;           /*!< [15..0] Number of data items to transfer                                  */
            uint32            : 16;
    } bit;
  } S0NDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) stream x peripheral address register                       */
    
    struct {
      __IOM uint32 PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } bit;
  } S0PAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) stream x memory 0 address register                         */
    
    struct {
      __IOM uint32 M0A        : 32;           /*!< [31..0] Memory 0 address                                                  */
    } bit;
  } S0M0AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) stream x memory 1 address register                         */
    
    struct {
      __IOM uint32 M1A        : 32;           /*!< [31..0] Memory 1 address (used in case of Double buffer mode)             */
    } bit;
  } S0M1AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) stream x FIFO control register                             */
    
    struct {
      __IOM uint32 FTH        : 2;            /*!< [1..0] FIFO threshold selection                                           */
      __IOM uint32 DMDIS      : 1;            /*!< [2..2] Direct mode disable                                                */
      __IM  uint32 FS         : 3;            /*!< [5..3] FIFO status                                                        */
            uint32            : 1;
      __IOM uint32 FEIE       : 1;            /*!< [7..7] FIFO error interrupt enable                                        */
            uint32            : 24;
    } bit;
  } S0FCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) stream x configuration register                            */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Stream enable / flag stream ready when read low                    */
      __IOM uint32 DMEIE      : 1;            /*!< [1..1] Direct mode error interrupt enable                                 */
      __IOM uint32 TEIE       : 1;            /*!< [2..2] Transfer error interrupt enable                                    */
      __IOM uint32 HTIE       : 1;            /*!< [3..3] Half transfer interrupt enable                                     */
      __IOM uint32 TCIE       : 1;            /*!< [4..4] Transfer complete interrupt enable                                 */
      __IOM uint32 PFCTRL     : 1;            /*!< [5..5] Peripheral flow controller                                         */
      __IOM uint32 DIR        : 2;            /*!< [7..6] Data transfer direction                                            */
      __IOM uint32 CIRC       : 1;            /*!< [8..8] Circular mode                                                      */
      __IOM uint32 PINC       : 1;            /*!< [9..9] Peripheral increment mode                                          */
      __IOM uint32 MINC       : 1;            /*!< [10..10] Memory increment mode                                            */
      __IOM uint32 PSIZE      : 2;            /*!< [12..11] Peripheral data size                                             */
      __IOM uint32 MSIZE      : 2;            /*!< [14..13] Memory data size                                                 */
      __IOM uint32 PINCOS     : 1;            /*!< [15..15] Peripheral increment offset size                                 */
      __IOM uint32 PL         : 2;            /*!< [17..16] Priority level                                                   */
      __IOM uint32 DBM        : 1;            /*!< [18..18] Double buffer mode                                               */
      __IOM uint32 CT         : 1;            /*!< [19..19] Current target (only in double buffer mode)                      */
      __IOM uint32 ACK        : 1;            /*!< [20..20] ACK                                                              */
      __IOM uint32 PBURST     : 2;            /*!< [22..21] Peripheral burst transfer configuration                          */
      __IOM uint32 MBURST     : 2;            /*!< [24..23] Memory burst transfer configuration                              */
      __IOM uint32 CHSEL      : 3;            /*!< [27..25] Channel selection                                                */
            uint32            : 4;
    } bit;
  } S1CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) stream x number of data register                           */
    
    struct {
      __IOM uint32 NDT        : 16;           /*!< [15..0] Number of data items to transfer                                  */
            uint32            : 16;
    } bit;
  } S1NDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) stream x peripheral address register                       */
    
    struct {
      __IOM uint32 PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } bit;
  } S1PAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) stream x memory 0 address register                         */
    
    struct {
      __IOM uint32 M0A        : 32;           /*!< [31..0] Memory 0 address                                                  */
    } bit;
  } S1M0AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) stream x memory 1 address register                         */
    
    struct {
      __IOM uint32 M1A        : 32;           /*!< [31..0] Memory 1 address (used in case of Double buffer mode)             */
    } bit;
  } S1M1AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) stream x FIFO control register                             */
    
    struct {
      __IOM uint32 FTH        : 2;            /*!< [1..0] FIFO threshold selection                                           */
      __IOM uint32 DMDIS      : 1;            /*!< [2..2] Direct mode disable                                                */
      __IM  uint32 FS         : 3;            /*!< [5..3] FIFO status                                                        */
            uint32            : 1;
      __IOM uint32 FEIE       : 1;            /*!< [7..7] FIFO error interrupt enable                                        */
            uint32            : 24;
    } bit;
  } S1FCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) stream x configuration register                            */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Stream enable / flag stream ready when read low                    */
      __IOM uint32 DMEIE      : 1;            /*!< [1..1] Direct mode error interrupt enable                                 */
      __IOM uint32 TEIE       : 1;            /*!< [2..2] Transfer error interrupt enable                                    */
      __IOM uint32 HTIE       : 1;            /*!< [3..3] Half transfer interrupt enable                                     */
      __IOM uint32 TCIE       : 1;            /*!< [4..4] Transfer complete interrupt enable                                 */
      __IOM uint32 PFCTRL     : 1;            /*!< [5..5] Peripheral flow controller                                         */
      __IOM uint32 DIR        : 2;            /*!< [7..6] Data transfer direction                                            */
      __IOM uint32 CIRC       : 1;            /*!< [8..8] Circular mode                                                      */
      __IOM uint32 PINC       : 1;            /*!< [9..9] Peripheral increment mode                                          */
      __IOM uint32 MINC       : 1;            /*!< [10..10] Memory increment mode                                            */
      __IOM uint32 PSIZE      : 2;            /*!< [12..11] Peripheral data size                                             */
      __IOM uint32 MSIZE      : 2;            /*!< [14..13] Memory data size                                                 */
      __IOM uint32 PINCOS     : 1;            /*!< [15..15] Peripheral increment offset size                                 */
      __IOM uint32 PL         : 2;            /*!< [17..16] Priority level                                                   */
      __IOM uint32 DBM        : 1;            /*!< [18..18] Double buffer mode                                               */
      __IOM uint32 CT         : 1;            /*!< [19..19] Current target (only in double buffer mode)                      */
      __IOM uint32 ACK        : 1;            /*!< [20..20] ACK                                                              */
      __IOM uint32 PBURST     : 2;            /*!< [22..21] Peripheral burst transfer configuration                          */
      __IOM uint32 MBURST     : 2;            /*!< [24..23] Memory burst transfer configuration                              */
      __IOM uint32 CHSEL      : 3;            /*!< [27..25] Channel selection                                                */
            uint32            : 4;
    } bit;
  } S2CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000044) stream x number of data register                           */
    
    struct {
      __IOM uint32 NDT        : 16;           /*!< [15..0] Number of data items to transfer                                  */
            uint32            : 16;
    } bit;
  } S2NDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) stream x peripheral address register                       */
    
    struct {
      __IOM uint32 PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } bit;
  } S2PAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) stream x memory 0 address register                         */
    
    struct {
      __IOM uint32 M0A        : 32;           /*!< [31..0] Memory 0 address                                                  */
    } bit;
  } S2M0AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000050) stream x memory 1 address register                         */
    
    struct {
      __IOM uint32 M1A        : 32;           /*!< [31..0] Memory 1 address (used in case of Double buffer mode)             */
    } bit;
  } S2M1AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000054) stream x FIFO control register                             */
    
    struct {
      __IOM uint32 FTH        : 2;            /*!< [1..0] FIFO threshold selection                                           */
      __IOM uint32 DMDIS      : 1;            /*!< [2..2] Direct mode disable                                                */
      __IM  uint32 FS         : 3;            /*!< [5..3] FIFO status                                                        */
            uint32            : 1;
      __IOM uint32 FEIE       : 1;            /*!< [7..7] FIFO error interrupt enable                                        */
            uint32            : 24;
    } bit;
  } S2FCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000058) stream x configuration register                            */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Stream enable / flag stream ready when read low                    */
      __IOM uint32 DMEIE      : 1;            /*!< [1..1] Direct mode error interrupt enable                                 */
      __IOM uint32 TEIE       : 1;            /*!< [2..2] Transfer error interrupt enable                                    */
      __IOM uint32 HTIE       : 1;            /*!< [3..3] Half transfer interrupt enable                                     */
      __IOM uint32 TCIE       : 1;            /*!< [4..4] Transfer complete interrupt enable                                 */
      __IOM uint32 PFCTRL     : 1;            /*!< [5..5] Peripheral flow controller                                         */
      __IOM uint32 DIR        : 2;            /*!< [7..6] Data transfer direction                                            */
      __IOM uint32 CIRC       : 1;            /*!< [8..8] Circular mode                                                      */
      __IOM uint32 PINC       : 1;            /*!< [9..9] Peripheral increment mode                                          */
      __IOM uint32 MINC       : 1;            /*!< [10..10] Memory increment mode                                            */
      __IOM uint32 PSIZE      : 2;            /*!< [12..11] Peripheral data size                                             */
      __IOM uint32 MSIZE      : 2;            /*!< [14..13] Memory data size                                                 */
      __IOM uint32 PINCOS     : 1;            /*!< [15..15] Peripheral increment offset size                                 */
      __IOM uint32 PL         : 2;            /*!< [17..16] Priority level                                                   */
      __IOM uint32 DBM        : 1;            /*!< [18..18] Double buffer mode                                               */
      __IOM uint32 CT         : 1;            /*!< [19..19] Current target (only in double buffer mode)                      */
      __IOM uint32 ACK        : 1;            /*!< [20..20] ACK                                                              */
      __IOM uint32 PBURST     : 2;            /*!< [22..21] Peripheral burst transfer configuration                          */
      __IOM uint32 MBURST     : 2;            /*!< [24..23] Memory burst transfer configuration                              */
      __IOM uint32 CHSEL      : 3;            /*!< [27..25] Channel selection                                                */
            uint32            : 4;
    } bit;
  } S3CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000005C) stream x number of data register                           */
    
    struct {
      __IOM uint32 NDT        : 16;           /*!< [15..0] Number of data items to transfer                                  */
            uint32            : 16;
    } bit;
  } S3NDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000060) stream x peripheral address register                       */
    
    struct {
      __IOM uint32 PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } bit;
  } S3PAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000064) stream x memory 0 address register                         */
    
    struct {
      __IOM uint32 M0A        : 32;           /*!< [31..0] Memory 0 address                                                  */
    } bit;
  } S3M0AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000068) stream x memory 1 address register                         */
    
    struct {
      __IOM uint32 M1A        : 32;           /*!< [31..0] Memory 1 address (used in case of Double buffer mode)             */
    } bit;
  } S3M1AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000006C) stream x FIFO control register                             */
    
    struct {
      __IOM uint32 FTH        : 2;            /*!< [1..0] FIFO threshold selection                                           */
      __IOM uint32 DMDIS      : 1;            /*!< [2..2] Direct mode disable                                                */
      __IM  uint32 FS         : 3;            /*!< [5..3] FIFO status                                                        */
            uint32            : 1;
      __IOM uint32 FEIE       : 1;            /*!< [7..7] FIFO error interrupt enable                                        */
            uint32            : 24;
    } bit;
  } S3FCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000070) stream x configuration register                            */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Stream enable / flag stream ready when read low                    */
      __IOM uint32 DMEIE      : 1;            /*!< [1..1] Direct mode error interrupt enable                                 */
      __IOM uint32 TEIE       : 1;            /*!< [2..2] Transfer error interrupt enable                                    */
      __IOM uint32 HTIE       : 1;            /*!< [3..3] Half transfer interrupt enable                                     */
      __IOM uint32 TCIE       : 1;            /*!< [4..4] Transfer complete interrupt enable                                 */
      __IOM uint32 PFCTRL     : 1;            /*!< [5..5] Peripheral flow controller                                         */
      __IOM uint32 DIR        : 2;            /*!< [7..6] Data transfer direction                                            */
      __IOM uint32 CIRC       : 1;            /*!< [8..8] Circular mode                                                      */
      __IOM uint32 PINC       : 1;            /*!< [9..9] Peripheral increment mode                                          */
      __IOM uint32 MINC       : 1;            /*!< [10..10] Memory increment mode                                            */
      __IOM uint32 PSIZE      : 2;            /*!< [12..11] Peripheral data size                                             */
      __IOM uint32 MSIZE      : 2;            /*!< [14..13] Memory data size                                                 */
      __IOM uint32 PINCOS     : 1;            /*!< [15..15] Peripheral increment offset size                                 */
      __IOM uint32 PL         : 2;            /*!< [17..16] Priority level                                                   */
      __IOM uint32 DBM        : 1;            /*!< [18..18] Double buffer mode                                               */
      __IOM uint32 CT         : 1;            /*!< [19..19] Current target (only in double buffer mode)                      */
      __IOM uint32 ACK        : 1;            /*!< [20..20] ACK                                                              */
      __IOM uint32 PBURST     : 2;            /*!< [22..21] Peripheral burst transfer configuration                          */
      __IOM uint32 MBURST     : 2;            /*!< [24..23] Memory burst transfer configuration                              */
      __IOM uint32 CHSEL      : 3;            /*!< [27..25] Channel selection                                                */
            uint32            : 4;
    } bit;
  } S4CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000074) stream x number of data register                           */
    
    struct {
      __IOM uint32 NDT        : 16;           /*!< [15..0] Number of data items to transfer                                  */
            uint32            : 16;
    } bit;
  } S4NDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000078) stream x peripheral address register                       */
    
    struct {
      __IOM uint32 PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } bit;
  } S4PAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000007C) stream x memory 0 address register                         */
    
    struct {
      __IOM uint32 M0A        : 32;           /*!< [31..0] Memory 0 address                                                  */
    } bit;
  } S4M0AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000080) stream x memory 1 address register                         */
    
    struct {
      __IOM uint32 M1A        : 32;           /*!< [31..0] Memory 1 address (used in case of Double buffer mode)             */
    } bit;
  } S4M1AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000084) stream x FIFO control register                             */
    
    struct {
      __IOM uint32 FTH        : 2;            /*!< [1..0] FIFO threshold selection                                           */
      __IOM uint32 DMDIS      : 1;            /*!< [2..2] Direct mode disable                                                */
      __IM  uint32 FS         : 3;            /*!< [5..3] FIFO status                                                        */
            uint32            : 1;
      __IOM uint32 FEIE       : 1;            /*!< [7..7] FIFO error interrupt enable                                        */
            uint32            : 24;
    } bit;
  } S4FCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000088) stream x configuration register                            */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Stream enable / flag stream ready when read low                    */
      __IOM uint32 DMEIE      : 1;            /*!< [1..1] Direct mode error interrupt enable                                 */
      __IOM uint32 TEIE       : 1;            /*!< [2..2] Transfer error interrupt enable                                    */
      __IOM uint32 HTIE       : 1;            /*!< [3..3] Half transfer interrupt enable                                     */
      __IOM uint32 TCIE       : 1;            /*!< [4..4] Transfer complete interrupt enable                                 */
      __IOM uint32 PFCTRL     : 1;            /*!< [5..5] Peripheral flow controller                                         */
      __IOM uint32 DIR        : 2;            /*!< [7..6] Data transfer direction                                            */
      __IOM uint32 CIRC       : 1;            /*!< [8..8] Circular mode                                                      */
      __IOM uint32 PINC       : 1;            /*!< [9..9] Peripheral increment mode                                          */
      __IOM uint32 MINC       : 1;            /*!< [10..10] Memory increment mode                                            */
      __IOM uint32 PSIZE      : 2;            /*!< [12..11] Peripheral data size                                             */
      __IOM uint32 MSIZE      : 2;            /*!< [14..13] Memory data size                                                 */
      __IOM uint32 PINCOS     : 1;            /*!< [15..15] Peripheral increment offset size                                 */
      __IOM uint32 PL         : 2;            /*!< [17..16] Priority level                                                   */
      __IOM uint32 DBM        : 1;            /*!< [18..18] Double buffer mode                                               */
      __IOM uint32 CT         : 1;            /*!< [19..19] Current target (only in double buffer mode)                      */
      __IOM uint32 ACK        : 1;            /*!< [20..20] ACK                                                              */
      __IOM uint32 PBURST     : 2;            /*!< [22..21] Peripheral burst transfer configuration                          */
      __IOM uint32 MBURST     : 2;            /*!< [24..23] Memory burst transfer configuration                              */
      __IOM uint32 CHSEL      : 3;            /*!< [27..25] Channel selection                                                */
            uint32            : 4;
    } bit;
  } S5CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000008C) stream x number of data register                           */
    
    struct {
      __IOM uint32 NDT        : 16;           /*!< [15..0] Number of data items to transfer                                  */
            uint32            : 16;
    } bit;
  } S5NDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000090) stream x peripheral address register                       */
    
    struct {
      __IOM uint32 PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } bit;
  } S5PAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000094) stream x memory 0 address register                         */
    
    struct {
      __IOM uint32 M0A        : 32;           /*!< [31..0] Memory 0 address                                                  */
    } bit;
  } S5M0AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000098) stream x memory 1 address register                         */
    
    struct {
      __IOM uint32 M1A        : 32;           /*!< [31..0] Memory 1 address (used in case of Double buffer mode)             */
    } bit;
  } S5M1AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000009C) stream x FIFO control register                             */
    
    struct {
      __IOM uint32 FTH        : 2;            /*!< [1..0] FIFO threshold selection                                           */
      __IOM uint32 DMDIS      : 1;            /*!< [2..2] Direct mode disable                                                */
      __IM  uint32 FS         : 3;            /*!< [5..3] FIFO status                                                        */
            uint32            : 1;
      __IOM uint32 FEIE       : 1;            /*!< [7..7] FIFO error interrupt enable                                        */
            uint32            : 24;
    } bit;
  } S5FCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000A0) stream x configuration register                            */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Stream enable / flag stream ready when read low                    */
      __IOM uint32 DMEIE      : 1;            /*!< [1..1] Direct mode error interrupt enable                                 */
      __IOM uint32 TEIE       : 1;            /*!< [2..2] Transfer error interrupt enable                                    */
      __IOM uint32 HTIE       : 1;            /*!< [3..3] Half transfer interrupt enable                                     */
      __IOM uint32 TCIE       : 1;            /*!< [4..4] Transfer complete interrupt enable                                 */
      __IOM uint32 PFCTRL     : 1;            /*!< [5..5] Peripheral flow controller                                         */
      __IOM uint32 DIR        : 2;            /*!< [7..6] Data transfer direction                                            */
      __IOM uint32 CIRC       : 1;            /*!< [8..8] Circular mode                                                      */
      __IOM uint32 PINC       : 1;            /*!< [9..9] Peripheral increment mode                                          */
      __IOM uint32 MINC       : 1;            /*!< [10..10] Memory increment mode                                            */
      __IOM uint32 PSIZE      : 2;            /*!< [12..11] Peripheral data size                                             */
      __IOM uint32 MSIZE      : 2;            /*!< [14..13] Memory data size                                                 */
      __IOM uint32 PINCOS     : 1;            /*!< [15..15] Peripheral increment offset size                                 */
      __IOM uint32 PL         : 2;            /*!< [17..16] Priority level                                                   */
      __IOM uint32 DBM        : 1;            /*!< [18..18] Double buffer mode                                               */
      __IOM uint32 CT         : 1;            /*!< [19..19] Current target (only in double buffer mode)                      */
      __IOM uint32 ACK        : 1;            /*!< [20..20] ACK                                                              */
      __IOM uint32 PBURST     : 2;            /*!< [22..21] Peripheral burst transfer configuration                          */
      __IOM uint32 MBURST     : 2;            /*!< [24..23] Memory burst transfer configuration                              */
      __IOM uint32 CHSEL      : 3;            /*!< [27..25] Channel selection                                                */
            uint32            : 4;
    } bit;
  } S6CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000A4) stream x number of data register                           */
    
    struct {
      __IOM uint32 NDT        : 16;           /*!< [15..0] Number of data items to transfer                                  */
            uint32            : 16;
    } bit;
  } S6NDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000A8) stream x peripheral address register                       */
    
    struct {
      __IOM uint32 PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } bit;
  } S6PAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000AC) stream x memory 0 address register                         */
    
    struct {
      __IOM uint32 M0A        : 32;           /*!< [31..0] Memory 0 address                                                  */
    } bit;
  } S6M0AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000B0) stream x memory 1 address register                         */
    
    struct {
      __IOM uint32 M1A        : 32;           /*!< [31..0] Memory 1 address (used in case of Double buffer mode)             */
    } bit;
  } S6M1AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000B4) stream x FIFO control register                             */
    
    struct {
      __IOM uint32 FTH        : 2;            /*!< [1..0] FIFO threshold selection                                           */
      __IOM uint32 DMDIS      : 1;            /*!< [2..2] Direct mode disable                                                */
      __IM  uint32 FS         : 3;            /*!< [5..3] FIFO status                                                        */
            uint32            : 1;
      __IOM uint32 FEIE       : 1;            /*!< [7..7] FIFO error interrupt enable                                        */
            uint32            : 24;
    } bit;
  } S6FCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000B8) stream x configuration register                            */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Stream enable / flag stream ready when read low                    */
      __IOM uint32 DMEIE      : 1;            /*!< [1..1] Direct mode error interrupt enable                                 */
      __IOM uint32 TEIE       : 1;            /*!< [2..2] Transfer error interrupt enable                                    */
      __IOM uint32 HTIE       : 1;            /*!< [3..3] Half transfer interrupt enable                                     */
      __IOM uint32 TCIE       : 1;            /*!< [4..4] Transfer complete interrupt enable                                 */
      __IOM uint32 PFCTRL     : 1;            /*!< [5..5] Peripheral flow controller                                         */
      __IOM uint32 DIR        : 2;            /*!< [7..6] Data transfer direction                                            */
      __IOM uint32 CIRC       : 1;            /*!< [8..8] Circular mode                                                      */
      __IOM uint32 PINC       : 1;            /*!< [9..9] Peripheral increment mode                                          */
      __IOM uint32 MINC       : 1;            /*!< [10..10] Memory increment mode                                            */
      __IOM uint32 PSIZE      : 2;            /*!< [12..11] Peripheral data size                                             */
      __IOM uint32 MSIZE      : 2;            /*!< [14..13] Memory data size                                                 */
      __IOM uint32 PINCOS     : 1;            /*!< [15..15] Peripheral increment offset size                                 */
      __IOM uint32 PL         : 2;            /*!< [17..16] Priority level                                                   */
      __IOM uint32 DBM        : 1;            /*!< [18..18] Double buffer mode                                               */
      __IOM uint32 CT         : 1;            /*!< [19..19] Current target (only in double buffer mode)                      */
      __IOM uint32 ACK        : 1;            /*!< [20..20] ACK                                                              */
      __IOM uint32 PBURST     : 2;            /*!< [22..21] Peripheral burst transfer configuration                          */
      __IOM uint32 MBURST     : 2;            /*!< [24..23] Memory burst transfer configuration                              */
      __IOM uint32 CHSEL      : 3;            /*!< [27..25] Channel selection                                                */
            uint32            : 4;
    } bit;
  } S7CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000BC) stream x number of data register                           */
    
    struct {
      __IOM uint32 NDT        : 16;           /*!< [15..0] Number of data items to transfer                                  */
            uint32            : 16;
    } bit;
  } S7NDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000C0) stream x peripheral address register                       */
    
    struct {
      __IOM uint32 PA         : 32;           /*!< [31..0] Peripheral address                                                */
    } bit;
  } S7PAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000C4) stream x memory 0 address register                         */
    
    struct {
      __IOM uint32 M0A        : 32;           /*!< [31..0] Memory 0 address                                                  */
    } bit;
  } S7M0AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000C8) stream x memory 1 address register                         */
    
    struct {
      __IOM uint32 M1A        : 32;           /*!< [31..0] Memory 1 address (used in case of Double buffer mode)             */
    } bit;
  } S7M1AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000CC) stream x FIFO control register                             */
    
    struct {
      __IOM uint32 FTH        : 2;            /*!< [1..0] FIFO threshold selection                                           */
      __IOM uint32 DMDIS      : 1;            /*!< [2..2] Direct mode disable                                                */
      __IM  uint32 FS         : 3;            /*!< [5..3] FIFO status                                                        */
            uint32            : 1;
      __IOM uint32 FEIE       : 1;            /*!< [7..7] FIFO error interrupt enable                                        */
            uint32            : 24;
    } bit;
  } S7FCR;
} DMA2_Type;                                    /*!< Size = 208 (0xd0)                                                         */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock control (RCC)
  */

typedef struct {                                /*!< (@ 0x40023800) RCC Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) clock control register                                     */
    
    struct {
      __IOM uint32 HSION      : 1;            /*!< [0..0] Internal high-speed clock enable                                   */
      __IM  uint32 HSIRDY     : 1;            /*!< [1..1] Internal high-speed clock ready flag                               */
            uint32            : 1;
      __IOM uint32 HSITRIM    : 5;            /*!< [7..3] Internal high-speed clock trimming                                 */
      __IM  uint32 HSICAL     : 8;            /*!< [15..8] Internal high-speed clock calibration                             */
      __IOM uint32 HSEON      : 1;            /*!< [16..16] HSE clock enable                                                 */
      __IM  uint32 HSERDY     : 1;            /*!< [17..17] HSE clock ready flag                                             */
      __IOM uint32 HSEBYP     : 1;            /*!< [18..18] HSE clock bypass                                                 */
      __IOM uint32 CSSON      : 1;            /*!< [19..19] Clock security system enable                                     */
            uint32            : 4;
      __IOM uint32 PLLON      : 1;            /*!< [24..24] Main PLL (PLL) enable                                            */
      __IM  uint32 PLLRDY     : 1;            /*!< [25..25] Main PLL (PLL) clock ready flag                                  */
      __IOM uint32 PLLI2SON   : 1;            /*!< [26..26] PLLI2S enable                                                    */
      __IM  uint32 PLLI2SRDY  : 1;            /*!< [27..27] PLLI2S clock ready flag                                          */
            uint32            : 4;
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) PLL configuration register                                 */
    
    struct {
      __IOM uint32 PLLM       : 6;            /*!< [5..0] Division factor for the main PLL (PLL) and audio PLL                */
      __IOM uint32 PLLN       : 9;            /*!< [14..6] Main PLL (PLL) multiplication factor for VCO                       */
            uint32            : 1;
      __IOM uint32 PLLP       : 2;            /*!< [17..16] Main PLL (PLL) division factor for main system clock             */
            uint32            : 4;
      __IOM uint32 PLLSRC     : 1;            /*!< [22..22] Main PLL(PLL) and audio PLL (PLLI2S) entry clock source          */
            uint32            : 1;
      __IOM uint32 PLLQ       : 4;            /*!< [27..24] Main PLL (PLL) division factor for USB OTG FS, SDIO              */
            uint32            : 4;
    } bit;
  } PLLCFGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) clock configuration register                               */
    
    struct {
      __IOM uint32 SW         : 2;            /*!< [1..0] System clock switch                                                */
      __IM  uint32 SWS        : 2;            /*!< [3..2] System clock switch status                                         */
      __IOM uint32 HPRE       : 4;            /*!< [7..4] AHB prescaler                                                      */
            uint32            : 2;
      __IOM uint32 PPRE1      : 3;            /*!< [12..10] APB Low speed prescaler (APB1)                                   */
      __IOM uint32 PPRE2      : 3;            /*!< [15..13] APB high-speed prescaler (APB2)                                  */
      __IOM uint32 RTCPRE     : 5;            /*!< [20..16] HSE division factor for RTC clock                                */
      __IOM uint32 MCO1       : 2;            /*!< [22..21] Microcontroller clock output 1                                   */
      __IOM uint32 I2SSRC     : 1;            /*!< [23..23] I2S clock selection                                              */
      __IOM uint32 MCO1PRE    : 3;            /*!< [26..24] MCO1 prescaler                                                   */
      __IOM uint32 MCO2PRE    : 3;            /*!< [29..27] MCO2 prescaler                                                   */
      __IOM uint32 MCO2       : 2;            /*!< [31..30] Microcontroller clock output 2                                   */
    } bit;
  } CFGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) clock interrupt register                                   */
    
    struct {
      __IM  uint32 LSIRDYF    : 1;            /*!< [0..0] LSI ready interrupt flag                                           */
      __IM  uint32 LSERDYF    : 1;            /*!< [1..1] LSE ready interrupt flag                                           */
      __IM  uint32 HSIRDYF    : 1;            /*!< [2..2] HSI ready interrupt flag                                           */
      __IM  uint32 HSERDYF    : 1;            /*!< [3..3] HSE ready interrupt flag                                           */
      __IM  uint32 PLLRDYF    : 1;            /*!< [4..4] Main PLL (PLL) ready interrupt flag                                */
      __IM  uint32 PLLI2SRDYF : 1;            /*!< [5..5] PLLI2S ready interrupt flag                                        */
      __IM  uint32 PLLSAIRDYF : 1;            /*!< [6..6] PLLSAI ready interrupt flag                                        */
      __IM  uint32 CSSF       : 1;            /*!< [7..7] Clock security system interrupt flag                               */
      __IOM uint32 LSIRDYIE   : 1;            /*!< [8..8] LSI ready interrupt enable                                         */
      __IOM uint32 LSERDYIE   : 1;            /*!< [9..9] LSE ready interrupt enable                                         */
      __IOM uint32 HSIRDYIE   : 1;            /*!< [10..10] HSI ready interrupt enable                                       */
      __IOM uint32 HSERDYIE   : 1;            /*!< [11..11] HSE ready interrupt enable                                       */
      __IOM uint32 PLLRDYIE   : 1;            /*!< [12..12] Main PLL (PLL) ready interrupt enable                            */
      __IOM uint32 PLLI2SRDYIE : 1;           /*!< [13..13] PLLI2S ready interrupt enable                                    */
      __IOM uint32 PLLSAIRDYIE : 1;           /*!< [14..14] PLLSAI Ready Interrupt Enable                                    */
            uint32            : 1;
      __OM  uint32 LSIRDYC    : 1;            /*!< [16..16] LSI ready interrupt clear                                        */
      __OM  uint32 LSERDYC    : 1;            /*!< [17..17] LSE ready interrupt clear                                        */
      __OM  uint32 HSIRDYC    : 1;            /*!< [18..18] HSI ready interrupt clear                                        */
      __OM  uint32 HSERDYC    : 1;            /*!< [19..19] HSE ready interrupt clear                                        */
      __OM  uint32 PLLRDYC    : 1;            /*!< [20..20] Main PLL(PLL) ready interrupt clear                              */
      __OM  uint32 PLLI2SRDYC : 1;            /*!< [21..21] PLLI2S ready interrupt clear                                     */
      __OM  uint32 PLLSAIRDYC : 1;            /*!< [22..22] PLLSAI Ready Interrupt Clear                                     */
      __OM  uint32 CSSC       : 1;            /*!< [23..23] Clock security system interrupt clear                            */
            uint32            : 8;
    } bit;
  } CIR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) AHB1 peripheral reset register                             */
    
    struct {
      __IOM uint32 GPIOARST   : 1;            /*!< [0..0] IO port A reset                                                    */
      __IOM uint32 GPIOBRST   : 1;            /*!< [1..1] IO port B reset                                                    */
      __IOM uint32 GPIOCRST   : 1;            /*!< [2..2] IO port C reset                                                    */
      __IOM uint32 GPIODRST   : 1;            /*!< [3..3] IO port D reset                                                    */
      __IOM uint32 GPIOERST   : 1;            /*!< [4..4] IO port E reset                                                    */
      __IOM uint32 GPIOFRST   : 1;            /*!< [5..5] IO port F reset                                                    */
      __IOM uint32 GPIOGRST   : 1;            /*!< [6..6] IO port G reset                                                    */
      __IOM uint32 GPIOHRST   : 1;            /*!< [7..7] IO port H reset                                                    */
      __IOM uint32 GPIOIRST   : 1;            /*!< [8..8] IO port I reset                                                    */
      __IOM uint32 GPIOJRST   : 1;            /*!< [9..9] IO port J reset                                                    */
      __IOM uint32 GPIOKRST   : 1;            /*!< [10..10] IO port K reset                                                  */
            uint32            : 1;
      __IOM uint32 CRCRST     : 1;            /*!< [12..12] CRC reset                                                        */
            uint32            : 8;
      __IOM uint32 DMA1RST    : 1;            /*!< [21..21] DMA2 reset                                                       */
      __IOM uint32 DMA2RST    : 1;            /*!< [22..22] DMA2 reset                                                       */
      __IOM uint32 DMA2DRST   : 1;            /*!< [23..23] DMA2D reset                                                      */
            uint32            : 1;
      __IOM uint32 ETHMACRST  : 1;            /*!< [25..25] Ethernet MAC reset                                               */
            uint32            : 3;
      __IOM uint32 OTGHSRST   : 1;            /*!< [29..29] USB OTG HS module reset                                          */
            uint32            : 2;
    } bit;
  } AHB1RSTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) AHB2 peripheral reset register                             */
    
    struct {
      __IOM uint32 DCMIRST    : 1;            /*!< [0..0] Camera interface reset                                             */
            uint32            : 3;
      __IOM uint32 CRYPRST    : 1;            /*!< [4..4] Cryptographic module reset                                         */
      __IOM uint32 HSAHRST    : 1;            /*!< [5..5] Hash module reset                                                  */
      __IOM uint32 RNGRST     : 1;            /*!< [6..6] Random number generator module reset                               */
      __IOM uint32 OTGFSRST   : 1;            /*!< [7..7] USB OTG FS module reset                                            */
            uint32            : 24;
    } bit;
  } AHB2RSTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) AHB3 peripheral reset register                             */
    
    struct {
      __IOM uint32 FMCRST     : 1;            /*!< [0..0] Flexible memory controller module reset                            */
      __IOM uint32 QSPIRST    : 1;            /*!< [1..1] Quad SPI memory controller reset                                   */
            uint32            : 30;
    } bit;
  } AHB3RSTR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) APB1 peripheral reset register                             */
    
    struct {
      __IOM uint32 TIM2RST    : 1;            /*!< [0..0] TIM2 reset                                                         */
      __IOM uint32 TIM3RST    : 1;            /*!< [1..1] TIM3 reset                                                         */
      __IOM uint32 TIM4RST    : 1;            /*!< [2..2] TIM4 reset                                                         */
      __IOM uint32 TIM5RST    : 1;            /*!< [3..3] TIM5 reset                                                         */
      __IOM uint32 TIM6RST    : 1;            /*!< [4..4] TIM6 reset                                                         */
      __IOM uint32 TIM7RST    : 1;            /*!< [5..5] TIM7 reset                                                         */
      __IOM uint32 TIM12RST   : 1;            /*!< [6..6] TIM12 reset                                                        */
      __IOM uint32 TIM13RST   : 1;            /*!< [7..7] TIM13 reset                                                        */
      __IOM uint32 TIM14RST   : 1;            /*!< [8..8] TIM14 reset                                                        */
      __IOM uint32 LPTIM1RST  : 1;            /*!< [9..9] Low power timer 1 reset                                            */
            uint32            : 1;
      __IOM uint32 WWDGRST    : 1;            /*!< [11..11] Window watchdog reset                                            */
            uint32            : 2;
      __IOM uint32 SPI2RST    : 1;            /*!< [14..14] SPI 2 reset                                                      */
      __IOM uint32 SPI3RST    : 1;            /*!< [15..15] SPI 3 reset                                                      */
      __IOM uint32 SPDIFRXRST : 1;            /*!< [16..16] SPDIF-RX reset                                                   */
      __IOM uint32 UART2RST   : 1;            /*!< [17..17] USART 2 reset                                                    */
      __IOM uint32 UART3RST   : 1;            /*!< [18..18] USART 3 reset                                                    */
      __IOM uint32 UART4RST   : 1;            /*!< [19..19] USART 4 reset                                                    */
      __IOM uint32 UART5RST   : 1;            /*!< [20..20] USART 5 reset                                                    */
      __IOM uint32 I2C1RST    : 1;            /*!< [21..21] I2C 1 reset                                                      */
      __IOM uint32 I2C2RST    : 1;            /*!< [22..22] I2C 2 reset                                                      */
      __IOM uint32 I2C3RST    : 1;            /*!< [23..23] I2C3 reset                                                       */
      __IOM uint32 I2C4RST    : 1;            /*!< [24..24] I2C 4 reset                                                      */
      __IOM uint32 CAN1RST    : 1;            /*!< [25..25] CAN1 reset                                                       */
      __IOM uint32 CAN2RST    : 1;            /*!< [26..26] CAN2 reset                                                       */
      __IOM uint32 CECRST     : 1;            /*!< [27..27] HDMI-CEC reset                                                   */
      __IOM uint32 PWRRST     : 1;            /*!< [28..28] Power interface reset                                            */
      __IOM uint32 DACRST     : 1;            /*!< [29..29] DAC reset                                                        */
      __IOM uint32 UART7RST   : 1;            /*!< [30..30] UART7 reset                                                      */
      __IOM uint32 UART8RST   : 1;            /*!< [31..31] UART8 reset                                                      */
    } bit;
  } APB1RSTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) APB2 peripheral reset register                             */
    
    struct {
      __IOM uint32 TIM1RST    : 1;            /*!< [0..0] TIM1 reset                                                         */
      __IOM uint32 TIM8RST    : 1;            /*!< [1..1] TIM8 reset                                                         */
            uint32            : 2;
      __IOM uint32 USART1RST  : 1;            /*!< [4..4] USART1 reset                                                       */
      __IOM uint32 USART6RST  : 1;            /*!< [5..5] USART6 reset                                                       */
            uint32            : 2;
      __IOM uint32 ADCRST     : 1;            /*!< [8..8] ADC interface reset (common to all ADCs)                           */
            uint32            : 2;
      __IOM uint32 SDMMC1RST  : 1;            /*!< [11..11] SDMMC1 reset                                                     */
      __IOM uint32 SPI1RST    : 1;            /*!< [12..12] SPI 1 reset                                                      */
      __IOM uint32 SPI4RST    : 1;            /*!< [13..13] SPI4 reset                                                       */
      __IOM uint32 SYSCFGRST  : 1;            /*!< [14..14] System configuration controller reset                            */
            uint32            : 1;
      __IOM uint32 TIM9RST    : 1;            /*!< [16..16] TIM9 reset                                                       */
      __IOM uint32 TIM10RST   : 1;            /*!< [17..17] TIM10 reset                                                      */
      __IOM uint32 TIM11RST   : 1;            /*!< [18..18] TIM11 reset                                                      */
            uint32            : 1;
      __IOM uint32 SPI5RST    : 1;            /*!< [20..20] SPI5 reset                                                       */
      __IOM uint32 SPI6RST    : 1;            /*!< [21..21] SPI6 reset                                                       */
      __IOM uint32 SAI1RST    : 1;            /*!< [22..22] SAI1 reset                                                       */
      __IOM uint32 SAI2RST    : 1;            /*!< [23..23] SAI2 reset                                                       */
            uint32            : 2;
      __IOM uint32 LTDCRST    : 1;            /*!< [26..26] LTDC reset                                                       */
            uint32            : 5;
    } bit;
  } APB2RSTR;
  __IM  uint32  RESERVED1[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) AHB1 peripheral clock register                             */
    
    struct {
      __IOM uint32 GPIOAEN    : 1;            /*!< [0..0] IO port A clock enable                                             */
      __IOM uint32 GPIOBEN    : 1;            /*!< [1..1] IO port B clock enable                                             */
      __IOM uint32 GPIOCEN    : 1;            /*!< [2..2] IO port C clock enable                                             */
      __IOM uint32 GPIODEN    : 1;            /*!< [3..3] IO port D clock enable                                             */
      __IOM uint32 GPIOEEN    : 1;            /*!< [4..4] IO port E clock enable                                             */
      __IOM uint32 GPIOFEN    : 1;            /*!< [5..5] IO port F clock enable                                             */
      __IOM uint32 GPIOGEN    : 1;            /*!< [6..6] IO port G clock enable                                             */
      __IOM uint32 GPIOHEN    : 1;            /*!< [7..7] IO port H clock enable                                             */
      __IOM uint32 GPIOIEN    : 1;            /*!< [8..8] IO port I clock enable                                             */
      __IOM uint32 GPIOJEN    : 1;            /*!< [9..9] IO port J clock enable                                             */
      __IOM uint32 GPIOKEN    : 1;            /*!< [10..10] IO port K clock enable                                           */
            uint32            : 1;
      __IOM uint32 CRCEN      : 1;            /*!< [12..12] CRC clock enable                                                 */
            uint32            : 5;
      __IOM uint32 BKPSRAMEN  : 1;            /*!< [18..18] Backup SRAM interface clock enable                               */
            uint32            : 1;
      __IOM uint32 CCMDATARAMEN : 1;          /*!< [20..20] CCM data RAM clock enable                                        */
      __IOM uint32 DMA1EN     : 1;            /*!< [21..21] DMA1 clock enable                                                */
      __IOM uint32 DMA2EN     : 1;            /*!< [22..22] DMA2 clock enable                                                */
      __IOM uint32 DMA2DEN    : 1;            /*!< [23..23] DMA2D clock enable                                               */
            uint32            : 1;
      __IOM uint32 ETHMACEN   : 1;            /*!< [25..25] Ethernet MAC clock enable                                        */
      __IOM uint32 ETHMACTXEN : 1;            /*!< [26..26] Ethernet Transmission clock enable                               */
      __IOM uint32 ETHMACRXEN : 1;            /*!< [27..27] Ethernet Reception clock enable                                  */
      __IOM uint32 ETHMACPTPEN : 1;           /*!< [28..28] Ethernet PTP clock enable                                        */
      __IOM uint32 OTGHSEN    : 1;            /*!< [29..29] USB OTG HS clock enable                                          */
      __IOM uint32 OTGHSULPIEN : 1;           /*!< [30..30] USB OTG HSULPI clock enable                                      */
            uint32            : 1;
    } bit;
  } AHB1ENR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) AHB2 peripheral clock enable register                      */
    
    struct {
      __IOM uint32 DCMIEN     : 1;            /*!< [0..0] Camera interface enable                                            */
            uint32            : 3;
      __IOM uint32 CRYPEN     : 1;            /*!< [4..4] Cryptographic modules clock enable                                 */
      __IOM uint32 HASHEN     : 1;            /*!< [5..5] Hash modules clock enable                                          */
      __IOM uint32 RNGEN      : 1;            /*!< [6..6] Random number generator clock enable                               */
      __IOM uint32 OTGFSEN    : 1;            /*!< [7..7] USB OTG FS clock enable                                            */
            uint32            : 24;
    } bit;
  } AHB2ENR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) AHB3 peripheral clock enable register                      */
    
    struct {
      __IOM uint32 FMCEN      : 1;            /*!< [0..0] Flexible memory controller module clock enable                     */
      __IOM uint32 QSPIEN     : 1;            /*!< [1..1] Quad SPI memory controller clock enable                            */
            uint32            : 30;
    } bit;
  } AHB3ENR;
  __IM  uint32  RESERVED2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) APB1 peripheral clock enable register                      */
    
    struct {
      __IOM uint32 TIM2EN     : 1;            /*!< [0..0] TIM2 clock enable                                                  */
      __IOM uint32 TIM3EN     : 1;            /*!< [1..1] TIM3 clock enable                                                  */
      __IOM uint32 TIM4EN     : 1;            /*!< [2..2] TIM4 clock enable                                                  */
      __IOM uint32 TIM5EN     : 1;            /*!< [3..3] TIM5 clock enable                                                  */
      __IOM uint32 TIM6EN     : 1;            /*!< [4..4] TIM6 clock enable                                                  */
      __IOM uint32 TIM7EN     : 1;            /*!< [5..5] TIM7 clock enable                                                  */
      __IOM uint32 TIM12EN    : 1;            /*!< [6..6] TIM12 clock enable                                                 */
      __IOM uint32 TIM13EN    : 1;            /*!< [7..7] TIM13 clock enable                                                 */
      __IOM uint32 TIM14EN    : 1;            /*!< [8..8] TIM14 clock enable                                                 */
      __IOM uint32 LPTMI1EN   : 1;            /*!< [9..9] Low power timer 1 clock enable                                     */
            uint32            : 1;
      __IOM uint32 WWDGEN     : 1;            /*!< [11..11] Window watchdog clock enable                                     */
            uint32            : 2;
      __IOM uint32 SPI2EN     : 1;            /*!< [14..14] SPI2 clock enable                                                */
      __IOM uint32 SPI3EN     : 1;            /*!< [15..15] SPI3 clock enable                                                */
      __IOM uint32 SPDIFRXEN  : 1;            /*!< [16..16] SPDIF-RX clock enable                                            */
      __IOM uint32 USART2EN   : 1;            /*!< [17..17] USART 2 clock enable                                             */
      __IOM uint32 USART3EN   : 1;            /*!< [18..18] USART3 clock enable                                              */
      __IOM uint32 UART4EN    : 1;            /*!< [19..19] UART4 clock enable                                               */
      __IOM uint32 UART5EN    : 1;            /*!< [20..20] UART5 clock enable                                               */
      __IOM uint32 I2C1EN     : 1;            /*!< [21..21] I2C1 clock enable                                                */
      __IOM uint32 I2C2EN     : 1;            /*!< [22..22] I2C2 clock enable                                                */
      __IOM uint32 I2C3EN     : 1;            /*!< [23..23] I2C3 clock enable                                                */
      __IOM uint32 I2C4EN     : 1;            /*!< [24..24] I2C4 clock enable                                                */
      __IOM uint32 CAN1EN     : 1;            /*!< [25..25] CAN 1 clock enable                                               */
      __IOM uint32 CAN2EN     : 1;            /*!< [26..26] CAN 2 clock enable                                               */
      __IOM uint32 CECEN      : 1;            /*!< [27..27] HDMI-CEN clock enable                                            */
      __IOM uint32 PWREN      : 1;            /*!< [28..28] Power interface clock enable                                     */
      __IOM uint32 DACEN      : 1;            /*!< [29..29] DAC interface clock enable                                       */
      __IOM uint32 UART7ENR   : 1;            /*!< [30..30] UART7 clock enable                                               */
      __IOM uint32 UART8ENR   : 1;            /*!< [31..31] UART8 clock enable                                               */
    } bit;
  } APB1ENR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000044) APB2 peripheral clock enable register                      */
    
    struct {
      __IOM uint32 TIM1EN     : 1;            /*!< [0..0] TIM1 clock enable                                                  */
      __IOM uint32 TIM8EN     : 1;            /*!< [1..1] TIM8 clock enable                                                  */
            uint32            : 2;
      __IOM uint32 USART1EN   : 1;            /*!< [4..4] USART1 clock enable                                                */
      __IOM uint32 USART6EN   : 1;            /*!< [5..5] USART6 clock enable                                                */
            uint32            : 2;
      __IOM uint32 ADC1EN     : 1;            /*!< [8..8] ADC1 clock enable                                                  */
      __IOM uint32 ADC2EN     : 1;            /*!< [9..9] ADC2 clock enable                                                  */
      __IOM uint32 ADC3EN     : 1;            /*!< [10..10] ADC3 clock enable                                                */
      __IOM uint32 SDMMC1EN   : 1;            /*!< [11..11] SDMMC1 clock enable                                              */
      __IOM uint32 SPI1EN     : 1;            /*!< [12..12] SPI1 clock enable                                                */
      __IOM uint32 SPI4ENR    : 1;            /*!< [13..13] SPI4 clock enable                                                */
      __IOM uint32 SYSCFGEN   : 1;            /*!< [14..14] System configuration controller clock enable                     */
            uint32            : 1;
      __IOM uint32 TIM9EN     : 1;            /*!< [16..16] TIM9 clock enable                                                */
      __IOM uint32 TIM10EN    : 1;            /*!< [17..17] TIM10 clock enable                                               */
      __IOM uint32 TIM11EN    : 1;            /*!< [18..18] TIM11 clock enable                                               */
            uint32            : 1;
      __IOM uint32 SPI5ENR    : 1;            /*!< [20..20] SPI5 clock enable                                                */
      __IOM uint32 SPI6ENR    : 1;            /*!< [21..21] SPI6 clock enable                                                */
      __IOM uint32 SAI1EN     : 1;            /*!< [22..22] SAI1 clock enable                                                */
      __IOM uint32 SAI2EN     : 1;            /*!< [23..23] SAI2 clock enable                                                */
            uint32            : 2;
      __IOM uint32 LTDCEN     : 1;            /*!< [26..26] LTDC clock enable                                                */
            uint32            : 5;
    } bit;
  } APB2ENR;
  __IM  uint32  RESERVED3[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000050) AHB1 peripheral clock enable in low power mode
                                                                    register                                                   */
    
    struct {
      __IOM uint32 GPIOALPEN  : 1;            /*!< [0..0] IO port A clock enable during sleep mode                           */
      __IOM uint32 GPIOBLPEN  : 1;            /*!< [1..1] IO port B clock enable during Sleep mode                           */
      __IOM uint32 GPIOCLPEN  : 1;            /*!< [2..2] IO port C clock enable during Sleep mode                           */
      __IOM uint32 GPIODLPEN  : 1;            /*!< [3..3] IO port D clock enable during Sleep mode                           */
      __IOM uint32 GPIOELPEN  : 1;            /*!< [4..4] IO port E clock enable during Sleep mode                           */
      __IOM uint32 GPIOFLPEN  : 1;            /*!< [5..5] IO port F clock enable during Sleep mode                           */
      __IOM uint32 GPIOGLPEN  : 1;            /*!< [6..6] IO port G clock enable during Sleep mode                           */
      __IOM uint32 GPIOHLPEN  : 1;            /*!< [7..7] IO port H clock enable during Sleep mode                           */
      __IOM uint32 GPIOILPEN  : 1;            /*!< [8..8] IO port I clock enable during Sleep mode                           */
      __IOM uint32 GPIOJLPEN  : 1;            /*!< [9..9] IO port J clock enable during Sleep mode                           */
      __IOM uint32 GPIOKLPEN  : 1;            /*!< [10..10] IO port K clock enable during Sleep mode                         */
            uint32            : 1;
      __IOM uint32 CRCLPEN    : 1;            /*!< [12..12] CRC clock enable during Sleep mode                               */
            uint32            : 2;
      __IOM uint32 FLITFLPEN  : 1;            /*!< [15..15] Flash interface clock enable during Sleep mode                   */
      __IOM uint32 SRAM1LPEN  : 1;            /*!< [16..16] SRAM 1interface clock enable during Sleep mode                   */
      __IOM uint32 SRAM2LPEN  : 1;            /*!< [17..17] SRAM 2 interface clock enable during Sleep mode                  */
      __IOM uint32 BKPSRAMLPEN : 1;           /*!< [18..18] Backup SRAM interface clock enable during Sleep mode             */
      __IOM uint32 SRAM3LPEN  : 1;            /*!< [19..19] SRAM 3 interface clock enable during Sleep mode                  */
            uint32            : 1;
      __IOM uint32 DMA1LPEN   : 1;            /*!< [21..21] DMA1 clock enable during Sleep mode                              */
      __IOM uint32 DMA2LPEN   : 1;            /*!< [22..22] DMA2 clock enable during Sleep mode                              */
      __IOM uint32 DMA2DLPEN  : 1;            /*!< [23..23] DMA2D clock enable during Sleep mode                             */
            uint32            : 1;
      __IOM uint32 ETHMACLPEN : 1;            /*!< [25..25] Ethernet MAC clock enable during Sleep mode                      */
      __IOM uint32 ETHMACTXLPEN : 1;          /*!< [26..26] Ethernet transmission clock enable during Sleep mode             */
      __IOM uint32 ETHMACRXLPEN : 1;          /*!< [27..27] Ethernet reception clock enable during Sleep mode                */
      __IOM uint32 ETHMACPTPLPEN : 1;         /*!< [28..28] Ethernet PTP clock enable during Sleep mode                      */
      __IOM uint32 OTGHSLPEN  : 1;            /*!< [29..29] USB OTG HS clock enable during Sleep mode                        */
      __IOM uint32 OTGHSULPILPEN : 1;         /*!< [30..30] USB OTG HS ULPI clock enable during Sleep mode                   */
            uint32            : 1;
    } bit;
  } AHB1LPENR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000054) AHB2 peripheral clock enable in low power mode
                                                                    register                                                   */
    
    struct {
      __IOM uint32 DCMILPEN   : 1;            /*!< [0..0] Camera interface enable during Sleep mode                          */
            uint32            : 3;
      __IOM uint32 CRYPLPEN   : 1;            /*!< [4..4] Cryptography modules clock enable during Sleep mode                */
      __IOM uint32 HASHLPEN   : 1;            /*!< [5..5] Hash modules clock enable during Sleep mode                        */
      __IOM uint32 RNGLPEN    : 1;            /*!< [6..6] Random number generator clock enable during Sleep mode             */
      __IOM uint32 OTGFSLPEN  : 1;            /*!< [7..7] USB OTG FS clock enable during Sleep mode                          */
            uint32            : 24;
    } bit;
  } AHB2LPENR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000058) AHB3 peripheral clock enable in low power mode
                                                                    register                                                   */
    
    struct {
      __IOM uint32 FMCLPEN    : 1;            /*!< [0..0] Flexible memory controller module clock enable during
                                                     Sleep mode                                                                */
      __IOM uint32 QSPILPEN   : 1;            /*!< [1..1] Quand SPI memory controller clock enable during Sleep
                                                     mode                                                                      */
            uint32            : 30;
    } bit;
  } AHB3LPENR;
  __IM  uint32  RESERVED4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000060) APB1 peripheral clock enable in low power mode
                                                                    register                                                   */
    
    struct {
      __IOM uint32 TIM2LPEN   : 1;            /*!< [0..0] TIM2 clock enable during Sleep mode                                */
      __IOM uint32 TIM3LPEN   : 1;            /*!< [1..1] TIM3 clock enable during Sleep mode                                */
      __IOM uint32 TIM4LPEN   : 1;            /*!< [2..2] TIM4 clock enable during Sleep mode                                */
      __IOM uint32 TIM5LPEN   : 1;            /*!< [3..3] TIM5 clock enable during Sleep mode                                */
      __IOM uint32 TIM6LPEN   : 1;            /*!< [4..4] TIM6 clock enable during Sleep mode                                */
      __IOM uint32 TIM7LPEN   : 1;            /*!< [5..5] TIM7 clock enable during Sleep mode                                */
      __IOM uint32 TIM12LPEN  : 1;            /*!< [6..6] TIM12 clock enable during Sleep mode                               */
      __IOM uint32 TIM13LPEN  : 1;            /*!< [7..7] TIM13 clock enable during Sleep mode                               */
      __IOM uint32 TIM14LPEN  : 1;            /*!< [8..8] TIM14 clock enable during Sleep mode                               */
      __IOM uint32 LPTIM1LPEN : 1;            /*!< [9..9] low power timer 1 clock enable during Sleep mode                   */
            uint32            : 1;
      __IOM uint32 WWDGLPEN   : 1;            /*!< [11..11] Window watchdog clock enable during Sleep mode                   */
            uint32            : 2;
      __IOM uint32 SPI2LPEN   : 1;            /*!< [14..14] SPI2 clock enable during Sleep mode                              */
      __IOM uint32 SPI3LPEN   : 1;            /*!< [15..15] SPI3 clock enable during Sleep mode                              */
      __IOM uint32 SPDIFRXLPEN : 1;           /*!< [16..16] SPDIF-RX clock enable during sleep mode                          */
      __IOM uint32 USART2LPEN : 1;            /*!< [17..17] USART2 clock enable during Sleep mode                            */
      __IOM uint32 USART3LPEN : 1;            /*!< [18..18] USART3 clock enable during Sleep mode                            */
      __IOM uint32 UART4LPEN  : 1;            /*!< [19..19] UART4 clock enable during Sleep mode                             */
      __IOM uint32 UART5LPEN  : 1;            /*!< [20..20] UART5 clock enable during Sleep mode                             */
      __IOM uint32 I2C1LPEN   : 1;            /*!< [21..21] I2C1 clock enable during Sleep mode                              */
      __IOM uint32 I2C2LPEN   : 1;            /*!< [22..22] I2C2 clock enable during Sleep mode                              */
      __IOM uint32 I2C3LPEN   : 1;            /*!< [23..23] I2C3 clock enable during Sleep mode                              */
      __IOM uint32 I2C4LPEN   : 1;            /*!< [24..24] I2C4 clock enable during Sleep mode                              */
      __IOM uint32 CAN1LPEN   : 1;            /*!< [25..25] CAN 1 clock enable during Sleep mode                             */
      __IOM uint32 CAN2LPEN   : 1;            /*!< [26..26] CAN 2 clock enable during Sleep mode                             */
      __IOM uint32 CECLPEN    : 1;            /*!< [27..27] HDMI-CEN clock enable during Sleep mode                          */
      __IOM uint32 PWRLPEN    : 1;            /*!< [28..28] Power interface clock enable during Sleep mode                   */
      __IOM uint32 DACLPEN    : 1;            /*!< [29..29] DAC interface clock enable during Sleep mode                     */
      __IOM uint32 UART7LPEN  : 1;            /*!< [30..30] UART7 clock enable during Sleep mode                             */
      __IOM uint32 UART8LPEN  : 1;            /*!< [31..31] UART8 clock enable during Sleep mode                             */
    } bit;
  } APB1LPENR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000064) APB2 peripheral clock enabled in low power mode
                                                                    register                                                   */
    
    struct {
      __IOM uint32 TIM1LPEN   : 1;            /*!< [0..0] TIM1 clock enable during Sleep mode                                */
      __IOM uint32 TIM8LPEN   : 1;            /*!< [1..1] TIM8 clock enable during Sleep mode                                */
            uint32            : 2;
      __IOM uint32 USART1LPEN : 1;            /*!< [4..4] USART1 clock enable during Sleep mode                              */
      __IOM uint32 USART6LPEN : 1;            /*!< [5..5] USART6 clock enable during Sleep mode                              */
            uint32            : 2;
      __IOM uint32 ADC1LPEN   : 1;            /*!< [8..8] ADC1 clock enable during Sleep mode                                */
      __IOM uint32 ADC2LPEN   : 1;            /*!< [9..9] ADC2 clock enable during Sleep mode                                */
      __IOM uint32 ADC3LPEN   : 1;            /*!< [10..10] ADC 3 clock enable during Sleep mode                             */
      __IOM uint32 SDMMC1LPEN : 1;            /*!< [11..11] SDMMC1 clock enable during Sleep mode                            */
      __IOM uint32 SPI1LPEN   : 1;            /*!< [12..12] SPI 1 clock enable during Sleep mode                             */
      __IOM uint32 SPI4LPEN   : 1;            /*!< [13..13] SPI 4 clock enable during Sleep mode                             */
      __IOM uint32 SYSCFGLPEN : 1;            /*!< [14..14] System configuration controller clock enable during
                                                     Sleep mode                                                                */
            uint32            : 1;
      __IOM uint32 TIM9LPEN   : 1;            /*!< [16..16] TIM9 clock enable during sleep mode                              */
      __IOM uint32 TIM10LPEN  : 1;            /*!< [17..17] TIM10 clock enable during Sleep mode                             */
      __IOM uint32 TIM11LPEN  : 1;            /*!< [18..18] TIM11 clock enable during Sleep mode                             */
            uint32            : 1;
      __IOM uint32 SPI5LPEN   : 1;            /*!< [20..20] SPI 5 clock enable during Sleep mode                             */
      __IOM uint32 SPI6LPEN   : 1;            /*!< [21..21] SPI 6 clock enable during Sleep mode                             */
      __IOM uint32 SAI1LPEN   : 1;            /*!< [22..22] SAI1 clock enable during sleep mode                              */
      __IOM uint32 SAI2LPEN   : 1;            /*!< [23..23] SAI2 clock enable during sleep mode                              */
            uint32            : 2;
      __IOM uint32 LTDCLPEN   : 1;            /*!< [26..26] LTDC clock enable during sleep mode                              */
            uint32            : 5;
    } bit;
  } APB2LPENR;
  __IM  uint32  RESERVED5[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000070) Backup domain control register                             */
    
    struct {
      __IOM uint32 LSEON      : 1;            /*!< [0..0] External low-speed oscillator enable                               */
      __IM  uint32 LSERDY     : 1;            /*!< [1..1] External low-speed oscillator ready                                */
      __IOM uint32 LSEBYP     : 1;            /*!< [2..2] External low-speed oscillator bypass                               */
            uint32            : 5;
      __IOM uint32 RTCSEL0    : 1;            /*!< [8..8] RTC clock source selection                                         */
      __IOM uint32 RTCSEL1    : 1;            /*!< [9..9] RTC clock source selection                                         */
            uint32            : 5;
      __IOM uint32 RTCEN      : 1;            /*!< [15..15] RTC clock enable                                                 */
      __IOM uint32 BDRST      : 1;            /*!< [16..16] Backup domain software reset                                     */
            uint32            : 15;
    } bit;
  } BDCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000074) clock control & status register                            */
    
    struct {
      __IOM uint32 LSION      : 1;            /*!< [0..0] Internal low-speed oscillator enable                               */
      __IM  uint32 LSIRDY     : 1;            /*!< [1..1] Internal low-speed oscillator ready                                */
            uint32            : 22;
      __IOM uint32 RMVF       : 1;            /*!< [24..24] Remove reset flag                                                */
      __IOM uint32 BORRSTF    : 1;            /*!< [25..25] BOR reset flag                                                   */
      __IOM uint32 PADRSTF    : 1;            /*!< [26..26] PIN reset flag                                                   */
      __IOM uint32 PORRSTF    : 1;            /*!< [27..27] POR/PDR reset flag                                               */
      __IOM uint32 SFTRSTF    : 1;            /*!< [28..28] Software reset flag                                              */
      __IOM uint32 WDGRSTF    : 1;            /*!< [29..29] Independent watchdog reset flag                                  */
      __IOM uint32 WWDGRSTF   : 1;            /*!< [30..30] Window watchdog reset flag                                       */
      __IOM uint32 LPWRRSTF   : 1;            /*!< [31..31] Low-power reset flag                                             */
    } bit;
  } CSR;
  __IM  uint32  RESERVED6[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000080) spread spectrum clock generation register                  */
    
    struct {
      __IOM uint32 MODPER     : 13;           /*!< [12..0] Modulation period                                                 */
      __IOM uint32 INCSTEP    : 15;           /*!< [27..13] Incrementation step                                              */
            uint32            : 2;
      __IOM uint32 SPREADSEL  : 1;            /*!< [30..30] Spread Select                                                    */
      __IOM uint32 SSCGEN     : 1;            /*!< [31..31] Spread spectrum modulation enable                                */
    } bit;
  } SSCGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000084) PLLI2S configuration register                              */
    
    struct {
            uint32            : 6;
      __IOM uint32 PLLI2SN    : 9;            /*!< [14..6] PLLI2S multiplication factor for VCO                              */
            uint32            : 9;
      __IOM uint32 PLLI2SQ    : 4;            /*!< [27..24] PLLI2S division factor for SAI1 clock                            */
      __IOM uint32 PLLI2SR    : 3;            /*!< [30..28] PLLI2S division factor for I2S clocks                            */
            uint32            : 1;
    } bit;
  } PLLI2SCFGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000088) PLL configuration register                                 */
    
    struct {
            uint32            : 6;
      __IOM uint32 PLLSAIN    : 9;            /*!< [14..6] PLLSAI division factor for VCO                                    */
            uint32            : 1;
      __IOM uint32 PLLSAIP    : 2;            /*!< [17..16] PLLSAI division factor for 48MHz clock                           */
            uint32            : 6;
      __IOM uint32 PLLSAIQ    : 4;            /*!< [27..24] PLLSAI division factor for SAI clock                             */
      __IOM uint32 PLLSAIR    : 3;            /*!< [30..28] PLLSAI division factor for LCD clock                             */
            uint32            : 1;
    } bit;
  } PLLSAICFGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000008C) dedicated clocks configuration register                    */
    
    struct {
      __IOM uint32 PLLI2SDIV  : 5;            /*!< [4..0] PLLI2S division factor for SAI1 clock                              */
            uint32            : 3;
      __IOM uint32 PLLSAIDIVQ : 5;            /*!< [12..8] PLLSAI division factor for SAI1 clock                             */
            uint32            : 3;
      __IOM uint32 PLLSAIDIVR : 2;            /*!< [17..16] division factor for LCD_CLK                                      */
            uint32            : 2;
      __IOM uint32 SAI1SEL    : 2;            /*!< [21..20] SAI1 clock source selection                                      */
      __IOM uint32 SAI2SEL    : 2;            /*!< [23..22] SAI2 clock source selection                                      */
      __IOM uint32 TIMPRE     : 1;            /*!< [24..24] Timers clocks prescalers selection                               */
            uint32            : 7;
    } bit;
  } DKCFGR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000090) dedicated clocks configuration register                    */
    
    struct {
      __IOM uint32 USART1SEL  : 2;            /*!< [1..0] USART 1 clock source selection                                     */
      __IOM uint32 USART2SEL  : 2;            /*!< [3..2] USART 2 clock source selection                                     */
      __IOM uint32 USART3SEL  : 2;            /*!< [5..4] USART 3 clock source selection                                     */
      __IOM uint32 UART4SEL   : 2;            /*!< [7..6] UART 4 clock source selection                                      */
      __IOM uint32 UART5SEL   : 2;            /*!< [9..8] UART 5 clock source selection                                      */
      __IOM uint32 USART6SEL  : 2;            /*!< [11..10] USART 6 clock source selection                                   */
      __IOM uint32 UART7SEL   : 2;            /*!< [13..12] UART 7 clock source selection                                    */
      __IOM uint32 UART8SEL   : 2;            /*!< [15..14] UART 8 clock source selection                                    */
      __IOM uint32 I2C1SEL    : 2;            /*!< [17..16] I2C1 clock source selection                                      */
      __IOM uint32 I2C2SEL    : 2;            /*!< [19..18] I2C2 clock source selection                                      */
      __IOM uint32 I2C3SEL    : 2;            /*!< [21..20] I2C3 clock source selection                                      */
      __IOM uint32 I2C4SEL    : 2;            /*!< [23..22] I2C4 clock source selection                                      */
      __IOM uint32 LPTIM1SEL  : 2;            /*!< [25..24] Low power timer 1 clock source selection                         */
      __IOM uint32 CECSEL     : 1;            /*!< [26..26] HDMI-CEC clock source selection                                  */
      __IOM uint32 CK48MSEL   : 1;            /*!< [27..27] 48MHz clock source selection                                     */
      __IOM uint32 SDMMCSEL   : 1;            /*!< [28..28] SDMMC clock source selection                                     */
            uint32            : 3;
    } bit;
  } DKCFGR2;
} RCC_Type;                                     /*!< Size = 148 (0x94)                                                         */



/* =========================================================================================================================== */
/* ================                                           GPIOD                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOD)
  */

typedef struct {                                /*!< (@ 0x40020C00) GPIOD Structure                                            */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) GPIO port mode register                                    */
    
    struct {
      __IOM uint32 MODER0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } MODER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) GPIO port output type register                             */
    
    struct {
      __IOM uint32 OT0        : 1;            /*!< [0..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT1        : 1;            /*!< [1..1] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT2        : 1;            /*!< [2..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT3        : 1;            /*!< [3..3] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT4        : 1;            /*!< [4..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT5        : 1;            /*!< [5..5] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT6        : 1;            /*!< [6..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT7        : 1;            /*!< [7..7] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT8        : 1;            /*!< [8..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT9        : 1;            /*!< [9..9] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT10       : 1;            /*!< [10..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT11       : 1;            /*!< [11..11] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT12       : 1;            /*!< [12..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT13       : 1;            /*!< [13..13] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT14       : 1;            /*!< [14..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT15       : 1;            /*!< [15..15] Port x configuration bits (y = 0..15)                            */
            uint32            : 16;
    } bit;
  } OTYPER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) GPIO port output speed register                            */
    
    struct {
      __IOM uint32 OSPEEDR0   : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR1   : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR2   : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR3   : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR4   : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR5   : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR6   : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR7   : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR8   : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR9   : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR10  : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR11  : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR12  : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR13  : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR14  : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR15  : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } OSPEEDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
    
    struct {
      __IOM uint32 PUPDR0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } PUPDR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000010) GPIO port input data register                              */
    
    struct {
      __IM  uint32 IDR0       : 1;            /*!< [0..0] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR1       : 1;            /*!< [1..1] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR2       : 1;            /*!< [2..2] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR3       : 1;            /*!< [3..3] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR4       : 1;            /*!< [4..4] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR5       : 1;            /*!< [5..5] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR6       : 1;            /*!< [6..6] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR7       : 1;            /*!< [7..7] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR8       : 1;            /*!< [8..8] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR9       : 1;            /*!< [9..9] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR10      : 1;            /*!< [10..10] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR11      : 1;            /*!< [11..11] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR12      : 1;            /*!< [12..12] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR13      : 1;            /*!< [13..13] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR14      : 1;            /*!< [14..14] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR15      : 1;            /*!< [15..15] Port input data (y = 0..15)                                      */
            uint32            : 16;
    } bit;
  } IDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) GPIO port output data register                             */
    
    struct {
      __IOM uint32 ODR0       : 1;            /*!< [0..0] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR1       : 1;            /*!< [1..1] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR2       : 1;            /*!< [2..2] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR3       : 1;            /*!< [3..3] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR4       : 1;            /*!< [4..4] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR5       : 1;            /*!< [5..5] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR6       : 1;            /*!< [6..6] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR7       : 1;            /*!< [7..7] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR8       : 1;            /*!< [8..8] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR9       : 1;            /*!< [9..9] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR10      : 1;            /*!< [10..10] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR11      : 1;            /*!< [11..11] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR12      : 1;            /*!< [12..12] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR13      : 1;            /*!< [13..13] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR14      : 1;            /*!< [14..14] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR15      : 1;            /*!< [15..15] Port output data (y = 0..15)                                     */
            uint32            : 16;
    } bit;
  } ODR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
    
    struct {
      __OM  uint32 BS0        : 1;            /*!< [0..0] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS1        : 1;            /*!< [1..1] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS2        : 1;            /*!< [2..2] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS3        : 1;            /*!< [3..3] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS4        : 1;            /*!< [4..4] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS5        : 1;            /*!< [5..5] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS6        : 1;            /*!< [6..6] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS7        : 1;            /*!< [7..7] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS8        : 1;            /*!< [8..8] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS9        : 1;            /*!< [9..9] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS10       : 1;            /*!< [10..10] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS11       : 1;            /*!< [11..11] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS12       : 1;            /*!< [12..12] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS13       : 1;            /*!< [13..13] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS14       : 1;            /*!< [14..14] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS15       : 1;            /*!< [15..15] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BR0        : 1;            /*!< [16..16] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BR1        : 1;            /*!< [17..17] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR2        : 1;            /*!< [18..18] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR3        : 1;            /*!< [19..19] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR4        : 1;            /*!< [20..20] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR5        : 1;            /*!< [21..21] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR6        : 1;            /*!< [22..22] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR7        : 1;            /*!< [23..23] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR8        : 1;            /*!< [24..24] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR9        : 1;            /*!< [25..25] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR10       : 1;            /*!< [26..26] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR11       : 1;            /*!< [27..27] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR12       : 1;            /*!< [28..28] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR13       : 1;            /*!< [29..29] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR14       : 1;            /*!< [30..30] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR15       : 1;            /*!< [31..31] Port x reset bit y (y = 0..15)                                   */
    } bit;
  } BSRR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
    
    struct {
      __IOM uint32 LCK0       : 1;            /*!< [0..0] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK1       : 1;            /*!< [1..1] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK2       : 1;            /*!< [2..2] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK3       : 1;            /*!< [3..3] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK4       : 1;            /*!< [4..4] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK5       : 1;            /*!< [5..5] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK6       : 1;            /*!< [6..6] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK7       : 1;            /*!< [7..7] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK8       : 1;            /*!< [8..8] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK9       : 1;            /*!< [9..9] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK10      : 1;            /*!< [10..10] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK11      : 1;            /*!< [11..11] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK12      : 1;            /*!< [12..12] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK13      : 1;            /*!< [13..13] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK14      : 1;            /*!< [14..14] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK15      : 1;            /*!< [15..15] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCKK       : 1;            /*!< [16..16] Port x lock bit y (y= 0..15)                                     */
            uint32            : 15;
    } bit;
  } LCKR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) GPIO alternate function lowregister                        */
    
    struct {
      __IOM uint32 AFRL0      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32 AFRL1      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32 AFRL2      : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 0..7)          */
      __IOM uint32 AFRL3      : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL4      : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL5      : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL6      : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL7      : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
    } bit;
  } AFRL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
    
    struct {
      __IOM uint32 AFRH8      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32 AFRH9      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32 AFRH10     : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 8..15)         */
      __IOM uint32 AFRH11     : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH12     : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH13     : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH14     : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH15     : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
    } bit;
  } AFRH;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) GPIO port bit reset register                               */
    
    struct {
      __IOM uint32 BR0        : 1;            /*!< [0..0] Port D Reset bit 0                                                 */
      __IOM uint32 BR1        : 1;            /*!< [1..1] Port D Reset bit 1                                                 */
      __IOM uint32 BR2        : 1;            /*!< [2..2] Port D Reset bit 2                                                 */
      __IOM uint32 BR3        : 1;            /*!< [3..3] Port D Reset bit 3                                                 */
      __IOM uint32 BR4        : 1;            /*!< [4..4] Port D Reset bit 4                                                 */
      __IOM uint32 BR5        : 1;            /*!< [5..5] Port D Reset bit 5                                                 */
      __IOM uint32 BR6        : 1;            /*!< [6..6] Port D Reset bit 6                                                 */
      __IOM uint32 BR7        : 1;            /*!< [7..7] Port D Reset bit 7                                                 */
      __IOM uint32 BR8        : 1;            /*!< [8..8] Port D Reset bit 8                                                 */
      __IOM uint32 BR9        : 1;            /*!< [9..9] Port D Reset bit 9                                                 */
      __IOM uint32 BR10       : 1;            /*!< [10..10] Port D Reset bit 10                                              */
      __IOM uint32 BR11       : 1;            /*!< [11..11] Port D Reset bit 11                                              */
      __IOM uint32 BR12       : 1;            /*!< [12..12] Port D Reset bit 12                                              */
      __IOM uint32 BR13       : 1;            /*!< [13..13] Port D Reset bit 13                                              */
      __IOM uint32 BR14       : 1;            /*!< [14..14] Port D Reset bit 14                                              */
      __IOM uint32 BR15       : 1;            /*!< [15..15] Port D Reset bit 15                                              */
            uint32            : 16;
    } bit;
  } BRR;
} GPIOD_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOB                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOB)
  */

typedef struct {                                /*!< (@ 0x40020400) GPIOB Structure                                            */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) GPIO port mode register                                    */
    
    struct {
      __IOM uint32 MODER0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } MODER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) GPIO port output type register                             */
    
    struct {
      __IOM uint32 OT0        : 1;            /*!< [0..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT1        : 1;            /*!< [1..1] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT2        : 1;            /*!< [2..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT3        : 1;            /*!< [3..3] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT4        : 1;            /*!< [4..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT5        : 1;            /*!< [5..5] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT6        : 1;            /*!< [6..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT7        : 1;            /*!< [7..7] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT8        : 1;            /*!< [8..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT9        : 1;            /*!< [9..9] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT10       : 1;            /*!< [10..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT11       : 1;            /*!< [11..11] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT12       : 1;            /*!< [12..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT13       : 1;            /*!< [13..13] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT14       : 1;            /*!< [14..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT15       : 1;            /*!< [15..15] Port x configuration bits (y = 0..15)                            */
            uint32            : 16;
    } bit;
  } OTYPER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) GPIO port output speed register                            */
    
    struct {
      __IOM uint32 OSPEEDR0   : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR1   : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR2   : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR3   : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR4   : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR5   : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR6   : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR7   : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR8   : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR9   : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR10  : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR11  : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR12  : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR13  : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR14  : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR15  : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } OSPEEDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
    
    struct {
      __IOM uint32 PUPDR0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } PUPDR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000010) GPIO port input data register                              */
    
    struct {
      __IM  uint32 IDR0       : 1;            /*!< [0..0] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR1       : 1;            /*!< [1..1] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR2       : 1;            /*!< [2..2] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR3       : 1;            /*!< [3..3] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR4       : 1;            /*!< [4..4] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR5       : 1;            /*!< [5..5] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR6       : 1;            /*!< [6..6] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR7       : 1;            /*!< [7..7] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR8       : 1;            /*!< [8..8] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR9       : 1;            /*!< [9..9] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR10      : 1;            /*!< [10..10] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR11      : 1;            /*!< [11..11] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR12      : 1;            /*!< [12..12] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR13      : 1;            /*!< [13..13] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR14      : 1;            /*!< [14..14] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR15      : 1;            /*!< [15..15] Port input data (y = 0..15)                                      */
            uint32            : 16;
    } bit;
  } IDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) GPIO port output data register                             */
    
    struct {
      __IOM uint32 ODR0       : 1;            /*!< [0..0] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR1       : 1;            /*!< [1..1] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR2       : 1;            /*!< [2..2] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR3       : 1;            /*!< [3..3] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR4       : 1;            /*!< [4..4] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR5       : 1;            /*!< [5..5] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR6       : 1;            /*!< [6..6] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR7       : 1;            /*!< [7..7] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR8       : 1;            /*!< [8..8] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR9       : 1;            /*!< [9..9] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR10      : 1;            /*!< [10..10] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR11      : 1;            /*!< [11..11] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR12      : 1;            /*!< [12..12] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR13      : 1;            /*!< [13..13] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR14      : 1;            /*!< [14..14] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR15      : 1;            /*!< [15..15] Port output data (y = 0..15)                                     */
            uint32            : 16;
    } bit;
  } ODR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
    
    struct {
      __OM  uint32 BS0        : 1;            /*!< [0..0] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS1        : 1;            /*!< [1..1] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS2        : 1;            /*!< [2..2] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS3        : 1;            /*!< [3..3] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS4        : 1;            /*!< [4..4] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS5        : 1;            /*!< [5..5] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS6        : 1;            /*!< [6..6] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS7        : 1;            /*!< [7..7] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS8        : 1;            /*!< [8..8] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS9        : 1;            /*!< [9..9] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS10       : 1;            /*!< [10..10] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS11       : 1;            /*!< [11..11] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS12       : 1;            /*!< [12..12] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS13       : 1;            /*!< [13..13] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS14       : 1;            /*!< [14..14] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS15       : 1;            /*!< [15..15] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BR0        : 1;            /*!< [16..16] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BR1        : 1;            /*!< [17..17] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR2        : 1;            /*!< [18..18] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR3        : 1;            /*!< [19..19] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR4        : 1;            /*!< [20..20] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR5        : 1;            /*!< [21..21] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR6        : 1;            /*!< [22..22] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR7        : 1;            /*!< [23..23] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR8        : 1;            /*!< [24..24] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR9        : 1;            /*!< [25..25] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR10       : 1;            /*!< [26..26] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR11       : 1;            /*!< [27..27] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR12       : 1;            /*!< [28..28] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR13       : 1;            /*!< [29..29] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR14       : 1;            /*!< [30..30] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR15       : 1;            /*!< [31..31] Port x reset bit y (y = 0..15)                                   */
    } bit;
  } BSRR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
    
    struct {
      __IOM uint32 LCK0       : 1;            /*!< [0..0] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK1       : 1;            /*!< [1..1] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK2       : 1;            /*!< [2..2] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK3       : 1;            /*!< [3..3] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK4       : 1;            /*!< [4..4] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK5       : 1;            /*!< [5..5] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK6       : 1;            /*!< [6..6] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK7       : 1;            /*!< [7..7] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK8       : 1;            /*!< [8..8] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK9       : 1;            /*!< [9..9] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK10      : 1;            /*!< [10..10] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK11      : 1;            /*!< [11..11] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK12      : 1;            /*!< [12..12] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK13      : 1;            /*!< [13..13] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK14      : 1;            /*!< [14..14] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK15      : 1;            /*!< [15..15] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCKK       : 1;            /*!< [16..16] Port x lock bit y (y= 0..15)                                     */
            uint32            : 15;
    } bit;
  } LCKR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
    
    struct {
      __IOM uint32 AFRL0      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32 AFRL1      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32 AFRL2      : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 0..7)          */
      __IOM uint32 AFRL3      : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL4      : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL5      : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL6      : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL7      : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
    } bit;
  } AFRL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
    
    struct {
      __IOM uint32 AFRH8      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32 AFRH9      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32 AFRH10     : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 8..15)         */
      __IOM uint32 AFRH11     : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH12     : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH13     : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH14     : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH15     : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
    } bit;
  } AFRH;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) GPIO port bit reset register                               */
    
    struct {
      __IOM uint32 BR0        : 1;            /*!< [0..0] Port B Reset bit 0                                                 */
      __IOM uint32 BR1        : 1;            /*!< [1..1] Port B Reset bit 1                                                 */
      __IOM uint32 BR2        : 1;            /*!< [2..2] Port B Reset bit 2                                                 */
      __IOM uint32 BR3        : 1;            /*!< [3..3] Port B Reset bit 3                                                 */
      __IOM uint32 BR4        : 1;            /*!< [4..4] Port B Reset bit 4                                                 */
      __IOM uint32 BR5        : 1;            /*!< [5..5] Port B Reset bit 5                                                 */
      __IOM uint32 BR6        : 1;            /*!< [6..6] Port B Reset bit 6                                                 */
      __IOM uint32 BR7        : 1;            /*!< [7..7] Port B Reset bit 7                                                 */
      __IOM uint32 BR8        : 1;            /*!< [8..8] Port B Reset bit 8                                                 */
      __IOM uint32 BR9        : 1;            /*!< [9..9] Port B Reset bit 9                                                 */
      __IOM uint32 BR10       : 1;            /*!< [10..10] Port B Reset bit 10                                              */
      __IOM uint32 BR11       : 1;            /*!< [11..11] Port B Reset bit 11                                              */
      __IOM uint32 BR12       : 1;            /*!< [12..12] Port B Reset bit 12                                              */
      __IOM uint32 BR13       : 1;            /*!< [13..13] Port B Reset bit 13                                              */
      __IOM uint32 BR14       : 1;            /*!< [14..14] Port B Reset bit 14                                              */
      __IOM uint32 BR15       : 1;            /*!< [15..15] Port B Reset bit 15                                              */
            uint32            : 16;
    } bit;
  } BRR;
} GPIOB_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOA)
  */

typedef struct {                                /*!< (@ 0x40020000) GPIOA Structure                                            */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) GPIO port mode register                                    */
    
    struct {
      __IOM uint32 MODER0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 MODER5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 MODER15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } MODER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) GPIO port output type register                             */
    
    struct {
      __IOM uint32 OT0        : 1;            /*!< [0..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT1        : 1;            /*!< [1..1] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT2        : 1;            /*!< [2..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT3        : 1;            /*!< [3..3] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT4        : 1;            /*!< [4..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT5        : 1;            /*!< [5..5] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT6        : 1;            /*!< [6..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT7        : 1;            /*!< [7..7] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT8        : 1;            /*!< [8..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT9        : 1;            /*!< [9..9] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OT10       : 1;            /*!< [10..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT11       : 1;            /*!< [11..11] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT12       : 1;            /*!< [12..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT13       : 1;            /*!< [13..13] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT14       : 1;            /*!< [14..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OT15       : 1;            /*!< [15..15] Port x configuration bits (y = 0..15)                            */
            uint32            : 16;
    } bit;
  } OTYPER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) GPIO port output speed register                            */
    
    struct {
      __IOM uint32 OSPEEDR0   : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR1   : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR2   : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR3   : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR4   : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 OSPEEDR5   : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR6   : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR7   : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR8   : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR9   : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR10  : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR11  : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR12  : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR13  : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR14  : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 OSPEEDR15  : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } OSPEEDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
    
    struct {
      __IOM uint32 PUPDR0     : 2;            /*!< [1..0] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR1     : 2;            /*!< [3..2] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR2     : 2;            /*!< [5..4] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR3     : 2;            /*!< [7..6] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR4     : 2;            /*!< [9..8] Port x configuration bits (y = 0..15)                              */
      __IOM uint32 PUPDR5     : 2;            /*!< [11..10] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR6     : 2;            /*!< [13..12] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR7     : 2;            /*!< [15..14] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR8     : 2;            /*!< [17..16] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR9     : 2;            /*!< [19..18] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR10    : 2;            /*!< [21..20] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR11    : 2;            /*!< [23..22] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR12    : 2;            /*!< [25..24] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR13    : 2;            /*!< [27..26] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR14    : 2;            /*!< [29..28] Port x configuration bits (y = 0..15)                            */
      __IOM uint32 PUPDR15    : 2;            /*!< [31..30] Port x configuration bits (y = 0..15)                            */
    } bit;
  } PUPDR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000010) GPIO port input data register                              */
    
    struct {
      __IM  uint32 IDR0       : 1;            /*!< [0..0] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR1       : 1;            /*!< [1..1] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR2       : 1;            /*!< [2..2] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR3       : 1;            /*!< [3..3] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR4       : 1;            /*!< [4..4] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR5       : 1;            /*!< [5..5] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR6       : 1;            /*!< [6..6] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR7       : 1;            /*!< [7..7] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR8       : 1;            /*!< [8..8] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR9       : 1;            /*!< [9..9] Port input data (y = 0..15)                                        */
      __IM  uint32 IDR10      : 1;            /*!< [10..10] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR11      : 1;            /*!< [11..11] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR12      : 1;            /*!< [12..12] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR13      : 1;            /*!< [13..13] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR14      : 1;            /*!< [14..14] Port input data (y = 0..15)                                      */
      __IM  uint32 IDR15      : 1;            /*!< [15..15] Port input data (y = 0..15)                                      */
            uint32            : 16;
    } bit;
  } IDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) GPIO port output data register                             */
    
    struct {
      __IOM uint32 ODR0       : 1;            /*!< [0..0] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR1       : 1;            /*!< [1..1] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR2       : 1;            /*!< [2..2] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR3       : 1;            /*!< [3..3] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR4       : 1;            /*!< [4..4] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR5       : 1;            /*!< [5..5] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR6       : 1;            /*!< [6..6] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR7       : 1;            /*!< [7..7] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR8       : 1;            /*!< [8..8] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR9       : 1;            /*!< [9..9] Port output data (y = 0..15)                                       */
      __IOM uint32 ODR10      : 1;            /*!< [10..10] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR11      : 1;            /*!< [11..11] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR12      : 1;            /*!< [12..12] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR13      : 1;            /*!< [13..13] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR14      : 1;            /*!< [14..14] Port output data (y = 0..15)                                     */
      __IOM uint32 ODR15      : 1;            /*!< [15..15] Port output data (y = 0..15)                                     */
            uint32            : 16;
    } bit;
  } ODR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
    
    struct {
      __OM  uint32 BS0        : 1;            /*!< [0..0] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS1        : 1;            /*!< [1..1] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS2        : 1;            /*!< [2..2] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS3        : 1;            /*!< [3..3] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS4        : 1;            /*!< [4..4] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS5        : 1;            /*!< [5..5] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS6        : 1;            /*!< [6..6] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS7        : 1;            /*!< [7..7] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS8        : 1;            /*!< [8..8] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS9        : 1;            /*!< [9..9] Port x set bit y (y= 0..15)                                        */
      __OM  uint32 BS10       : 1;            /*!< [10..10] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS11       : 1;            /*!< [11..11] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS12       : 1;            /*!< [12..12] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS13       : 1;            /*!< [13..13] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS14       : 1;            /*!< [14..14] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BS15       : 1;            /*!< [15..15] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BR0        : 1;            /*!< [16..16] Port x set bit y (y= 0..15)                                      */
      __OM  uint32 BR1        : 1;            /*!< [17..17] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR2        : 1;            /*!< [18..18] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR3        : 1;            /*!< [19..19] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR4        : 1;            /*!< [20..20] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR5        : 1;            /*!< [21..21] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR6        : 1;            /*!< [22..22] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR7        : 1;            /*!< [23..23] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR8        : 1;            /*!< [24..24] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR9        : 1;            /*!< [25..25] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR10       : 1;            /*!< [26..26] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR11       : 1;            /*!< [27..27] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR12       : 1;            /*!< [28..28] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR13       : 1;            /*!< [29..29] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR14       : 1;            /*!< [30..30] Port x reset bit y (y = 0..15)                                   */
      __OM  uint32 BR15       : 1;            /*!< [31..31] Port x reset bit y (y = 0..15)                                   */
    } bit;
  } BSRR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
    
    struct {
      __IOM uint32 LCK0       : 1;            /*!< [0..0] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK1       : 1;            /*!< [1..1] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK2       : 1;            /*!< [2..2] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK3       : 1;            /*!< [3..3] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK4       : 1;            /*!< [4..4] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK5       : 1;            /*!< [5..5] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK6       : 1;            /*!< [6..6] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK7       : 1;            /*!< [7..7] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK8       : 1;            /*!< [8..8] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK9       : 1;            /*!< [9..9] Port x lock bit y (y= 0..15)                                       */
      __IOM uint32 LCK10      : 1;            /*!< [10..10] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK11      : 1;            /*!< [11..11] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK12      : 1;            /*!< [12..12] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK13      : 1;            /*!< [13..13] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK14      : 1;            /*!< [14..14] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCK15      : 1;            /*!< [15..15] Port x lock bit y (y= 0..15)                                     */
      __IOM uint32 LCKK       : 1;            /*!< [16..16] Port x lock bit y (y= 0..15)                                     */
            uint32            : 15;
    } bit;
  } LCKR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
    
    struct {
      __IOM uint32 AFRL0      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32 AFRL1      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 0..7)           */
      __IOM uint32 AFRL2      : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 0..7)          */
      __IOM uint32 AFRL3      : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL4      : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL5      : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL6      : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
      __IOM uint32 AFRL7      : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     0..7)                                                                     */
    } bit;
  } AFRL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
    
    struct {
      __IOM uint32 AFRH8      : 4;            /*!< [3..0] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32 AFRH9      : 4;            /*!< [7..4] Alternate function selection for port x bit y (y = 8..15)          */
      __IOM uint32 AFRH10     : 4;            /*!< [11..8] Alternate function selection for port x bit y (y = 8..15)         */
      __IOM uint32 AFRH11     : 4;            /*!< [15..12] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH12     : 4;            /*!< [19..16] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH13     : 4;            /*!< [23..20] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH14     : 4;            /*!< [27..24] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
      __IOM uint32 AFRH15     : 4;            /*!< [31..28] Alternate function selection for port x bit y (y =
                                                     8..15)                                                                    */
    } bit;
  } AFRH;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) GPIO port bit reset register                               */
    
    struct {
      __IOM uint32 BR0        : 1;            /*!< [0..0] Port A Reset bit 0                                                 */
      __IOM uint32 BR1        : 1;            /*!< [1..1] Port A Reset bit 1                                                 */
      __IOM uint32 BR2        : 1;            /*!< [2..2] Port A Reset bit 2                                                 */
      __IOM uint32 BR3        : 1;            /*!< [3..3] Port A Reset bit 3                                                 */
      __IOM uint32 BR4        : 1;            /*!< [4..4] Port A Reset bit 4                                                 */
      __IOM uint32 BR5        : 1;            /*!< [5..5] Port A Reset bit 5                                                 */
      __IOM uint32 BR6        : 1;            /*!< [6..6] Port A Reset bit 6                                                 */
      __IOM uint32 BR7        : 1;            /*!< [7..7] Port A Reset bit 7                                                 */
      __IOM uint32 BR8        : 1;            /*!< [8..8] Port A Reset bit 8                                                 */
      __IOM uint32 BR9        : 1;            /*!< [9..9] Port A Reset bit 9                                                 */
      __IOM uint32 BR10       : 1;            /*!< [10..10] Port A Reset bit 10                                              */
      __IOM uint32 BR11       : 1;            /*!< [11..11] Port A Reset bit 11                                              */
      __IOM uint32 BR12       : 1;            /*!< [12..12] Port A Reset bit 12                                              */
      __IOM uint32 BR13       : 1;            /*!< [13..13] Port A Reset bit 13                                              */
      __IOM uint32 BR14       : 1;            /*!< [14..14] Port A Reset bit 14                                              */
      __IOM uint32 BR15       : 1;            /*!< [15..15] Port A Reset bit 15                                              */
            uint32            : 16;
    } bit;
  } BRR;
} GPIOA_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                          SYSCFG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System configuration controller (SYSCFG)
  */

typedef struct {                                /*!< (@ 0x40013800) SYSCFG Structure                                           */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) memory remap register                                      */
    
    struct {
      __IOM uint32 MEM_MODE   : 3;            /*!< [2..0] Memory mapping selection                                           */
            uint32            : 5;
      __IOM uint32 FB_MODE    : 1;            /*!< [8..8] Flash bank mode selection                                          */
            uint32            : 1;
      __IOM uint32 SWP_FMC    : 2;            /*!< [11..10] FMC memory mapping swap                                          */
            uint32            : 20;
    } bit;
  } MEMRM;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) peripheral mode configuration register                     */
    
    struct {
            uint32            : 16;
      __IOM uint32 ADC1DC2    : 1;            /*!< [16..16] ADC1DC2                                                          */
      __IOM uint32 ADC2DC2    : 1;            /*!< [17..17] ADC2DC2                                                          */
      __IOM uint32 ADC3DC2    : 1;            /*!< [18..18] ADC3DC2                                                          */
            uint32            : 4;
      __IOM uint32 MII_RMII_SEL : 1;          /*!< [23..23] Ethernet PHY interface selection                                 */
            uint32            : 8;
    } bit;
  } PMC;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) external interrupt configuration register 1                */
    
    struct {
      __IOM uint32 EXTI0      : 4;            /*!< [3..0] EXTI x configuration (x = 0 to 3)                                  */
      __IOM uint32 EXTI1      : 4;            /*!< [7..4] EXTI x configuration (x = 0 to 3)                                  */
      __IOM uint32 EXTI2      : 4;            /*!< [11..8] EXTI x configuration (x = 0 to 3)                                 */
      __IOM uint32 EXTI3      : 4;            /*!< [15..12] EXTI x configuration (x = 0 to 3)                                */
            uint32            : 16;
    } bit;
  } EXTICR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) external interrupt configuration register 2                */
    
    struct {
      __IOM uint32 EXTI4      : 4;            /*!< [3..0] EXTI x configuration (x = 4 to 7)                                  */
      __IOM uint32 EXTI5      : 4;            /*!< [7..4] EXTI x configuration (x = 4 to 7)                                  */
      __IOM uint32 EXTI6      : 4;            /*!< [11..8] EXTI x configuration (x = 4 to 7)                                 */
      __IOM uint32 EXTI7      : 4;            /*!< [15..12] EXTI x configuration (x = 4 to 7)                                */
            uint32            : 16;
    } bit;
  } EXTICR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) external interrupt configuration register 3                */
    
    struct {
      __IOM uint32 EXTI8      : 4;            /*!< [3..0] EXTI x configuration (x = 8 to 11)                                 */
      __IOM uint32 EXTI9      : 4;            /*!< [7..4] EXTI x configuration (x = 8 to 11)                                 */
      __IOM uint32 EXTI10     : 4;            /*!< [11..8] EXTI10                                                            */
      __IOM uint32 EXTI11     : 4;            /*!< [15..12] EXTI x configuration (x = 8 to 11)                               */
            uint32            : 16;
    } bit;
  } EXTICR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) external interrupt configuration register 4                */
    
    struct {
      __IOM uint32 EXTI12     : 4;            /*!< [3..0] EXTI x configuration (x = 12 to 15)                                */
      __IOM uint32 EXTI13     : 4;            /*!< [7..4] EXTI x configuration (x = 12 to 15)                                */
      __IOM uint32 EXTI14     : 4;            /*!< [11..8] EXTI x configuration (x = 12 to 15)                               */
      __IOM uint32 EXTI15     : 4;            /*!< [15..12] EXTI x configuration (x = 12 to 15)                              */
            uint32            : 16;
    } bit;
  } EXTICR4;
  __IM  uint32  RESERVED[2];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000020) Compensation cell control register                         */
    
    struct {
      __IM  uint32 CMP_PD     : 1;            /*!< [0..0] Compensation cell power-down                                       */
            uint32            : 7;
      __IM  uint32 READY      : 1;            /*!< [8..8] READY                                                              */
            uint32            : 23;
    } bit;
  } CMPCR;
} SYSCFG_Type;                                  /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI1)
  */

typedef struct {                                /*!< (@ 0x40013000) SPI1 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CPHA       : 1;            /*!< [0..0] Clock phase                                                        */
      __IOM uint32 CPOL       : 1;            /*!< [1..1] Clock polarity                                                     */
      __IOM uint32 MSTR       : 1;            /*!< [2..2] Master selection                                                   */
      __IOM uint32 BR         : 3;            /*!< [5..3] Baud rate control                                                  */
      __IOM uint32 SPE        : 1;            /*!< [6..6] SPI enable                                                         */
      __IOM uint32 LSBFIRST   : 1;            /*!< [7..7] Frame format                                                       */
      __IOM uint32 SSI        : 1;            /*!< [8..8] Internal slave select                                              */
      __IOM uint32 SSM        : 1;            /*!< [9..9] Software slave management                                          */
      __IOM uint32 RXONLY     : 1;            /*!< [10..10] Receive only                                                     */
      __IOM uint32 CRCL       : 1;            /*!< [11..11] CRC length                                                       */
      __IOM uint32 CRCNEXT    : 1;            /*!< [12..12] CRC transfer next                                                */
      __IOM uint32 CRCEN      : 1;            /*!< [13..13] Hardware CRC calculation enable                                  */
      __IOM uint32 BIDIOE     : 1;            /*!< [14..14] Output enable in bidirectional mode                              */
      __IOM uint32 BIDIMODE   : 1;            /*!< [15..15] Bidirectional data mode enable                                   */
            uint32            : 16;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
      __IOM uint32 RXDMAEN    : 1;            /*!< [0..0] Rx buffer DMA enable                                               */
      __IOM uint32 TXDMAEN    : 1;            /*!< [1..1] Tx buffer DMA enable                                               */
      __IOM uint32 SSOE       : 1;            /*!< [2..2] SS output enable                                                   */
      __IOM uint32 NSSP       : 1;            /*!< [3..3] NSS pulse management                                               */
      __IOM uint32 FRF        : 1;            /*!< [4..4] Frame format                                                       */
      __IOM uint32 ERRIE      : 1;            /*!< [5..5] Error interrupt enable                                             */
      __IOM uint32 RXNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable                               */
      __IOM uint32 TXEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable                                   */
      __IOM uint32 DS         : 4;            /*!< [11..8] Data size                                                         */
      __IOM uint32 FRXTH      : 1;            /*!< [12..12] FIFO reception threshold                                         */
      __IOM uint32 LDMA_RX    : 1;            /*!< [13..13] Last DMA transfer for reception                                  */
      __IOM uint32 LDMA_TX    : 1;            /*!< [14..14] Last DMA transfer for transmission                               */
            uint32            : 17;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) status register                                            */
    
    struct {
      __IM  uint32 RXNE       : 1;            /*!< [0..0] Receive buffer not empty                                           */
      __IM  uint32 TXE        : 1;            /*!< [1..1] Transmit buffer empty                                              */
      __IM  uint32 CHSIDE     : 1;            /*!< [2..2] Channel side                                                       */
      __IM  uint32 UDR        : 1;            /*!< [3..3] Underrun flag                                                      */
      __IOM uint32 CRCERR     : 1;            /*!< [4..4] CRC error flag                                                     */
      __IM  uint32 MODF       : 1;            /*!< [5..5] Mode fault                                                         */
      __IM  uint32 OVR        : 1;            /*!< [6..6] Overrun flag                                                       */
      __IM  uint32 BSY        : 1;            /*!< [7..7] Busy flag                                                          */
      __IM  uint32 FRE        : 1;            /*!< [8..8] Frame format error                                                 */
      __IM  uint32 FRLVL      : 2;            /*!< [10..9] FIFO reception level                                              */
      __IM  uint32 FTLVL      : 2;            /*!< [12..11] FIFO Transmission Level                                          */
            uint32            : 19;
    } bit;
  } SR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) data register                                              */
    
    struct {
      __IOM uint32 DR         : 16;           /*!< [15..0] Data register                                                     */
            uint32            : 16;
    } bit;
  } DR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) CRC polynomial register                                    */
    
    struct {
      __IOM uint32 CRCPOLY    : 16;           /*!< [15..0] CRC polynomial register                                           */
            uint32            : 16;
    } bit;
  } CRCPR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000014) RX CRC register                                            */
    
    struct {
      __IM  uint32 RxCRC      : 16;           /*!< [15..0] Rx CRC register                                                   */
            uint32            : 16;
    } bit;
  } RXCRCR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000018) TX CRC register                                            */
    
    struct {
      __IM  uint32 TxCRC      : 16;           /*!< [15..0] Tx CRC register                                                   */
            uint32            : 16;
    } bit;
  } TXCRCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) I2S configuration register                                 */
    
    struct {
      __IOM uint32 CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel)                  */
      __IOM uint32 DATLEN     : 2;            /*!< [2..1] Data length to be transferred                                      */
      __IOM uint32 CKPOL      : 1;            /*!< [3..3] Steady state clock polarity                                        */
      __IOM uint32 I2SSTD     : 2;            /*!< [5..4] I2S standard selection                                             */
            uint32            : 1;
      __IOM uint32 PCMSYNC    : 1;            /*!< [7..7] PCM frame synchronization                                          */
      __IOM uint32 I2SCFG     : 2;            /*!< [9..8] I2S configuration mode                                             */
      __IOM uint32 I2SE       : 1;            /*!< [10..10] I2S Enable                                                       */
      __IOM uint32 I2SMOD     : 1;            /*!< [11..11] I2S mode selection                                               */
      __IOM uint32 ASTRTEN    : 1;            /*!< [12..12] Asynchronous start enable                                        */
            uint32            : 19;
    } bit;
  } I2SCFGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) I2S prescaler register                                     */
    
    struct {
      __IOM uint32 I2SDIV     : 8;            /*!< [7..0] I2S Linear prescaler                                               */
      __IOM uint32 ODD        : 1;            /*!< [8..8] Odd factor for the prescaler                                       */
      __IOM uint32 MCKOE      : 1;            /*!< [9..9] Master clock output enable                                         */
            uint32            : 22;
    } bit;
  } I2SPR;
} SPI1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI2)
  */

typedef struct {                                /*!< (@ 0x40003800) SPI2 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CPHA       : 1;            /*!< [0..0] Clock phase                                                        */
      __IOM uint32 CPOL       : 1;            /*!< [1..1] Clock polarity                                                     */
      __IOM uint32 MSTR       : 1;            /*!< [2..2] Master selection                                                   */
      __IOM uint32 BR         : 3;            /*!< [5..3] Baud rate control                                                  */
      __IOM uint32 SPE        : 1;            /*!< [6..6] SPI enable                                                         */
      __IOM uint32 LSBFIRST   : 1;            /*!< [7..7] Frame format                                                       */
      __IOM uint32 SSI        : 1;            /*!< [8..8] Internal slave select                                              */
      __IOM uint32 SSM        : 1;            /*!< [9..9] Software slave management                                          */
      __IOM uint32 RXONLY     : 1;            /*!< [10..10] Receive only                                                     */
      __IOM uint32 CRCL       : 1;            /*!< [11..11] CRC length                                                       */
      __IOM uint32 CRCNEXT    : 1;            /*!< [12..12] CRC transfer next                                                */
      __IOM uint32 CRCEN      : 1;            /*!< [13..13] Hardware CRC calculation enable                                  */
      __IOM uint32 BIDIOE     : 1;            /*!< [14..14] Output enable in bidirectional mode                              */
      __IOM uint32 BIDIMODE   : 1;            /*!< [15..15] Bidirectional data mode enable                                   */
            uint32            : 16;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
      __IOM uint32 RXDMAEN    : 1;            /*!< [0..0] Rx buffer DMA enable                                               */
      __IOM uint32 TXDMAEN    : 1;            /*!< [1..1] Tx buffer DMA enable                                               */
      __IOM uint32 SSOE       : 1;            /*!< [2..2] SS output enable                                                   */
      __IOM uint32 NSSP       : 1;            /*!< [3..3] NSS pulse management                                               */
      __IOM uint32 FRF        : 1;            /*!< [4..4] Frame format                                                       */
      __IOM uint32 ERRIE      : 1;            /*!< [5..5] Error interrupt enable                                             */
      __IOM uint32 RXNEIE     : 1;            /*!< [6..6] RX buffer not empty interrupt enable                               */
      __IOM uint32 TXEIE      : 1;            /*!< [7..7] Tx buffer empty interrupt enable                                   */
      __IOM uint32 DS         : 4;            /*!< [11..8] Data size                                                         */
      __IOM uint32 FRXTH      : 1;            /*!< [12..12] FIFO reception threshold                                         */
      __IOM uint32 LDMA_RX    : 1;            /*!< [13..13] Last DMA transfer for reception                                  */
      __IOM uint32 LDMA_TX    : 1;            /*!< [14..14] Last DMA transfer for transmission                               */
            uint32            : 17;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) status register                                            */
    
    struct {
      __IM  uint32 RXNE       : 1;            /*!< [0..0] Receive buffer not empty                                           */
      __IM  uint32 TXE        : 1;            /*!< [1..1] Transmit buffer empty                                              */
      __IM  uint32 CHSIDE     : 1;            /*!< [2..2] Channel side                                                       */
      __IM  uint32 UDR        : 1;            /*!< [3..3] Underrun flag                                                      */
      __IOM uint32 CRCERR     : 1;            /*!< [4..4] CRC error flag                                                     */
      __IM  uint32 MODF       : 1;            /*!< [5..5] Mode fault                                                         */
      __IM  uint32 OVR        : 1;            /*!< [6..6] Overrun flag                                                       */
      __IM  uint32 BSY        : 1;            /*!< [7..7] Busy flag                                                          */
      __IM  uint32 FRE        : 1;            /*!< [8..8] Frame format error                                                 */
      __IM  uint32 FRLVL      : 2;            /*!< [10..9] FIFO reception level                                              */
      __IM  uint32 FTLVL      : 2;            /*!< [12..11] FIFO Transmission Level                                          */
            uint32            : 19;
    } bit;
  } SR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) data register                                              */
    
    struct {
      __IOM uint32 DR         : 16;           /*!< [15..0] Data register                                                     */
            uint32            : 16;
    } bit;
  } DR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) CRC polynomial register                                    */
    
    struct {
      __IOM uint32 CRCPOLY    : 16;           /*!< [15..0] CRC polynomial register                                           */
            uint32            : 16;
    } bit;
  } CRCPR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000014) RX CRC register                                            */
    
    struct {
      __IM  uint32 RxCRC      : 16;           /*!< [15..0] Rx CRC register                                                   */
            uint32            : 16;
    } bit;
  } RXCRCR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000018) TX CRC register                                            */
    
    struct {
      __IM  uint32 TxCRC      : 16;           /*!< [15..0] Tx CRC register                                                   */
            uint32            : 16;
    } bit;
  } TXCRCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) I2S configuration register                                 */
    
    struct {
      __IOM uint32 CHLEN      : 1;            /*!< [0..0] Channel length (number of bits per audio channel)                  */
      __IOM uint32 DATLEN     : 2;            /*!< [2..1] Data length to be transferred                                      */
      __IOM uint32 CKPOL      : 1;            /*!< [3..3] Steady state clock polarity                                        */
      __IOM uint32 I2SSTD     : 2;            /*!< [5..4] I2S standard selection                                             */
            uint32            : 1;
      __IOM uint32 PCMSYNC    : 1;            /*!< [7..7] PCM frame synchronization                                          */
      __IOM uint32 I2SCFG     : 2;            /*!< [9..8] I2S configuration mode                                             */
      __IOM uint32 I2SE       : 1;            /*!< [10..10] I2S Enable                                                       */
      __IOM uint32 I2SMOD     : 1;            /*!< [11..11] I2S mode selection                                               */
      __IOM uint32 ASTRTEN    : 1;            /*!< [12..12] Asynchronous start enable                                        */
            uint32            : 19;
    } bit;
  } I2SCFGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) I2S prescaler register                                     */
    
    struct {
      __IOM uint32 I2SDIV     : 8;            /*!< [7..0] I2S Linear prescaler                                               */
      __IOM uint32 ODD        : 1;            /*!< [8..8] Odd factor for the prescaler                                       */
      __IOM uint32 MCKOE      : 1;            /*!< [9..9] Master clock output enable                                         */
            uint32            : 22;
    } bit;
  } I2SPR;
} SPI2_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           ADC1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog-to-digital converter (ADC1)
  */

typedef struct {                                /*!< (@ 0x40012000) ADC1 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) status register                                            */
    
    struct {
      __IOM uint32 AWD        : 1;            /*!< [0..0] Analog watchdog flag                                               */
      __IOM uint32 EOC        : 1;            /*!< [1..1] Regular channel end of conversion                                  */
      __IOM uint32 JEOC       : 1;            /*!< [2..2] Injected channel end of conversion                                 */
      __IOM uint32 JSTRT      : 1;            /*!< [3..3] Injected channel start flag                                        */
      __IOM uint32 STRT       : 1;            /*!< [4..4] Regular channel start flag                                         */
      __IOM uint32 OVR        : 1;            /*!< [5..5] Overrun                                                            */
            uint32            : 26;
    } bit;
  } SR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) control register 1                                         */
    
    struct {
      __IOM uint32 AWDCH      : 5;            /*!< [4..0] Analog watchdog channel select bits                                */
      __IOM uint32 EOCIE      : 1;            /*!< [5..5] Interrupt enable for EOC                                           */
      __IOM uint32 AWDIE      : 1;            /*!< [6..6] Analog watchdog interrupt enable                                   */
      __IOM uint32 JEOCIE     : 1;            /*!< [7..7] Interrupt enable for injected channels                             */
      __IOM uint32 SCAN       : 1;            /*!< [8..8] Scan mode                                                          */
      __IOM uint32 AWDSGL     : 1;            /*!< [9..9] Enable the watchdog on a single channel in scan mode               */
      __IOM uint32 JAUTO      : 1;            /*!< [10..10] Automatic injected group conversion                              */
      __IOM uint32 DISCEN     : 1;            /*!< [11..11] Discontinuous mode on regular channels                           */
      __IOM uint32 JDISCEN    : 1;            /*!< [12..12] Discontinuous mode on injected channels                          */
      __IOM uint32 DISCNUM    : 3;            /*!< [15..13] Discontinuous mode channel count                                 */
            uint32            : 6;
      __IOM uint32 JAWDEN     : 1;            /*!< [22..22] Analog watchdog enable on injected channels                      */
      __IOM uint32 AWDEN      : 1;            /*!< [23..23] Analog watchdog enable on regular channels                       */
      __IOM uint32 RES        : 2;            /*!< [25..24] Resolution                                                       */
      __IOM uint32 OVRIE      : 1;            /*!< [26..26] Overrun interrupt enable                                         */
            uint32            : 5;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) control register 2                                         */
    
    struct {
      __IOM uint32 ADON       : 1;            /*!< [0..0] A/D Converter ON / OFF                                             */
      __IOM uint32 CONT       : 1;            /*!< [1..1] Continuous conversion                                              */
            uint32            : 6;
      __IOM uint32 DMA        : 1;            /*!< [8..8] Direct memory access mode (for single ADC mode)                    */
      __IOM uint32 DDS        : 1;            /*!< [9..9] DMA disable selection (for single ADC mode)                        */
      __IOM uint32 EOCS       : 1;            /*!< [10..10] End of conversion selection                                      */
      __IOM uint32 ALIGN      : 1;            /*!< [11..11] Data alignment                                                   */
            uint32            : 4;
      __IOM uint32 JEXTSEL    : 4;            /*!< [19..16] External event select for injected group                         */
      __IOM uint32 JEXTEN     : 2;            /*!< [21..20] External trigger enable for injected channels                    */
      __IOM uint32 JSWSTART   : 1;            /*!< [22..22] Start conversion of injected channels                            */
            uint32            : 1;
      __IOM uint32 EXTSEL     : 4;            /*!< [27..24] External event select for regular group                          */
      __IOM uint32 EXTEN      : 2;            /*!< [29..28] External trigger enable for regular channels                     */
      __IOM uint32 SWSTART    : 1;            /*!< [30..30] Start conversion of regular channels                             */
            uint32            : 1;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) sample time register 1                                     */
    
    struct {
      __IOM uint32 SMPx_x     : 32;           /*!< [31..0] Sample time bits                                                  */
    } bit;
  } SMPR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) sample time register 2                                     */
    
    struct {
      __IOM uint32 SMPx_x     : 32;           /*!< [31..0] Sample time bits                                                  */
    } bit;
  } SMPR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) injected channel data offset register x                    */
    
    struct {
      __IOM uint32 JOFFSET1   : 12;           /*!< [11..0] Data offset for injected channel x                                */
            uint32            : 20;
    } bit;
  } JOFR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) injected channel data offset register x                    */
    
    struct {
      __IOM uint32 JOFFSET2   : 12;           /*!< [11..0] Data offset for injected channel x                                */
            uint32            : 20;
    } bit;
  } JOFR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) injected channel data offset register x                    */
    
    struct {
      __IOM uint32 JOFFSET3   : 12;           /*!< [11..0] Data offset for injected channel x                                */
            uint32            : 20;
    } bit;
  } JOFR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) injected channel data offset register x                    */
    
    struct {
      __IOM uint32 JOFFSET4   : 12;           /*!< [11..0] Data offset for injected channel x                                */
            uint32            : 20;
    } bit;
  } JOFR4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) watchdog higher threshold register                         */
    
    struct {
      __IOM uint32 HT         : 12;           /*!< [11..0] Analog watchdog higher threshold                                  */
            uint32            : 20;
    } bit;
  } HTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) watchdog lower threshold register                          */
    
    struct {
      __IOM uint32 LT         : 12;           /*!< [11..0] Analog watchdog lower threshold                                   */
            uint32            : 20;
    } bit;
  } LTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) regular sequence register 1                                */
    
    struct {
      __IOM uint32 SQ13       : 5;            /*!< [4..0] 13th conversion in regular sequence                                */
      __IOM uint32 SQ14       : 5;            /*!< [9..5] 14th conversion in regular sequence                                */
      __IOM uint32 SQ15       : 5;            /*!< [14..10] 15th conversion in regular sequence                              */
      __IOM uint32 SQ16       : 5;            /*!< [19..15] 16th conversion in regular sequence                              */
      __IOM uint32 L          : 4;            /*!< [23..20] Regular channel sequence length                                  */
            uint32            : 8;
    } bit;
  } SQR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) regular sequence register 2                                */
    
    struct {
      __IOM uint32 SQ7        : 5;            /*!< [4..0] 7th conversion in regular sequence                                 */
      __IOM uint32 SQ8        : 5;            /*!< [9..5] 8th conversion in regular sequence                                 */
      __IOM uint32 SQ9        : 5;            /*!< [14..10] 9th conversion in regular sequence                               */
      __IOM uint32 SQ10       : 5;            /*!< [19..15] 10th conversion in regular sequence                              */
      __IOM uint32 SQ11       : 5;            /*!< [24..20] 11th conversion in regular sequence                              */
      __IOM uint32 SQ12       : 5;            /*!< [29..25] 12th conversion in regular sequence                              */
            uint32            : 2;
    } bit;
  } SQR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) regular sequence register 3                                */
    
    struct {
      __IOM uint32 SQ1        : 5;            /*!< [4..0] 1st conversion in regular sequence                                 */
      __IOM uint32 SQ2        : 5;            /*!< [9..5] 2nd conversion in regular sequence                                 */
      __IOM uint32 SQ3        : 5;            /*!< [14..10] 3rd conversion in regular sequence                               */
      __IOM uint32 SQ4        : 5;            /*!< [19..15] 4th conversion in regular sequence                               */
      __IOM uint32 SQ5        : 5;            /*!< [24..20] 5th conversion in regular sequence                               */
      __IOM uint32 SQ6        : 5;            /*!< [29..25] 6th conversion in regular sequence                               */
            uint32            : 2;
    } bit;
  } SQR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) injected sequence register                                 */
    
    struct {
      __IOM uint32 JSQ1       : 5;            /*!< [4..0] 1st conversion in injected sequence                                */
      __IOM uint32 JSQ2       : 5;            /*!< [9..5] 2nd conversion in injected sequence                                */
      __IOM uint32 JSQ3       : 5;            /*!< [14..10] 3rd conversion in injected sequence                              */
      __IOM uint32 JSQ4       : 5;            /*!< [19..15] 4th conversion in injected sequence                              */
      __IOM uint32 JL         : 2;            /*!< [21..20] Injected sequence length                                         */
            uint32            : 10;
    } bit;
  } JSQR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000003C) injected data register x                                   */
    
    struct {
      __IM  uint32 JDATA      : 16;           /*!< [15..0] Injected data                                                     */
            uint32            : 16;
    } bit;
  } JDR1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000040) injected data register x                                   */
    
    struct {
      __IM  uint32 JDATA      : 16;           /*!< [15..0] Injected data                                                     */
            uint32            : 16;
    } bit;
  } JDR2;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000044) injected data register x                                   */
    
    struct {
      __IM  uint32 JDATA      : 16;           /*!< [15..0] Injected data                                                     */
            uint32            : 16;
    } bit;
  } JDR3;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000048) injected data register x                                   */
    
    struct {
      __IM  uint32 JDATA      : 16;           /*!< [15..0] Injected data                                                     */
            uint32            : 16;
    } bit;
  } JDR4;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000004C) regular data register                                      */
    
    struct {
      __IM  uint32 DATA       : 16;           /*!< [15..0] Regular data                                                      */
            uint32            : 16;
    } bit;
  } DR;
} ADC1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital-to-analog converter (DAC)
  */

typedef struct {                                /*!< (@ 0x40007400) DAC Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register                                           */
    
    struct {
      __IOM uint32 EN1        : 1;            /*!< [0..0] DAC channel1 enable                                                */
      __IOM uint32 BOFF1      : 1;            /*!< [1..1] DAC channel1 output buffer disable                                 */
      __IOM uint32 TEN1       : 1;            /*!< [2..2] DAC channel1 trigger enable                                        */
      __IOM uint32 TSEL1      : 3;            /*!< [5..3] DAC channel1 trigger selection                                     */
      __IOM uint32 WAVE1      : 2;            /*!< [7..6] DAC channel1 noise/triangle wave generation enable                 */
      __IOM uint32 MAMP1      : 4;            /*!< [11..8] DAC channel1 mask/amplitude selector                              */
      __IOM uint32 DMAEN1     : 1;            /*!< [12..12] DAC channel1 DMA enable                                          */
      __IOM uint32 DMAUDRIE1  : 1;            /*!< [13..13] DAC channel1 DMA Underrun Interrupt enable                       */
            uint32            : 2;
      __IOM uint32 EN2        : 1;            /*!< [16..16] DAC channel2 enable                                              */
      __IOM uint32 BOFF2      : 1;            /*!< [17..17] DAC channel2 output buffer disable                               */
      __IOM uint32 TEN2       : 1;            /*!< [18..18] DAC channel2 trigger enable                                      */
      __IOM uint32 TSEL2      : 3;            /*!< [21..19] DAC channel2 trigger selection                                   */
      __IOM uint32 WAVE2      : 2;            /*!< [23..22] DAC channel2 noise/triangle wave generation enable               */
      __IOM uint32 MAMP2      : 4;            /*!< [27..24] DAC channel2 mask/amplitude selector                             */
      __IOM uint32 DMAEN2     : 1;            /*!< [28..28] DAC channel2 DMA enable                                          */
      __IOM uint32 DMAUDRIE2  : 1;            /*!< [29..29] DAC channel2 DMA underrun interrupt enable                       */
            uint32            : 2;
    } bit;
  } CR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000004) software trigger register                                  */
    
    struct {
      __OM  uint32 SWTRIG1    : 1;            /*!< [0..0] DAC channel1 software trigger                                      */
      __OM  uint32 SWTRIG2    : 1;            /*!< [1..1] DAC channel2 software trigger                                      */
            uint32            : 30;
    } bit;
  } SWTRIGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) channel1 12-bit right-aligned data holding register        */
    
    struct {
      __IOM uint32 DACC1DHR   : 12;           /*!< [11..0] DAC channel1 12-bit right-aligned data                            */
            uint32            : 20;
    } bit;
  } DHR12R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) channel1 12-bit left aligned data holding register         */
    
    struct {
            uint32            : 4;
      __IOM uint32 DACC1DHR   : 12;           /*!< [15..4] DAC channel1 12-bit left-aligned data                             */
            uint32            : 16;
    } bit;
  } DHR12L1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) channel1 8-bit right aligned data holding register         */
    
    struct {
      __IOM uint32 DACC1DHR   : 8;            /*!< [7..0] DAC channel1 8-bit right-aligned data                              */
            uint32            : 24;
    } bit;
  } DHR8R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) channel2 12-bit right aligned data holding register        */
    
    struct {
      __IOM uint32 DACC2DHR   : 12;           /*!< [11..0] DAC channel2 12-bit right-aligned data                            */
            uint32            : 20;
    } bit;
  } DHR12R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) channel2 12-bit left aligned data holding register         */
    
    struct {
            uint32            : 4;
      __IOM uint32 DACC2DHR   : 12;           /*!< [15..4] DAC channel2 12-bit left-aligned data                             */
            uint32            : 16;
    } bit;
  } DHR12L2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) channel2 8-bit right-aligned data holding register         */
    
    struct {
      __IOM uint32 DACC2DHR   : 8;            /*!< [7..0] DAC channel2 8-bit right-aligned data                              */
            uint32            : 24;
    } bit;
  } DHR8R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) Dual DAC 12-bit right-aligned data holding register        */
    
    struct {
      __IOM uint32 DACC1DHR   : 12;           /*!< [11..0] DAC channel1 12-bit right-aligned data                            */
            uint32            : 4;
      __IOM uint32 DACC2DHR   : 12;           /*!< [27..16] DAC channel2 12-bit right-aligned data                           */
            uint32            : 4;
    } bit;
  } DHR12RD;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) DUAL DAC 12-bit left aligned data holding register         */
    
    struct {
            uint32            : 4;
      __IOM uint32 DACC1DHR   : 12;           /*!< [15..4] DAC channel1 12-bit left-aligned data                             */
            uint32            : 4;
      __IOM uint32 DACC2DHR   : 12;           /*!< [31..20] DAC channel2 12-bit left-aligned data                            */
    } bit;
  } DHR12LD;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) DUAL DAC 8-bit right aligned data holding register         */
    
    struct {
      __IOM uint32 DACC1DHR   : 8;            /*!< [7..0] DAC channel1 8-bit right-aligned data                              */
      __IOM uint32 DACC2DHR   : 8;            /*!< [15..8] DAC channel2 8-bit right-aligned data                             */
            uint32            : 16;
    } bit;
  } DHR8RD;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000002C) channel1 data output register                              */
    
    struct {
      __IM  uint32 DACC1DOR   : 12;           /*!< [11..0] DAC channel1 data output                                          */
            uint32            : 20;
    } bit;
  } DOR1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000030) channel2 data output register                              */
    
    struct {
      __IM  uint32 DACC2DOR   : 12;           /*!< [11..0] DAC channel2 data output                                          */
            uint32            : 20;
    } bit;
  } DOR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) status register                                            */
    
    struct {
            uint32            : 13;
      __IOM uint32 DMAUDR1    : 1;            /*!< [13..13] DAC channel1 DMA underrun flag                                   */
            uint32            : 15;
      __IOM uint32 DMAUDR2    : 1;            /*!< [29..29] DAC channel2 DMA underrun flag                                   */
            uint32            : 2;
    } bit;
  } SR;
} DAC_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (PWR)
  */

typedef struct {                                /*!< (@ 0x40007000) PWR Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) power control register                                     */
    
    struct {
      __IOM uint32 LPDS       : 1;            /*!< [0..0] Low-power deep sleep                                               */
      __IOM uint32 PDDS       : 1;            /*!< [1..1] Power down deepsleep                                               */
            uint32            : 1;
      __IOM uint32 CSBF       : 1;            /*!< [3..3] Clear standby flag                                                 */
      __IOM uint32 PVDE       : 1;            /*!< [4..4] Power voltage detector enable                                      */
      __IOM uint32 PLS        : 3;            /*!< [7..5] PVD level selection                                                */
      __IOM uint32 DBP        : 1;            /*!< [8..8] Disable backup domain write protection                             */
      __IOM uint32 FPDS       : 1;            /*!< [9..9] Flash power down in Stop mode                                      */
      __IOM uint32 LPUDS      : 1;            /*!< [10..10] Low-power regulator in deepsleep under-drive mode                */
      __IOM uint32 MRUDS      : 1;            /*!< [11..11] Main regulator in deepsleep under-drive mode                     */
            uint32            : 1;
      __IOM uint32 ADCDC1     : 1;            /*!< [13..13] ADCDC1                                                           */
      __IOM uint32 VOS        : 2;            /*!< [15..14] Regulator voltage scaling output selection                       */
      __IOM uint32 ODEN       : 1;            /*!< [16..16] Over-drive enable                                                */
      __IOM uint32 ODSWEN     : 1;            /*!< [17..17] Over-drive switching enabled                                     */
      __IOM uint32 UDEN       : 2;            /*!< [19..18] Under-drive enable in stop mode                                  */
            uint32            : 12;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) power control/status register                              */
    
    struct {
      __IM  uint32 WUIF       : 1;            /*!< [0..0] Wakeup internal flag                                               */
      __IM  uint32 SBF        : 1;            /*!< [1..1] Standby flag                                                       */
      __IM  uint32 PVDO       : 1;            /*!< [2..2] PVD output                                                         */
      __IM  uint32 BRR        : 1;            /*!< [3..3] Backup regulator ready                                             */
            uint32            : 5;
      __IOM uint32 BRE        : 1;            /*!< [9..9] Backup regulator enable                                            */
            uint32            : 4;
      __IOM uint32 VOSRDY     : 1;            /*!< [14..14] Regulator voltage scaling output selection ready bit             */
            uint32            : 1;
      __IOM uint32 ODRDY      : 1;            /*!< [16..16] Over-drive mode ready                                            */
      __IOM uint32 ODSWRDY    : 1;            /*!< [17..17] Over-drive mode switching ready                                  */
      __IOM uint32 UDRDY      : 2;            /*!< [19..18] Under-drive ready flag                                           */
            uint32            : 12;
    } bit;
  } CSR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) power control register                                     */
    
    struct {
      __IM  uint32 CWUPF1     : 1;            /*!< [0..0] Clear Wakeup Pin flag for PA0                                      */
      __IM  uint32 CWUPF2     : 1;            /*!< [1..1] Clear Wakeup Pin flag for PA2                                      */
      __IM  uint32 CWUPF3     : 1;            /*!< [2..2] Clear Wakeup Pin flag for PC1                                      */
      __IM  uint32 CWUPF4     : 1;            /*!< [3..3] Clear Wakeup Pin flag for PC13                                     */
      __IM  uint32 CWUPF5     : 1;            /*!< [4..4] Clear Wakeup Pin flag for PI8                                      */
      __IM  uint32 CWUPF6     : 1;            /*!< [5..5] Clear Wakeup Pin flag for PI11                                     */
            uint32            : 2;
      __IOM uint32 WUPP1      : 1;            /*!< [8..8] Wakeup pin polarity bit for PA0                                    */
      __IOM uint32 WUPP2      : 1;            /*!< [9..9] Wakeup pin polarity bit for PA2                                    */
      __IOM uint32 WUPP3      : 1;            /*!< [10..10] Wakeup pin polarity bit for PC1                                  */
      __IOM uint32 WUPP4      : 1;            /*!< [11..11] Wakeup pin polarity bit for PC13                                 */
      __IOM uint32 WUPP5      : 1;            /*!< [12..12] Wakeup pin polarity bit for PI8                                  */
      __IOM uint32 WUPP6      : 1;            /*!< [13..13] Wakeup pin polarity bit for PI11                                 */
            uint32            : 18;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) power control/status register                              */
    
    struct {
      __IM  uint32 WUPF1      : 1;            /*!< [0..0] Wakeup Pin flag for PA0                                            */
      __IM  uint32 WUPF2      : 1;            /*!< [1..1] Wakeup Pin flag for PA2                                            */
      __IM  uint32 WUPF3      : 1;            /*!< [2..2] Wakeup Pin flag for PC1                                            */
      __IM  uint32 WUPF4      : 1;            /*!< [3..3] Wakeup Pin flag for PC13                                           */
      __IM  uint32 WUPF5      : 1;            /*!< [4..4] Wakeup Pin flag for PI8                                            */
      __IM  uint32 WUPF6      : 1;            /*!< [5..5] Wakeup Pin flag for PI11                                           */
            uint32            : 2;
      __IOM uint32 EWUP1      : 1;            /*!< [8..8] Enable Wakeup pin for PA0                                          */
      __IOM uint32 EWUP2      : 1;            /*!< [9..9] Enable Wakeup pin for PA2                                          */
      __IOM uint32 EWUP3      : 1;            /*!< [10..10] Enable Wakeup pin for PC1                                        */
      __IOM uint32 EWUP4      : 1;            /*!< [11..11] Enable Wakeup pin for PC13                                       */
      __IOM uint32 EWUP5      : 1;            /*!< [12..12] Enable Wakeup pin for PI8                                        */
      __IOM uint32 EWUP6      : 1;            /*!< [13..13] Enable Wakeup pin for PI11                                       */
            uint32            : 18;
    } bit;
  } CSR2;
} PWR_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           IWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent watchdog (IWDG)
  */

typedef struct {                                /*!< (@ 0x40003000) IWDG Structure                                             */
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000000) Key register                                               */
    
    struct {
      __OM  uint32 KEY        : 16;           /*!< [15..0] Key value (write only, read 0000h)                                */
            uint32            : 16;
    } bit;
  } KR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Prescaler register                                         */
    
    struct {
      __IOM uint32 PR         : 3;            /*!< [2..0] Prescaler divider                                                  */
            uint32            : 29;
    } bit;
  } PR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Reload register                                            */
    
    struct {
      __IOM uint32 RL         : 12;           /*!< [11..0] Watchdog counter reload value                                     */
            uint32            : 20;
    } bit;
  } RLR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000000C) Status register                                            */
    
    struct {
      __IM  uint32 PVU        : 1;            /*!< [0..0] Watchdog prescaler value update                                    */
      __IM  uint32 RVU        : 1;            /*!< [1..1] Watchdog counter reload value update                               */
            uint32            : 30;
    } bit;
  } SR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Window register                                            */
    
    struct {
      __IOM uint32 WIN        : 12;           /*!< [11..0] Watchdog counter window value                                     */
            uint32            : 20;
    } bit;
  } WINR;
} IWDG_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           WWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Window watchdog (WWDG)
  */

typedef struct {                                /*!< (@ 0x40002C00) WWDG Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Control register                                           */
    
    struct {
      __IOM uint32 T          : 7;            /*!< [6..0] 7-bit counter (MSB to LSB)                                         */
      __IOM uint32 WDGA       : 1;            /*!< [7..7] Activation bit                                                     */
            uint32            : 24;
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Configuration register                                     */
    
    struct {
      __IOM uint32 W          : 7;            /*!< [6..0] 7-bit window value                                                 */
      __IOM uint32 WDGTB0     : 1;            /*!< [7..7] Timer base                                                         */
      __IOM uint32 WDGTB1     : 1;            /*!< [8..8] Timer base                                                         */
      __IOM uint32 EWI        : 1;            /*!< [9..9] Early wakeup interrupt                                             */
            uint32            : 22;
    } bit;
  } CFR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Status register                                            */
    
    struct {
      __IOM uint32 EWIF       : 1;            /*!< [0..0] Early wakeup interrupt flag                                        */
            uint32            : 31;
    } bit;
  } SR;
} WWDG_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           C_ADC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Common ADC registers (C_ADC)
  */

typedef struct {                                /*!< (@ 0x40012300) C_ADC Structure                                            */
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000000) ADC Common status register                                 */
    
    struct {
      __IM  uint32 AWD1       : 1;            /*!< [0..0] Analog watchdog flag of ADC 1                                      */
      __IM  uint32 EOC1       : 1;            /*!< [1..1] End of conversion of ADC 1                                         */
      __IM  uint32 JEOC1      : 1;            /*!< [2..2] Injected channel end of conversion of ADC 1                        */
      __IM  uint32 JSTRT1     : 1;            /*!< [3..3] Injected channel Start flag of ADC 1                               */
      __IM  uint32 STRT1      : 1;            /*!< [4..4] Regular channel Start flag of ADC 1                                */
      __IM  uint32 OVR1       : 1;            /*!< [5..5] Overrun flag of ADC 1                                              */
            uint32            : 2;
      __IM  uint32 AWD2       : 1;            /*!< [8..8] Analog watchdog flag of ADC 2                                      */
      __IM  uint32 EOC2       : 1;            /*!< [9..9] End of conversion of ADC 2                                         */
      __IM  uint32 JEOC2      : 1;            /*!< [10..10] Injected channel end of conversion of ADC 2                      */
      __IM  uint32 JSTRT2     : 1;            /*!< [11..11] Injected channel Start flag of ADC 2                             */
      __IM  uint32 STRT2      : 1;            /*!< [12..12] Regular channel Start flag of ADC 2                              */
      __IM  uint32 OVR2       : 1;            /*!< [13..13] Overrun flag of ADC 2                                            */
            uint32            : 2;
      __IM  uint32 AWD3       : 1;            /*!< [16..16] Analog watchdog flag of ADC 3                                    */
      __IM  uint32 EOC3       : 1;            /*!< [17..17] End of conversion of ADC 3                                       */
      __IM  uint32 JEOC3      : 1;            /*!< [18..18] Injected channel end of conversion of ADC 3                      */
      __IM  uint32 JSTRT3     : 1;            /*!< [19..19] Injected channel Start flag of ADC 3                             */
      __IM  uint32 STRT3      : 1;            /*!< [20..20] Regular channel Start flag of ADC 3                              */
      __IM  uint32 OVR3       : 1;            /*!< [21..21] Overrun flag of ADC3                                             */
            uint32            : 10;
    } bit;
  } CSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) ADC common control register                                */
    
    struct {
      __IOM uint32 MULT       : 5;            /*!< [4..0] Multi ADC mode selection                                           */
            uint32            : 3;
      __IOM uint32 DELAY      : 4;            /*!< [11..8] Delay between 2 sampling phases                                   */
            uint32            : 1;
      __IOM uint32 DDS        : 1;            /*!< [13..13] DMA disable selection for multi-ADC mode                         */
      __IOM uint32 DMA        : 2;            /*!< [15..14] Direct memory access mode for multi ADC mode                     */
      __IOM uint32 ADCPRE     : 2;            /*!< [17..16] ADC prescaler                                                    */
            uint32            : 4;
      __IOM uint32 VBATE      : 1;            /*!< [22..22] VBAT enable                                                      */
      __IOM uint32 TSVREFE    : 1;            /*!< [23..23] Temperature sensor and VREFINT enable                            */
            uint32            : 8;
    } bit;
  } CCR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) ADC common regular data register for dual and
                                                                    triple modes                                               */
    
    struct {
      __IM  uint32 DATA1      : 16;           /*!< [15..0] 1st data item of a pair of regular conversions                    */
      __IM  uint32 DATA2      : 16;           /*!< [31..16] 2nd data item of a pair of regular conversions                   */
    } bit;
  } CDR;
} C_ADC_Type;                                   /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           TIM1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced-timers (TIM1)
  */

typedef struct {                                /*!< (@ 0x40010000) TIM1 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32 UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32 URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32 OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
      __IOM uint32 DIR        : 1;            /*!< [4..4] Direction                                                          */
      __IOM uint32 CMS        : 2;            /*!< [6..5] Center-aligned mode selection                                      */
      __IOM uint32 ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32 CKD        : 2;            /*!< [9..8] Clock division                                                     */
            uint32            : 22;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
      __IOM uint32 CCPC       : 1;            /*!< [0..0] Capture/compare preloaded control                                  */
            uint32            : 1;
      __IOM uint32 CCUS       : 1;            /*!< [2..2] Capture/compare control update selection                           */
      __IOM uint32 CCDS       : 1;            /*!< [3..3] Capture/compare DMA selection                                      */
      __IOM uint32 MMS        : 3;            /*!< [6..4] Master mode selection                                              */
      __IOM uint32 TI1S       : 1;            /*!< [7..7] TI1 selection                                                      */
      __IOM uint32 OIS1       : 1;            /*!< [8..8] Output Idle state 1                                                */
      __IOM uint32 OIS1N      : 1;            /*!< [9..9] Output Idle state 1                                                */
      __IOM uint32 OIS2       : 1;            /*!< [10..10] Output Idle state 2                                              */
      __IOM uint32 OIS2N      : 1;            /*!< [11..11] Output Idle state 2                                              */
      __IOM uint32 OIS3       : 1;            /*!< [12..12] Output Idle state 3                                              */
      __IOM uint32 OIS3N      : 1;            /*!< [13..13] Output Idle state 3                                              */
      __IOM uint32 OIS4       : 1;            /*!< [14..14] Output Idle state 4                                              */
            uint32            : 17;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) slave mode control register                                */
    
    struct {
      __IOM uint32 SMS        : 3;            /*!< [2..0] Slave mode selection - bit[2:0]                                    */
            uint32            : 1;
      __IOM uint32 TS         : 3;            /*!< [6..4] Trigger selection                                                  */
      __IOM uint32 MSM        : 1;            /*!< [7..7] Master/Slave mode                                                  */
      __IOM uint32 ETF        : 4;            /*!< [11..8] External trigger filter                                           */
      __IOM uint32 ETPS       : 2;            /*!< [13..12] External trigger prescaler                                       */
      __IOM uint32 ECE        : 1;            /*!< [14..14] External clock enable                                            */
      __IOM uint32 ETP        : 1;            /*!< [15..15] External trigger polarity                                        */
      __IOM uint32 SMS_3      : 1;            /*!< [16..16] Slave model selection - bit[3]                                   */
            uint32            : 15;
    } bit;
  } SMCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32 UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32 CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
      __IOM uint32 CC2IE      : 1;            /*!< [2..2] Capture/Compare 2 interrupt enable                                 */
      __IOM uint32 CC3IE      : 1;            /*!< [3..3] Capture/Compare 3 interrupt enable                                 */
      __IOM uint32 CC4IE      : 1;            /*!< [4..4] Capture/Compare 4 interrupt enable                                 */
      __IOM uint32 COMIE      : 1;            /*!< [5..5] COM interrupt enable                                               */
      __IOM uint32 TIE        : 1;            /*!< [6..6] Trigger interrupt enable                                           */
      __IOM uint32 BIE        : 1;            /*!< [7..7] Break interrupt enable                                             */
      __IOM uint32 UDE        : 1;            /*!< [8..8] Update DMA request enable                                          */
      __IOM uint32 CC1DE      : 1;            /*!< [9..9] Capture/Compare 1 DMA request enable                               */
      __IOM uint32 CC2DE      : 1;            /*!< [10..10] Capture/Compare 2 DMA request enable                             */
      __IOM uint32 CC3DE      : 1;            /*!< [11..11] Capture/Compare 3 DMA request enable                             */
      __IOM uint32 CC4DE      : 1;            /*!< [12..12] Capture/Compare 4 DMA request enable                             */
      __IOM uint32 COMDE      : 1;            /*!< [13..13] COM DMA request enable                                           */
      __IOM uint32 TDE        : 1;            /*!< [14..14] Trigger DMA request enable                                       */
            uint32            : 17;
    } bit;
  } DIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32 UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32 CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IOM uint32 CC2IF      : 1;            /*!< [2..2] Capture/Compare 2 interrupt flag                                   */
      __IOM uint32 CC3IF      : 1;            /*!< [3..3] Capture/Compare 3 interrupt flag                                   */
      __IOM uint32 CC4IF      : 1;            /*!< [4..4] Capture/Compare 4 interrupt flag                                   */
      __IOM uint32 COMIF      : 1;            /*!< [5..5] COM interrupt flag                                                 */
      __IOM uint32 TIF        : 1;            /*!< [6..6] Trigger interrupt flag                                             */
      __IOM uint32 BIF        : 1;            /*!< [7..7] Break interrupt flag                                               */
            uint32            : 1;
      __IOM uint32 CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
      __IOM uint32 CC2OF      : 1;            /*!< [10..10] Capture/compare 2 overcapture flag                               */
      __IOM uint32 CC3OF      : 1;            /*!< [11..11] Capture/Compare 3 overcapture flag                               */
      __IOM uint32 CC4OF      : 1;            /*!< [12..12] Capture/Compare 4 overcapture flag                               */
            uint32            : 19;
    } bit;
  } SR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32 UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32 CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
      __OM  uint32 CC2G       : 1;            /*!< [2..2] Capture/compare 2 generation                                       */
      __OM  uint32 CC3G       : 1;            /*!< [3..3] Capture/compare 3 generation                                       */
      __OM  uint32 CC4G       : 1;            /*!< [4..4] Capture/compare 4 generation                                       */
      __OM  uint32 COMG       : 1;            /*!< [5..5] Capture/Compare control update generation                          */
      __OM  uint32 TG         : 1;            /*!< [6..6] Trigger generation                                                 */
      __OM  uint32 BG         : 1;            /*!< [7..7] Break generation                                                   */
            uint32            : 24;
    } bit;
  } EGR;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 OC1FE    : 1;            /*!< [2..2] Output Compare 1 fast enable                                       */
        __IOM uint32 OC1PE    : 1;            /*!< [3..3] Output Compare 1 preload enable                                    */
        __IOM uint32 OC1M     : 3;            /*!< [6..4] Output Compare 1 mode                                              */
        __IOM uint32 OC1CE    : 1;            /*!< [7..7] Output Compare 1 clear enable                                      */
        __IOM uint32 CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32 OC2FE    : 1;            /*!< [10..10] Output Compare 2 fast enable                                     */
        __IOM uint32 OC2PE    : 1;            /*!< [11..11] Output Compare 2 preload enable                                  */
        __IOM uint32 OC2M     : 3;            /*!< [14..12] Output Compare 2 mode                                            */
        __IOM uint32 OC2CE    : 1;            /*!< [15..15] Output Compare 2 clear enable                                    */
              uint32          : 16;
      } bit;
    } CCMR1_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 ICPCS    : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32 IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
        __IOM uint32 CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32 IC2PCS   : 2;            /*!< [11..10] Input capture 2 prescaler                                        */
        __IOM uint32 IC2F     : 4;            /*!< [15..12] Input capture 2 filter                                           */
              uint32          : 16;
      } bit;
    } CCMR1_Input;
  };
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
      
      struct {
        __IOM uint32 CC3S     : 2;            /*!< [1..0] Capture/Compare 3 selection                                        */
        __IOM uint32 OC3FE    : 1;            /*!< [2..2] Output compare 3 fast enable                                       */
        __IOM uint32 OC3PE    : 1;            /*!< [3..3] Output compare 3 preload enable                                    */
        __IOM uint32 OC3M     : 3;            /*!< [6..4] Output compare 3 mode                                              */
        __IOM uint32 OC3CE    : 1;            /*!< [7..7] Output compare 3 clear enable                                      */
        __IOM uint32 CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32 OC4FE    : 1;            /*!< [10..10] Output compare 4 fast enable                                     */
        __IOM uint32 OC4PE    : 1;            /*!< [11..11] Output compare 4 preload enable                                  */
        __IOM uint32 OC4M     : 3;            /*!< [14..12] Output compare 4 mode                                            */
        __IOM uint32 OC4CE    : 1;            /*!< [15..15] Output compare 4 clear enable                                    */
              uint32          : 16;
      } bit;
    } CCMR2_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
      
      struct {
        __IOM uint32 CC3S     : 2;            /*!< [1..0] Capture/compare 3 selection                                        */
        __IOM uint32 IC3PSC   : 2;            /*!< [3..2] Input capture 3 prescaler                                          */
        __IOM uint32 IC3F     : 4;            /*!< [7..4] Input capture 3 filter                                             */
        __IOM uint32 CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32 IC4PSC   : 2;            /*!< [11..10] Input capture 4 prescaler                                        */
        __IOM uint32 IC4F     : 4;            /*!< [15..12] Input capture 4 filter                                           */
              uint32          : 16;
      } bit;
    } CCMR2_Input;
  };
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32 CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32 CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
      __IOM uint32 CC1NE      : 1;            /*!< [2..2] Capture/Compare 1 complementary output enable                      */
      __IOM uint32 CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
      __IOM uint32 CC2E       : 1;            /*!< [4..4] Capture/Compare 2 output enable                                    */
      __IOM uint32 CC2P       : 1;            /*!< [5..5] Capture/Compare 2 output Polarity                                  */
      __IOM uint32 CC2NE      : 1;            /*!< [6..6] Capture/Compare 2 complementary output enable                      */
      __IOM uint32 CC2NP      : 1;            /*!< [7..7] Capture/Compare 2 output Polarity                                  */
      __IOM uint32 CC3E       : 1;            /*!< [8..8] Capture/Compare 3 output enable                                    */
      __IOM uint32 CC3P       : 1;            /*!< [9..9] Capture/Compare 3 output Polarity                                  */
      __IOM uint32 CC3NE      : 1;            /*!< [10..10] Capture/Compare 3 complementary output enable                    */
      __IOM uint32 CC3NP      : 1;            /*!< [11..11] Capture/Compare 3 output Polarity                                */
      __IOM uint32 CC4E       : 1;            /*!< [12..12] Capture/Compare 4 output enable                                  */
      __IOM uint32 CC4P       : 1;            /*!< [13..13] Capture/Compare 3 output Polarity                                */
            uint32            : 18;
    } bit;
  } CCER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32 CNT        : 16;           /*!< [15..0] counter value                                                     */
            uint32            : 16;
    } bit;
  } CNT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32 PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
            uint32            : 16;
    } bit;
  } PSC;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32 ARR        : 16;           /*!< [15..0] Auto-reload value                                                 */
            uint32            : 16;
    } bit;
  } ARR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) repetition counter register                                */
    
    struct {
      __IOM uint32 REP        : 8;            /*!< [7..0] Repetition counter value                                           */
            uint32            : 24;
    } bit;
  } RCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32 CCR1       : 16;           /*!< [15..0] Capture/Compare 1 value                                           */
            uint32            : 16;
    } bit;
  } CCR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
    
    struct {
      __IOM uint32 CCR2       : 16;           /*!< [15..0] Capture/Compare 2 value                                           */
            uint32            : 16;
    } bit;
  } CCR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
    
    struct {
      __IOM uint32 CCR3       : 16;           /*!< [15..0] Capture/Compare value                                             */
            uint32            : 16;
    } bit;
  } CCR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
    
    struct {
      __IOM uint32 CCR4       : 16;           /*!< [15..0] Capture/Compare value                                             */
            uint32            : 16;
    } bit;
  } CCR4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000044) break and dead-time register                               */
    
    struct {
      __IOM uint32 DTG        : 8;            /*!< [7..0] Dead-time generator setup                                          */
      __IOM uint32 LOCK       : 2;            /*!< [9..8] Lock configuration                                                 */
      __IOM uint32 OSSI       : 1;            /*!< [10..10] Off-state selection for Idle mode                                */
      __IOM uint32 OSSR       : 1;            /*!< [11..11] Off-state selection for Run mode                                 */
      __IOM uint32 BKE        : 1;            /*!< [12..12] Break enable                                                     */
      __IOM uint32 BKP        : 1;            /*!< [13..13] Break polarity                                                   */
      __IOM uint32 AOE        : 1;            /*!< [14..14] Automatic output enable                                          */
      __IOM uint32 MOE        : 1;            /*!< [15..15] Main output enable                                               */
            uint32            : 16;
    } bit;
  } BDTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) DMA control register                                       */
    
    struct {
      __IOM uint32 DBA        : 5;            /*!< [4..0] DMA base address                                                   */
            uint32            : 3;
      __IOM uint32 DBL        : 5;            /*!< [12..8] DMA burst length                                                  */
            uint32            : 19;
    } bit;
  } DCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
    
    struct {
      __IOM uint32 DMAB       : 16;           /*!< [15..0] DMA register for burst accesses                                   */
            uint32            : 16;
    } bit;
  } DMAR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000054) capture/compare mode register 3 (output mode)              */
    
    struct {
            uint32            : 2;
      __IOM uint32 OC5FE      : 1;            /*!< [2..2] Output compare 5 fast enable                                       */
      __IOM uint32 OC5PE      : 1;            /*!< [3..3] Output compare 5 preload enable                                    */
      __IOM uint32 OC5M       : 3;            /*!< [6..4] Output compare 5 mode                                              */
      __IOM uint32 OC5CE      : 1;            /*!< [7..7] Output compare 5 clear enable                                      */
            uint32            : 2;
      __IOM uint32 OC6FE      : 1;            /*!< [10..10] Output compare 6 fast enable                                     */
      __IOM uint32 OC6PE      : 1;            /*!< [11..11] Output compare 6 preload enable                                  */
      __IOM uint32 OC6M       : 3;            /*!< [14..12] Output compare 6 mode                                            */
      __IOM uint32 OC6CE      : 1;            /*!< [15..15] Output compare 6 clear enable                                    */
      __IOM uint32 OC5M3      : 1;            /*!< [16..16] Output Compare 5 mode                                            */
            uint32            : 7;
      __IOM uint32 OC6M3      : 1;            /*!< [24..24] Output Compare 6 mode                                            */
            uint32            : 7;
    } bit;
  } CCMR3_Output;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000058) capture/compare register 5                                 */
    
    struct {
      __IOM uint32 CCR5       : 16;           /*!< [15..0] Capture/Compare 5 value                                           */
            uint32            : 13;
      __IOM uint32 GC5C1      : 1;            /*!< [29..29] Group Channel 5 and Channel 1                                    */
      __IOM uint32 GC5C2      : 1;            /*!< [30..30] Group Channel 5 and Channel 2                                    */
      __IOM uint32 GC5C3      : 1;            /*!< [31..31] Group Channel 5 and Channel 3                                    */
    } bit;
  } CCR5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000005C) capture/compare register 6                                 */
    
    struct {
      __IOM uint32 CCR6       : 16;           /*!< [15..0] Capture/Compare 6 value                                           */
            uint32            : 16;
    } bit;
  } CRR6;
} TIM1_Type;                                    /*!< Size = 96 (0x60)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timers (TIM2)
  */

typedef struct {                                /*!< (@ 0x40000000) TIM2 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32 UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32 URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32 OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
      __IOM uint32 DIR        : 1;            /*!< [4..4] Direction                                                          */
      __IOM uint32 CMS        : 2;            /*!< [6..5] Center-aligned mode selection                                      */
      __IOM uint32 ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32 CKD        : 2;            /*!< [9..8] Clock division                                                     */
            uint32            : 22;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
            uint32            : 3;
      __IOM uint32 CCDS       : 1;            /*!< [3..3] Capture/compare DMA selection                                      */
      __IOM uint32 MMS        : 3;            /*!< [6..4] Master mode selection                                              */
      __IOM uint32 TI1S       : 1;            /*!< [7..7] TI1 selection                                                      */
            uint32            : 24;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) slave mode control register                                */
    
    struct {
      __IOM uint32 SMS        : 3;            /*!< [2..0] Slave mode selection                                               */
            uint32            : 1;
      __IOM uint32 TS         : 3;            /*!< [6..4] Trigger selection                                                  */
      __IOM uint32 MSM        : 1;            /*!< [7..7] Master/Slave mode                                                  */
      __IOM uint32 ETF        : 4;            /*!< [11..8] External trigger filter                                           */
      __IOM uint32 ETPS       : 2;            /*!< [13..12] External trigger prescaler                                       */
      __IOM uint32 ECE        : 1;            /*!< [14..14] External clock enable                                            */
      __IOM uint32 ETP        : 1;            /*!< [15..15] External trigger polarity                                        */
      __IOM uint32 SMS_3      : 1;            /*!< [16..16] Slave model selection - bit[3]                                   */
            uint32            : 15;
    } bit;
  } SMCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32 UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32 CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
      __IOM uint32 CC2IE      : 1;            /*!< [2..2] Capture/Compare 2 interrupt enable                                 */
      __IOM uint32 CC3IE      : 1;            /*!< [3..3] Capture/Compare 3 interrupt enable                                 */
      __IOM uint32 CC4IE      : 1;            /*!< [4..4] Capture/Compare 4 interrupt enable                                 */
            uint32            : 1;
      __IOM uint32 TIE        : 1;            /*!< [6..6] Trigger interrupt enable                                           */
            uint32            : 1;
      __IOM uint32 UDE        : 1;            /*!< [8..8] Update DMA request enable                                          */
      __IOM uint32 CC1DE      : 1;            /*!< [9..9] Capture/Compare 1 DMA request enable                               */
      __IOM uint32 CC2DE      : 1;            /*!< [10..10] Capture/Compare 2 DMA request enable                             */
      __IOM uint32 CC3DE      : 1;            /*!< [11..11] Capture/Compare 3 DMA request enable                             */
      __IOM uint32 CC4DE      : 1;            /*!< [12..12] Capture/Compare 4 DMA request enable                             */
            uint32            : 1;
      __IOM uint32 TDE        : 1;            /*!< [14..14] Trigger DMA request enable                                       */
            uint32            : 17;
    } bit;
  } DIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32 UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32 CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IOM uint32 CC2IF      : 1;            /*!< [2..2] Capture/Compare 2 interrupt flag                                   */
      __IOM uint32 CC3IF      : 1;            /*!< [3..3] Capture/Compare 3 interrupt flag                                   */
      __IOM uint32 CC4IF      : 1;            /*!< [4..4] Capture/Compare 4 interrupt flag                                   */
            uint32            : 1;
      __IOM uint32 TIF        : 1;            /*!< [6..6] Trigger interrupt flag                                             */
            uint32            : 2;
      __IOM uint32 CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
      __IOM uint32 CC2OF      : 1;            /*!< [10..10] Capture/compare 2 overcapture flag                               */
      __IOM uint32 CC3OF      : 1;            /*!< [11..11] Capture/Compare 3 overcapture flag                               */
      __IOM uint32 CC4OF      : 1;            /*!< [12..12] Capture/Compare 4 overcapture flag                               */
            uint32            : 19;
    } bit;
  } SR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32 UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32 CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
      __OM  uint32 CC2G       : 1;            /*!< [2..2] Capture/compare 2 generation                                       */
      __OM  uint32 CC3G       : 1;            /*!< [3..3] Capture/compare 3 generation                                       */
      __OM  uint32 CC4G       : 1;            /*!< [4..4] Capture/compare 4 generation                                       */
            uint32            : 1;
      __OM  uint32 TG         : 1;            /*!< [6..6] Trigger generation                                                 */
            uint32            : 25;
    } bit;
  } EGR;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] CC1S                                                               */
        __IOM uint32 OC1FE    : 1;            /*!< [2..2] OC1FE                                                              */
        __IOM uint32 OC1PE    : 1;            /*!< [3..3] OC1PE                                                              */
        __IOM uint32 OC1M     : 3;            /*!< [6..4] OC1M                                                               */
        __IOM uint32 OC1CE    : 1;            /*!< [7..7] OC1CE                                                              */
        __IOM uint32 CC2S     : 2;            /*!< [9..8] CC2S                                                               */
        __IOM uint32 OC2FE    : 1;            /*!< [10..10] OC2FE                                                            */
        __IOM uint32 OC2PE    : 1;            /*!< [11..11] OC2PE                                                            */
        __IOM uint32 OC2M     : 3;            /*!< [14..12] OC2M                                                             */
        __IOM uint32 OC2CE    : 1;            /*!< [15..15] OC2CE                                                            */
              uint32          : 16;
      } bit;
    } CCMR1_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 ICPCS    : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32 IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
        __IOM uint32 CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32 IC2PCS   : 2;            /*!< [11..10] Input capture 2 prescaler                                        */
        __IOM uint32 IC2F     : 4;            /*!< [15..12] Input capture 2 filter                                           */
              uint32          : 16;
      } bit;
    } CCMR1_Input;
  };
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
      
      struct {
        __IOM uint32 CC3S     : 2;            /*!< [1..0] CC3S                                                               */
        __IOM uint32 OC3FE    : 1;            /*!< [2..2] OC3FE                                                              */
        __IOM uint32 OC3PE    : 1;            /*!< [3..3] OC3PE                                                              */
        __IOM uint32 OC3M     : 3;            /*!< [6..4] OC3M                                                               */
        __IOM uint32 OC3CE    : 1;            /*!< [7..7] OC3CE                                                              */
        __IOM uint32 CC4S     : 2;            /*!< [9..8] CC4S                                                               */
        __IOM uint32 OC4FE    : 1;            /*!< [10..10] OC4FE                                                            */
        __IOM uint32 OC4PE    : 1;            /*!< [11..11] OC4PE                                                            */
        __IOM uint32 OC4M     : 3;            /*!< [14..12] OC4M                                                             */
        __IOM uint32 O24CE    : 1;            /*!< [15..15] O24CE                                                            */
              uint32          : 16;
      } bit;
    } CCMR2_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
      
      struct {
        __IOM uint32 CC3S     : 2;            /*!< [1..0] Capture/compare 3 selection                                        */
        __IOM uint32 IC3PSC   : 2;            /*!< [3..2] Input capture 3 prescaler                                          */
        __IOM uint32 IC3F     : 4;            /*!< [7..4] Input capture 3 filter                                             */
        __IOM uint32 CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32 IC4PSC   : 2;            /*!< [11..10] Input capture 4 prescaler                                        */
        __IOM uint32 IC4F     : 4;            /*!< [15..12] Input capture 4 filter                                           */
              uint32          : 16;
      } bit;
    } CCMR2_Input;
  };
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32 CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32 CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
      __IOM uint32 CC2E       : 1;            /*!< [4..4] Capture/Compare 2 output enable                                    */
      __IOM uint32 CC2P       : 1;            /*!< [5..5] Capture/Compare 2 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC2NP      : 1;            /*!< [7..7] Capture/Compare 2 output Polarity                                  */
      __IOM uint32 CC3E       : 1;            /*!< [8..8] Capture/Compare 3 output enable                                    */
      __IOM uint32 CC3P       : 1;            /*!< [9..9] Capture/Compare 3 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC3NP      : 1;            /*!< [11..11] Capture/Compare 3 output Polarity                                */
      __IOM uint32 CC4E       : 1;            /*!< [12..12] Capture/Compare 4 output enable                                  */
      __IOM uint32 CC4P       : 1;            /*!< [13..13] Capture/Compare 3 output Polarity                                */
            uint32            : 1;
      __IOM uint32 CC4NP      : 1;            /*!< [15..15] Capture/Compare 4 output Polarity                                */
            uint32            : 16;
    } bit;
  } CCER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32 CNT_L      : 16;           /*!< [15..0] Low counter value                                                 */
      __IOM uint32 CNT_H      : 16;           /*!< [31..16] High counter value                                               */
    } bit;
  } CNT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32 PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
            uint32            : 16;
    } bit;
  } PSC;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32 ARR_L      : 16;           /*!< [15..0] Low Auto-reload value                                             */
      __IOM uint32 ARR_H      : 16;           /*!< [31..16] High Auto-reload value                                           */
    } bit;
  } ARR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32 CCR1_L     : 16;           /*!< [15..0] Low Capture/Compare 1 value                                       */
      __IOM uint32 CCR1_H     : 16;           /*!< [31..16] High Capture/Compare 1 value                                     */
    } bit;
  } CCR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
    
    struct {
      __IOM uint32 CCR2_L     : 16;           /*!< [15..0] Low Capture/Compare 2 value                                       */
      __IOM uint32 CCR2_H     : 16;           /*!< [31..16] High Capture/Compare 2 value                                     */
    } bit;
  } CCR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
    
    struct {
      __IOM uint32 CCR3_L     : 16;           /*!< [15..0] Low Capture/Compare value                                         */
      __IOM uint32 CCR3_H     : 16;           /*!< [31..16] High Capture/Compare value                                       */
    } bit;
  } CCR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
    
    struct {
      __IOM uint32 CCR4_L     : 16;           /*!< [15..0] Low Capture/Compare value                                         */
      __IOM uint32 CCR4_H     : 16;           /*!< [31..16] High Capture/Compare value                                       */
    } bit;
  } CCR4;
  __IM  uint32  RESERVED1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) DMA control register                                       */
    
    struct {
      __IOM uint32 DBA        : 5;            /*!< [4..0] DMA base address                                                   */
            uint32            : 3;
      __IOM uint32 DBL        : 5;            /*!< [12..8] DMA burst length                                                  */
            uint32            : 19;
    } bit;
  } DCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
    
    struct {
      __IOM uint32 DMAB       : 16;           /*!< [15..0] DMA register for burst accesses                                   */
            uint32            : 16;
    } bit;
  } DMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000050) TIM2 option register 1                                     */
    
    struct {
      __IOM uint32 ITR1_RMP   : 1;            /*!< [0..0] Internal trigger 1 remap                                           */
      __IOM uint32 ETR1_RMP   : 1;            /*!< [1..1] External trigger remap                                             */
      __IOM uint32 TI4_RMP    : 2;            /*!< [3..2] Input Capture 4 remap                                              */
            uint32            : 28;
    } bit;
  } OR1;
  __IM  uint32  RESERVED2[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000060) TIM2 option register 2                                     */
    
    struct {
            uint32            : 14;
      __IOM uint32 ETRSEL     : 3;            /*!< [16..14] ETR source selection                                             */
            uint32            : 15;
    } bit;
  } OR2;
} TIM2_Type;                                    /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                           TIM3                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timers (TIM3)
  */

typedef struct {                                /*!< (@ 0x40000400) TIM3 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32 UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32 URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32 OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
      __IOM uint32 DIR        : 1;            /*!< [4..4] Direction                                                          */
      __IOM uint32 CMS        : 2;            /*!< [6..5] Center-aligned mode selection                                      */
      __IOM uint32 ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32 CKD        : 2;            /*!< [9..8] Clock division                                                     */
            uint32            : 22;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
            uint32            : 3;
      __IOM uint32 CCDS       : 1;            /*!< [3..3] Capture/compare DMA selection                                      */
      __IOM uint32 MMS        : 3;            /*!< [6..4] Master mode selection                                              */
      __IOM uint32 TI1S       : 1;            /*!< [7..7] TI1 selection                                                      */
            uint32            : 24;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) slave mode control register                                */
    
    struct {
      __IOM uint32 SMS        : 3;            /*!< [2..0] Slave mode selection                                               */
            uint32            : 1;
      __IOM uint32 TS         : 3;            /*!< [6..4] Trigger selection                                                  */
      __IOM uint32 MSM        : 1;            /*!< [7..7] Master/Slave mode                                                  */
      __IOM uint32 ETF        : 4;            /*!< [11..8] External trigger filter                                           */
      __IOM uint32 ETPS       : 2;            /*!< [13..12] External trigger prescaler                                       */
      __IOM uint32 ECE        : 1;            /*!< [14..14] External clock enable                                            */
      __IOM uint32 ETP        : 1;            /*!< [15..15] External trigger polarity                                        */
      __IOM uint32 SMS_3      : 1;            /*!< [16..16] Slave model selection - bit[3]                                   */
            uint32            : 15;
    } bit;
  } SMCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32 UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32 CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
      __IOM uint32 CC2IE      : 1;            /*!< [2..2] Capture/Compare 2 interrupt enable                                 */
      __IOM uint32 CC3IE      : 1;            /*!< [3..3] Capture/Compare 3 interrupt enable                                 */
      __IOM uint32 CC4IE      : 1;            /*!< [4..4] Capture/Compare 4 interrupt enable                                 */
            uint32            : 1;
      __IOM uint32 TIE        : 1;            /*!< [6..6] Trigger interrupt enable                                           */
            uint32            : 1;
      __IOM uint32 UDE        : 1;            /*!< [8..8] Update DMA request enable                                          */
      __IOM uint32 CC1DE      : 1;            /*!< [9..9] Capture/Compare 1 DMA request enable                               */
      __IOM uint32 CC2DE      : 1;            /*!< [10..10] Capture/Compare 2 DMA request enable                             */
      __IOM uint32 CC3DE      : 1;            /*!< [11..11] Capture/Compare 3 DMA request enable                             */
      __IOM uint32 CC4DE      : 1;            /*!< [12..12] Capture/Compare 4 DMA request enable                             */
            uint32            : 1;
      __IOM uint32 TDE        : 1;            /*!< [14..14] Trigger DMA request enable                                       */
            uint32            : 17;
    } bit;
  } DIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32 UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32 CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IOM uint32 CC2IF      : 1;            /*!< [2..2] Capture/Compare 2 interrupt flag                                   */
      __IOM uint32 CC3IF      : 1;            /*!< [3..3] Capture/Compare 3 interrupt flag                                   */
      __IOM uint32 CC4IF      : 1;            /*!< [4..4] Capture/Compare 4 interrupt flag                                   */
            uint32            : 1;
      __IOM uint32 TIF        : 1;            /*!< [6..6] Trigger interrupt flag                                             */
            uint32            : 2;
      __IOM uint32 CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
      __IOM uint32 CC2OF      : 1;            /*!< [10..10] Capture/compare 2 overcapture flag                               */
      __IOM uint32 CC3OF      : 1;            /*!< [11..11] Capture/Compare 3 overcapture flag                               */
      __IOM uint32 CC4OF      : 1;            /*!< [12..12] Capture/Compare 4 overcapture flag                               */
            uint32            : 19;
    } bit;
  } SR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32 UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32 CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
      __OM  uint32 CC2G       : 1;            /*!< [2..2] Capture/compare 2 generation                                       */
      __OM  uint32 CC3G       : 1;            /*!< [3..3] Capture/compare 3 generation                                       */
      __OM  uint32 CC4G       : 1;            /*!< [4..4] Capture/compare 4 generation                                       */
            uint32            : 1;
      __OM  uint32 TG         : 1;            /*!< [6..6] Trigger generation                                                 */
            uint32            : 25;
    } bit;
  } EGR;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] CC1S                                                               */
        __IOM uint32 OC1FE    : 1;            /*!< [2..2] OC1FE                                                              */
        __IOM uint32 OC1PE    : 1;            /*!< [3..3] OC1PE                                                              */
        __IOM uint32 OC1M     : 3;            /*!< [6..4] OC1M                                                               */
        __IOM uint32 OC1CE    : 1;            /*!< [7..7] OC1CE                                                              */
        __IOM uint32 CC2S     : 2;            /*!< [9..8] CC2S                                                               */
        __IOM uint32 OC2FE    : 1;            /*!< [10..10] OC2FE                                                            */
        __IOM uint32 OC2PE    : 1;            /*!< [11..11] OC2PE                                                            */
        __IOM uint32 OC2M     : 3;            /*!< [14..12] OC2M                                                             */
        __IOM uint32 OC2CE    : 1;            /*!< [15..15] OC2CE                                                            */
              uint32          : 16;
      } bit;
    } CCMR1_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 ICPCS    : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32 IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
        __IOM uint32 CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32 IC2PCS   : 2;            /*!< [11..10] Input capture 2 prescaler                                        */
        __IOM uint32 IC2F     : 4;            /*!< [15..12] Input capture 2 filter                                           */
              uint32          : 16;
      } bit;
    } CCMR1_Input;
  };
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
      
      struct {
        __IOM uint32 CC3S     : 2;            /*!< [1..0] CC3S                                                               */
        __IOM uint32 OC3FE    : 1;            /*!< [2..2] OC3FE                                                              */
        __IOM uint32 OC3PE    : 1;            /*!< [3..3] OC3PE                                                              */
        __IOM uint32 OC3M     : 3;            /*!< [6..4] OC3M                                                               */
        __IOM uint32 OC3CE    : 1;            /*!< [7..7] OC3CE                                                              */
        __IOM uint32 CC4S     : 2;            /*!< [9..8] CC4S                                                               */
        __IOM uint32 OC4FE    : 1;            /*!< [10..10] OC4FE                                                            */
        __IOM uint32 OC4PE    : 1;            /*!< [11..11] OC4PE                                                            */
        __IOM uint32 OC4M     : 3;            /*!< [14..12] OC4M                                                             */
        __IOM uint32 O24CE    : 1;            /*!< [15..15] O24CE                                                            */
              uint32          : 16;
      } bit;
    } CCMR2_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
      
      struct {
        __IOM uint32 CC3S     : 2;            /*!< [1..0] Capture/compare 3 selection                                        */
        __IOM uint32 IC3PSC   : 2;            /*!< [3..2] Input capture 3 prescaler                                          */
        __IOM uint32 IC3F     : 4;            /*!< [7..4] Input capture 3 filter                                             */
        __IOM uint32 CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32 IC4PSC   : 2;            /*!< [11..10] Input capture 4 prescaler                                        */
        __IOM uint32 IC4F     : 4;            /*!< [15..12] Input capture 4 filter                                           */
              uint32          : 16;
      } bit;
    } CCMR2_Input;
  };
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32 CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32 CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
      __IOM uint32 CC2E       : 1;            /*!< [4..4] Capture/Compare 2 output enable                                    */
      __IOM uint32 CC2P       : 1;            /*!< [5..5] Capture/Compare 2 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC2NP      : 1;            /*!< [7..7] Capture/Compare 2 output Polarity                                  */
      __IOM uint32 CC3E       : 1;            /*!< [8..8] Capture/Compare 3 output enable                                    */
      __IOM uint32 CC3P       : 1;            /*!< [9..9] Capture/Compare 3 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC3NP      : 1;            /*!< [11..11] Capture/Compare 3 output Polarity                                */
      __IOM uint32 CC4E       : 1;            /*!< [12..12] Capture/Compare 4 output enable                                  */
      __IOM uint32 CC4P       : 1;            /*!< [13..13] Capture/Compare 3 output Polarity                                */
            uint32            : 1;
      __IOM uint32 CC4NP      : 1;            /*!< [15..15] Capture/Compare 4 output Polarity                                */
            uint32            : 16;
    } bit;
  } CCER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32 CNT_L      : 16;           /*!< [15..0] Low counter value                                                 */
      __IOM uint32 CNT_H      : 16;           /*!< [31..16] High counter value                                               */
    } bit;
  } CNT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32 PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
            uint32            : 16;
    } bit;
  } PSC;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32 ARR_L      : 16;           /*!< [15..0] Low Auto-reload value                                             */
      __IOM uint32 ARR_H      : 16;           /*!< [31..16] High Auto-reload value                                           */
    } bit;
  } ARR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32 CCR1_L     : 16;           /*!< [15..0] Low Capture/Compare 1 value                                       */
      __IOM uint32 CCR1_H     : 16;           /*!< [31..16] High Capture/Compare 1 value                                     */
    } bit;
  } CCR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
    
    struct {
      __IOM uint32 CCR2_L     : 16;           /*!< [15..0] Low Capture/Compare 2 value                                       */
      __IOM uint32 CCR2_H     : 16;           /*!< [31..16] High Capture/Compare 2 value                                     */
    } bit;
  } CCR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
    
    struct {
      __IOM uint32 CCR3_L     : 16;           /*!< [15..0] Low Capture/Compare value                                         */
      __IOM uint32 CCR3_H     : 16;           /*!< [31..16] High Capture/Compare value                                       */
    } bit;
  } CCR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
    
    struct {
      __IOM uint32 CCR4_L     : 16;           /*!< [15..0] Low Capture/Compare value                                         */
      __IOM uint32 CCR4_H     : 16;           /*!< [31..16] High Capture/Compare value                                       */
    } bit;
  } CCR4;
  __IM  uint32  RESERVED1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) DMA control register                                       */
    
    struct {
      __IOM uint32 DBA        : 5;            /*!< [4..0] DMA base address                                                   */
            uint32            : 3;
      __IOM uint32 DBL        : 5;            /*!< [12..8] DMA burst length                                                  */
            uint32            : 19;
    } bit;
  } DCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
    
    struct {
      __IOM uint32 DMAB       : 16;           /*!< [15..0] DMA register for burst accesses                                   */
            uint32            : 16;
    } bit;
  } DMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000050) TIM3 option register 1                                     */
    
    struct {
      __IOM uint32 TI1_RMP    : 2;            /*!< [1..0] Input Capture 1 remap                                              */
            uint32            : 30;
    } bit;
  } OR1;
  __IM  uint32  RESERVED2[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000060) TIM3 option register 2                                     */
    
    struct {
            uint32            : 14;
      __IOM uint32 ETRSEL     : 3;            /*!< [16..14] ETR source selection                                             */
            uint32            : 15;
    } bit;
  } OR2;
} TIM3_Type;                                    /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                           TIM4                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timers (TIM4)
  */

typedef struct {                                /*!< (@ 0x40000800) TIM4 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32 UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32 URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32 OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
      __IOM uint32 DIR        : 1;            /*!< [4..4] Direction                                                          */
      __IOM uint32 CMS        : 2;            /*!< [6..5] Center-aligned mode selection                                      */
      __IOM uint32 ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32 CKD        : 2;            /*!< [9..8] Clock division                                                     */
            uint32            : 22;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
            uint32            : 3;
      __IOM uint32 CCDS       : 1;            /*!< [3..3] Capture/compare DMA selection                                      */
      __IOM uint32 MMS        : 3;            /*!< [6..4] Master mode selection                                              */
      __IOM uint32 TI1S       : 1;            /*!< [7..7] TI1 selection                                                      */
            uint32            : 24;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) slave mode control register                                */
    
    struct {
      __IOM uint32 SMS        : 3;            /*!< [2..0] Slave mode selection                                               */
            uint32            : 1;
      __IOM uint32 TS         : 3;            /*!< [6..4] Trigger selection                                                  */
      __IOM uint32 MSM        : 1;            /*!< [7..7] Master/Slave mode                                                  */
      __IOM uint32 ETF        : 4;            /*!< [11..8] External trigger filter                                           */
      __IOM uint32 ETPS       : 2;            /*!< [13..12] External trigger prescaler                                       */
      __IOM uint32 ECE        : 1;            /*!< [14..14] External clock enable                                            */
      __IOM uint32 ETP        : 1;            /*!< [15..15] External trigger polarity                                        */
      __IOM uint32 SMS_3      : 1;            /*!< [16..16] Slave model selection - bit[3]                                   */
            uint32            : 15;
    } bit;
  } SMCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32 UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32 CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
      __IOM uint32 CC2IE      : 1;            /*!< [2..2] Capture/Compare 2 interrupt enable                                 */
      __IOM uint32 CC3IE      : 1;            /*!< [3..3] Capture/Compare 3 interrupt enable                                 */
      __IOM uint32 CC4IE      : 1;            /*!< [4..4] Capture/Compare 4 interrupt enable                                 */
            uint32            : 1;
      __IOM uint32 TIE        : 1;            /*!< [6..6] Trigger interrupt enable                                           */
            uint32            : 1;
      __IOM uint32 UDE        : 1;            /*!< [8..8] Update DMA request enable                                          */
      __IOM uint32 CC1DE      : 1;            /*!< [9..9] Capture/Compare 1 DMA request enable                               */
      __IOM uint32 CC2DE      : 1;            /*!< [10..10] Capture/Compare 2 DMA request enable                             */
      __IOM uint32 CC3DE      : 1;            /*!< [11..11] Capture/Compare 3 DMA request enable                             */
      __IOM uint32 CC4DE      : 1;            /*!< [12..12] Capture/Compare 4 DMA request enable                             */
            uint32            : 1;
      __IOM uint32 TDE        : 1;            /*!< [14..14] Trigger DMA request enable                                       */
            uint32            : 17;
    } bit;
  } DIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32 UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32 CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IOM uint32 CC2IF      : 1;            /*!< [2..2] Capture/Compare 2 interrupt flag                                   */
      __IOM uint32 CC3IF      : 1;            /*!< [3..3] Capture/Compare 3 interrupt flag                                   */
      __IOM uint32 CC4IF      : 1;            /*!< [4..4] Capture/Compare 4 interrupt flag                                   */
            uint32            : 1;
      __IOM uint32 TIF        : 1;            /*!< [6..6] Trigger interrupt flag                                             */
            uint32            : 2;
      __IOM uint32 CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
      __IOM uint32 CC2OF      : 1;            /*!< [10..10] Capture/compare 2 overcapture flag                               */
      __IOM uint32 CC3OF      : 1;            /*!< [11..11] Capture/Compare 3 overcapture flag                               */
      __IOM uint32 CC4OF      : 1;            /*!< [12..12] Capture/Compare 4 overcapture flag                               */
            uint32            : 19;
    } bit;
  } SR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32 UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32 CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
      __OM  uint32 CC2G       : 1;            /*!< [2..2] Capture/compare 2 generation                                       */
      __OM  uint32 CC3G       : 1;            /*!< [3..3] Capture/compare 3 generation                                       */
      __OM  uint32 CC4G       : 1;            /*!< [4..4] Capture/compare 4 generation                                       */
            uint32            : 1;
      __OM  uint32 TG         : 1;            /*!< [6..6] Trigger generation                                                 */
            uint32            : 25;
    } bit;
  } EGR;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] CC1S                                                               */
        __IOM uint32 OC1FE    : 1;            /*!< [2..2] OC1FE                                                              */
        __IOM uint32 OC1PE    : 1;            /*!< [3..3] OC1PE                                                              */
        __IOM uint32 OC1M     : 3;            /*!< [6..4] OC1M                                                               */
        __IOM uint32 OC1CE    : 1;            /*!< [7..7] OC1CE                                                              */
        __IOM uint32 CC2S     : 2;            /*!< [9..8] CC2S                                                               */
        __IOM uint32 OC2FE    : 1;            /*!< [10..10] OC2FE                                                            */
        __IOM uint32 OC2PE    : 1;            /*!< [11..11] OC2PE                                                            */
        __IOM uint32 OC2M     : 3;            /*!< [14..12] OC2M                                                             */
        __IOM uint32 OC2CE    : 1;            /*!< [15..15] OC2CE                                                            */
              uint32          : 16;
      } bit;
    } CCMR1_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 ICPCS    : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32 IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
        __IOM uint32 CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32 IC2PCS   : 2;            /*!< [11..10] Input capture 2 prescaler                                        */
        __IOM uint32 IC2F     : 4;            /*!< [15..12] Input capture 2 filter                                           */
              uint32          : 16;
      } bit;
    } CCMR1_Input;
  };
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
      
      struct {
        __IOM uint32 CC3S     : 2;            /*!< [1..0] CC3S                                                               */
        __IOM uint32 OC3FE    : 1;            /*!< [2..2] OC3FE                                                              */
        __IOM uint32 OC3PE    : 1;            /*!< [3..3] OC3PE                                                              */
        __IOM uint32 OC3M     : 3;            /*!< [6..4] OC3M                                                               */
        __IOM uint32 OC3CE    : 1;            /*!< [7..7] OC3CE                                                              */
        __IOM uint32 CC4S     : 2;            /*!< [9..8] CC4S                                                               */
        __IOM uint32 OC4FE    : 1;            /*!< [10..10] OC4FE                                                            */
        __IOM uint32 OC4PE    : 1;            /*!< [11..11] OC4PE                                                            */
        __IOM uint32 OC4M     : 3;            /*!< [14..12] OC4M                                                             */
        __IOM uint32 O24CE    : 1;            /*!< [15..15] O24CE                                                            */
              uint32          : 16;
      } bit;
    } CCMR2_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
      
      struct {
        __IOM uint32 CC3S     : 2;            /*!< [1..0] Capture/compare 3 selection                                        */
        __IOM uint32 IC3PSC   : 2;            /*!< [3..2] Input capture 3 prescaler                                          */
        __IOM uint32 IC3F     : 4;            /*!< [7..4] Input capture 3 filter                                             */
        __IOM uint32 CC4S     : 2;            /*!< [9..8] Capture/Compare 4 selection                                        */
        __IOM uint32 IC4PSC   : 2;            /*!< [11..10] Input capture 4 prescaler                                        */
        __IOM uint32 IC4F     : 4;            /*!< [15..12] Input capture 4 filter                                           */
              uint32          : 16;
      } bit;
    } CCMR2_Input;
  };
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32 CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32 CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
      __IOM uint32 CC2E       : 1;            /*!< [4..4] Capture/Compare 2 output enable                                    */
      __IOM uint32 CC2P       : 1;            /*!< [5..5] Capture/Compare 2 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC2NP      : 1;            /*!< [7..7] Capture/Compare 2 output Polarity                                  */
      __IOM uint32 CC3E       : 1;            /*!< [8..8] Capture/Compare 3 output enable                                    */
      __IOM uint32 CC3P       : 1;            /*!< [9..9] Capture/Compare 3 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC3NP      : 1;            /*!< [11..11] Capture/Compare 3 output Polarity                                */
      __IOM uint32 CC4E       : 1;            /*!< [12..12] Capture/Compare 4 output enable                                  */
      __IOM uint32 CC4P       : 1;            /*!< [13..13] Capture/Compare 3 output Polarity                                */
            uint32            : 1;
      __IOM uint32 CC4NP      : 1;            /*!< [15..15] Capture/Compare 4 output Polarity                                */
            uint32            : 16;
    } bit;
  } CCER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32 CNT_L      : 16;           /*!< [15..0] Low counter value                                                 */
      __IOM uint32 CNT_H      : 16;           /*!< [31..16] High counter value                                               */
    } bit;
  } CNT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32 PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
            uint32            : 16;
    } bit;
  } PSC;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32 ARR_L      : 16;           /*!< [15..0] Low Auto-reload value                                             */
      __IOM uint32 ARR_H      : 16;           /*!< [31..16] High Auto-reload value                                           */
    } bit;
  } ARR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32 CCR1_L     : 16;           /*!< [15..0] Low Capture/Compare 1 value                                       */
      __IOM uint32 CCR1_H     : 16;           /*!< [31..16] High Capture/Compare 1 value                                     */
    } bit;
  } CCR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
    
    struct {
      __IOM uint32 CCR2_L     : 16;           /*!< [15..0] Low Capture/Compare 2 value                                       */
      __IOM uint32 CCR2_H     : 16;           /*!< [31..16] High Capture/Compare 2 value                                     */
    } bit;
  } CCR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
    
    struct {
      __IOM uint32 CCR3_L     : 16;           /*!< [15..0] Low Capture/Compare value                                         */
      __IOM uint32 CCR3_H     : 16;           /*!< [31..16] High Capture/Compare value                                       */
    } bit;
  } CCR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
    
    struct {
      __IOM uint32 CCR4_L     : 16;           /*!< [15..0] Low Capture/Compare value                                         */
      __IOM uint32 CCR4_H     : 16;           /*!< [31..16] High Capture/Compare value                                       */
    } bit;
  } CCR4;
  __IM  uint32  RESERVED1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) DMA control register                                       */
    
    struct {
      __IOM uint32 DBA        : 5;            /*!< [4..0] DMA base address                                                   */
            uint32            : 3;
      __IOM uint32 DBL        : 5;            /*!< [12..8] DMA burst length                                                  */
            uint32            : 19;
    } bit;
  } DCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
    
    struct {
      __IOM uint32 DMAB       : 16;           /*!< [15..0] DMA register for burst accesses                                   */
            uint32            : 16;
    } bit;
  } DMAR;
} TIM4_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM9                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timers (TIM9)
  */

typedef struct {                                /*!< (@ 0x40014000) TIM9 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32 UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32 URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32 OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
            uint32            : 3;
      __IOM uint32 ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32 CKD        : 2;            /*!< [9..8] Clock division                                                     */
            uint32            : 22;
    } bit;
  } CR1;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) slave mode control register                                */
    
    struct {
      __IOM uint32 SMS        : 3;            /*!< [2..0] Slave mode selection                                               */
            uint32            : 1;
      __IOM uint32 TS         : 3;            /*!< [6..4] Trigger selection                                                  */
      __IOM uint32 MSM        : 1;            /*!< [7..7] Master/Slave mode                                                  */
            uint32            : 24;
    } bit;
  } SMCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32 UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32 CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
      __IOM uint32 CC2IE      : 1;            /*!< [2..2] Capture/Compare 2 interrupt enable                                 */
            uint32            : 3;
      __IOM uint32 TIE        : 1;            /*!< [6..6] Trigger interrupt enable                                           */
            uint32            : 25;
    } bit;
  } DIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32 UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32 CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
      __IOM uint32 CC2IF      : 1;            /*!< [2..2] Capture/Compare 2 interrupt flag                                   */
            uint32            : 3;
      __IOM uint32 TIF        : 1;            /*!< [6..6] Trigger interrupt flag                                             */
            uint32            : 2;
      __IOM uint32 CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
      __IOM uint32 CC2OF      : 1;            /*!< [10..10] Capture/compare 2 overcapture flag                               */
            uint32            : 21;
    } bit;
  } SR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32 UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32 CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
      __OM  uint32 CC2G       : 1;            /*!< [2..2] Capture/compare 2 generation                                       */
            uint32            : 3;
      __OM  uint32 TG         : 1;            /*!< [6..6] Trigger generation                                                 */
            uint32            : 25;
    } bit;
  } EGR;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 OC1FE    : 1;            /*!< [2..2] Output Compare 1 fast enable                                       */
        __IOM uint32 OC1PE    : 1;            /*!< [3..3] Output Compare 1 preload enable                                    */
        __IOM uint32 OC1M     : 3;            /*!< [6..4] Output Compare 1 mode                                              */
              uint32          : 1;
        __IOM uint32 CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32 OC2FE    : 1;            /*!< [10..10] Output Compare 2 fast enable                                     */
        __IOM uint32 OC2PE    : 1;            /*!< [11..11] Output Compare 2 preload enable                                  */
        __IOM uint32 OC2M     : 3;            /*!< [14..12] Output Compare 2 mode                                            */
              uint32          : 17;
      } bit;
    } CCMR1_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 ICPCS    : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32 IC1F     : 3;            /*!< [6..4] Input capture 1 filter                                             */
              uint32          : 1;
        __IOM uint32 CC2S     : 2;            /*!< [9..8] Capture/Compare 2 selection                                        */
        __IOM uint32 IC2PCS   : 2;            /*!< [11..10] Input capture 2 prescaler                                        */
        __IOM uint32 IC2F     : 3;            /*!< [14..12] Input capture 2 filter                                           */
              uint32          : 17;
      } bit;
    } CCMR1_Input;
  };
  __IM  uint32  RESERVED1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32 CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32 CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
      __IOM uint32 CC2E       : 1;            /*!< [4..4] Capture/Compare 2 output enable                                    */
      __IOM uint32 CC2P       : 1;            /*!< [5..5] Capture/Compare 2 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC2NP      : 1;            /*!< [7..7] Capture/Compare 2 output Polarity                                  */
            uint32            : 24;
    } bit;
  } CCER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32 CNT        : 16;           /*!< [15..0] counter value                                                     */
            uint32            : 16;
    } bit;
  } CNT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32 PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
            uint32            : 16;
    } bit;
  } PSC;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32 ARR        : 16;           /*!< [15..0] Auto-reload value                                                 */
            uint32            : 16;
    } bit;
  } ARR;
  __IM  uint32  RESERVED2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32 CCR1       : 16;           /*!< [15..0] Capture/Compare 1 value                                           */
            uint32            : 16;
    } bit;
  } CCR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
    
    struct {
      __IOM uint32 CCR2       : 16;           /*!< [15..0] Capture/Compare 2 value                                           */
            uint32            : 16;
    } bit;
  } CCR2;
} TIM9_Type;                                    /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM10                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM10)
  */

typedef struct {                                /*!< (@ 0x40014400) TIM10 Structure                                            */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32 UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32 URS        : 1;            /*!< [2..2] Update request source                                              */
            uint32            : 4;
      __IOM uint32 ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
      __IOM uint32 CKD        : 2;            /*!< [9..8] Clock division                                                     */
            uint32            : 22;
    } bit;
  } CR1;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) slave mode control register                                */
    
    struct {
      __IOM uint32 SMS        : 3;            /*!< [2..0] Slave mode selection                                               */
            uint32            : 1;
      __IOM uint32 TS         : 3;            /*!< [6..4] Trigger selection                                                  */
      __IOM uint32 MSM        : 1;            /*!< [7..7] Master/slave mode                                                  */
      __IOM uint32 ETF        : 4;            /*!< [11..8] External trigger filter                                           */
      __IOM uint32 ETPS       : 2;            /*!< [13..12] External trigger prescaler                                       */
      __IOM uint32 ECE        : 1;            /*!< [14..14] External clock enable                                            */
      __IOM uint32 ETP        : 1;            /*!< [15..15] External trigger polarity                                        */
      __IOM uint32 SMS3       : 1;            /*!< [16..16] Slave mode selection                                             */
            uint32            : 15;
    } bit;
  } SMCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32 UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
      __IOM uint32 CC1IE      : 1;            /*!< [1..1] Capture/Compare 1 interrupt enable                                 */
            uint32            : 30;
    } bit;
  } DIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32 UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
      __IOM uint32 CC1IF      : 1;            /*!< [1..1] Capture/compare 1 interrupt flag                                   */
            uint32            : 7;
      __IOM uint32 CC1OF      : 1;            /*!< [9..9] Capture/Compare 1 overcapture flag                                 */
            uint32            : 22;
    } bit;
  } SR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32 UG         : 1;            /*!< [0..0] Update generation                                                  */
      __OM  uint32 CC1G       : 1;            /*!< [1..1] Capture/compare 1 generation                                       */
            uint32            : 30;
    } bit;
  } EGR;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 OC1FE    : 1;            /*!< [2..2] Output Compare 1 fast enable                                       */
        __IOM uint32 OC1PE    : 1;            /*!< [3..3] Output Compare 1 preload enable                                    */
        __IOM uint32 OC1M     : 3;            /*!< [6..4] Output Compare 1 mode                                              */
              uint32          : 25;
      } bit;
    } CCMR1_Output;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
      
      struct {
        __IOM uint32 CC1S     : 2;            /*!< [1..0] Capture/Compare 1 selection                                        */
        __IOM uint32 ICPCS    : 2;            /*!< [3..2] Input capture 1 prescaler                                          */
        __IOM uint32 IC1F     : 4;            /*!< [7..4] Input capture 1 filter                                             */
              uint32          : 24;
      } bit;
    } CCMR1_Input;
  };
  __IM  uint32  RESERVED1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */
    
    struct {
      __IOM uint32 CC1E       : 1;            /*!< [0..0] Capture/Compare 1 output enable                                    */
      __IOM uint32 CC1P       : 1;            /*!< [1..1] Capture/Compare 1 output Polarity                                  */
            uint32            : 1;
      __IOM uint32 CC1NP      : 1;            /*!< [3..3] Capture/Compare 1 output Polarity                                  */
            uint32            : 28;
    } bit;
  } CCER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32 CNT        : 16;           /*!< [15..0] counter value                                                     */
            uint32            : 16;
    } bit;
  } CNT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32 PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
            uint32            : 16;
    } bit;
  } PSC;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32 ARR        : 16;           /*!< [15..0] Auto-reload value                                                 */
            uint32            : 16;
    } bit;
  } ARR;
  __IM  uint32  RESERVED2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
    
    struct {
      __IOM uint32 CCR1       : 16;           /*!< [15..0] Capture/Compare 1 value                                           */
            uint32            : 16;
    } bit;
  } CCR1;
  __IM  uint32  RESERVED3[6];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000050) option register                                            */
    
    struct {
      __IOM uint32 TI1_RMP    : 2;            /*!< [1..0] TIM11 Input 1 remapping capability                                 */
            uint32            : 30;
    } bit;
  } OR;
} TIM10_Type;                                   /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM6                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Basic timers (TIM6)
  */

typedef struct {                                /*!< (@ 0x40001000) TIM6 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register 1                                         */
    
    struct {
      __IOM uint32 CEN        : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32 UDIS       : 1;            /*!< [1..1] Update disable                                                     */
      __IOM uint32 URS        : 1;            /*!< [2..2] Update request source                                              */
      __IOM uint32 OPM        : 1;            /*!< [3..3] One-pulse mode                                                     */
            uint32            : 3;
      __IOM uint32 ARPE       : 1;            /*!< [7..7] Auto-reload preload enable                                         */
            uint32            : 24;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) control register 2                                         */
    
    struct {
            uint32            : 4;
      __IOM uint32 MMS        : 3;            /*!< [6..4] Master mode selection                                              */
            uint32            : 25;
    } bit;
  } CR2;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
    
    struct {
      __IOM uint32 UIE        : 1;            /*!< [0..0] Update interrupt enable                                            */
            uint32            : 7;
      __IOM uint32 UDE        : 1;            /*!< [8..8] Update DMA request enable                                          */
            uint32            : 23;
    } bit;
  } DIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) status register                                            */
    
    struct {
      __IOM uint32 UIF        : 1;            /*!< [0..0] Update interrupt flag                                              */
            uint32            : 31;
    } bit;
  } SR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000014) event generation register                                  */
    
    struct {
      __OM  uint32 UG         : 1;            /*!< [0..0] Update generation                                                  */
            uint32            : 31;
    } bit;
  } EGR;
  __IM  uint32  RESERVED1[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) counter                                                    */
    
    struct {
      __IOM uint32 CNT        : 16;           /*!< [15..0] Low counter value                                                 */
            uint32            : 16;
    } bit;
  } CNT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) prescaler                                                  */
    
    struct {
      __IOM uint32 PSC        : 16;           /*!< [15..0] Prescaler value                                                   */
            uint32            : 16;
    } bit;
  } PSC;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */
    
    struct {
      __IOM uint32 ARR        : 16;           /*!< [15..0] Low Auto-reload value                                             */
            uint32            : 16;
    } bit;
  } ARR;
} TIM6_Type;                                    /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                       Ethernet_MAC                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: media access control       (MAC) (Ethernet_MAC)
  */

typedef struct {                                /*!< (@ 0x40028000) Ethernet_MAC Structure                                     */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Ethernet MAC configuration register                        */
    
    struct {
            uint32            : 2;
      __IOM uint32 RE         : 1;            /*!< [2..2] RE                                                                 */
      __IOM uint32 TE         : 1;            /*!< [3..3] TE                                                                 */
      __IOM uint32 DC         : 1;            /*!< [4..4] DC                                                                 */
      __IOM uint32 BL         : 2;            /*!< [6..5] BL                                                                 */
      __IOM uint32 APCS       : 1;            /*!< [7..7] APCS                                                               */
            uint32            : 1;
      __IOM uint32 RD         : 1;            /*!< [9..9] RD                                                                 */
      __IOM uint32 IPCO       : 1;            /*!< [10..10] IPCO                                                             */
      __IOM uint32 DM         : 1;            /*!< [11..11] DM                                                               */
      __IOM uint32 LM         : 1;            /*!< [12..12] LM                                                               */
      __IOM uint32 ROD        : 1;            /*!< [13..13] ROD                                                              */
      __IOM uint32 FES        : 1;            /*!< [14..14] FES                                                              */
            uint32            : 1;
      __IOM uint32 CSD        : 1;            /*!< [16..16] CSD                                                              */
      __IOM uint32 IFG        : 3;            /*!< [19..17] IFG                                                              */
            uint32            : 2;
      __IOM uint32 JD         : 1;            /*!< [22..22] JD                                                               */
      __IOM uint32 WD         : 1;            /*!< [23..23] WD                                                               */
            uint32            : 1;
      __IOM uint32 CSTF       : 1;            /*!< [25..25] CSTF                                                             */
            uint32            : 6;
    } bit;
  } MACCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Ethernet MAC frame filter register                         */
    
    struct {
      __IOM uint32 PM         : 1;            /*!< [0..0] PM                                                                 */
      __IOM uint32 HU         : 1;            /*!< [1..1] HU                                                                 */
      __IOM uint32 HM         : 1;            /*!< [2..2] HM                                                                 */
      __IOM uint32 DAIF       : 1;            /*!< [3..3] DAIF                                                               */
      __IOM uint32 RAM        : 1;            /*!< [4..4] RAM                                                                */
      __IOM uint32 BFD        : 1;            /*!< [5..5] BFD                                                                */
      __IOM uint32 PCF        : 1;            /*!< [6..6] PCF                                                                */
      __IOM uint32 SAIF       : 1;            /*!< [7..7] SAIF                                                               */
      __IOM uint32 SAF        : 1;            /*!< [8..8] SAF                                                                */
      __IOM uint32 HPF        : 1;            /*!< [9..9] HPF                                                                */
            uint32            : 21;
      __IOM uint32 RA         : 1;            /*!< [31..31] RA                                                               */
    } bit;
  } MACFFR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Ethernet MAC hash table high register                      */
    
    struct {
      __IOM uint32 HTH        : 32;           /*!< [31..0] HTH                                                               */
    } bit;
  } MACHTHR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Ethernet MAC hash table low register                       */
    
    struct {
      __IOM uint32 HTL        : 32;           /*!< [31..0] HTL                                                               */
    } bit;
  } MACHTLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Ethernet MAC MII address register                          */
    
    struct {
      __IOM uint32 MB         : 1;            /*!< [0..0] MB                                                                 */
      __IOM uint32 MW         : 1;            /*!< [1..1] MW                                                                 */
      __IOM uint32 CR         : 3;            /*!< [4..2] CR                                                                 */
            uint32            : 1;
      __IOM uint32 MR         : 5;            /*!< [10..6] MR                                                                */
      __IOM uint32 PA         : 5;            /*!< [15..11] PA                                                               */
            uint32            : 16;
    } bit;
  } MACMIIAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Ethernet MAC MII data register                             */
    
    struct {
      __IOM uint32 TD         : 16;           /*!< [15..0] TD                                                                */
            uint32            : 16;
    } bit;
  } MACMIIDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) Ethernet MAC flow control register                         */
    
    struct {
      __IOM uint32 FCB        : 1;            /*!< [0..0] FCB                                                                */
      __IOM uint32 TFCE       : 1;            /*!< [1..1] TFCE                                                               */
      __IOM uint32 RFCE       : 1;            /*!< [2..2] RFCE                                                               */
      __IOM uint32 UPFD       : 1;            /*!< [3..3] UPFD                                                               */
      __IOM uint32 PLT        : 2;            /*!< [5..4] PLT                                                                */
            uint32            : 1;
      __IOM uint32 ZQPD       : 1;            /*!< [7..7] ZQPD                                                               */
            uint32            : 8;
      __IOM uint32 PT         : 16;           /*!< [31..16] PT                                                               */
    } bit;
  } MACFCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) Ethernet MAC VLAN tag register                             */
    
    struct {
      __IOM uint32 VLANTI     : 16;           /*!< [15..0] VLANTI                                                            */
      __IOM uint32 VLANTC     : 1;            /*!< [16..16] VLANTC                                                           */
            uint32            : 15;
    } bit;
  } MACVLANTR;
  __IM  uint32  RESERVED[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) Ethernet MAC PMT control and status register               */
    
    struct {
      __IOM uint32 PD         : 1;            /*!< [0..0] PD                                                                 */
      __IOM uint32 MPE        : 1;            /*!< [1..1] MPE                                                                */
      __IOM uint32 WFE        : 1;            /*!< [2..2] WFE                                                                */
            uint32            : 2;
      __IOM uint32 MPR        : 1;            /*!< [5..5] MPR                                                                */
      __IOM uint32 WFR        : 1;            /*!< [6..6] WFR                                                                */
            uint32            : 2;
      __IOM uint32 GU         : 1;            /*!< [9..9] GU                                                                 */
            uint32            : 21;
      __IOM uint32 WFFRPR     : 1;            /*!< [31..31] WFFRPR                                                           */
    } bit;
  } MACPMTCSR;
  __IM  uint32  RESERVED1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000034) Ethernet MAC debug register                                */
    
    struct {
      __IM  uint32 CR         : 1;            /*!< [0..0] CR                                                                 */
      __IM  uint32 CSR        : 1;            /*!< [1..1] CSR                                                                */
      __IM  uint32 ROR        : 1;            /*!< [2..2] ROR                                                                */
      __IM  uint32 MCF        : 1;            /*!< [3..3] MCF                                                                */
      __IM  uint32 MCP        : 1;            /*!< [4..4] MCP                                                                */
      __IM  uint32 MCFHP      : 1;            /*!< [5..5] MCFHP                                                              */
            uint32            : 26;
    } bit;
  } MACDBGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) Ethernet MAC interrupt status register                     */
    
    struct {
            uint32            : 3;
      __IM  uint32 PMTS       : 1;            /*!< [3..3] PMTS                                                               */
      __IM  uint32 MMCS       : 1;            /*!< [4..4] MMCS                                                               */
      __IM  uint32 MMCRS      : 1;            /*!< [5..5] MMCRS                                                              */
      __IM  uint32 MMCTS      : 1;            /*!< [6..6] MMCTS                                                              */
            uint32            : 2;
      __IOM uint32 TSTS       : 1;            /*!< [9..9] TSTS                                                               */
            uint32            : 22;
    } bit;
  } MACSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) Ethernet MAC interrupt mask register                       */
    
    struct {
            uint32            : 3;
      __IOM uint32 PMTIM      : 1;            /*!< [3..3] PMTIM                                                              */
            uint32            : 5;
      __IOM uint32 TSTIM      : 1;            /*!< [9..9] TSTIM                                                              */
            uint32            : 22;
    } bit;
  } MACIMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) Ethernet MAC address 0 high register                       */
    
    struct {
      __IOM uint32 MACA0H     : 16;           /*!< [15..0] MAC address0 high                                                 */
            uint32            : 15;
      __IM  uint32 MO         : 1;            /*!< [31..31] Always 1                                                         */
    } bit;
  } MACA0HR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000044) Ethernet MAC address 0 low register                        */
    
    struct {
      __IOM uint32 MACA0L     : 32;           /*!< [31..0] 0                                                                 */
    } bit;
  } MACA0LR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) Ethernet MAC address 1 high register                       */
    
    struct {
      __IOM uint32 MACA1H     : 16;           /*!< [15..0] MACA1H                                                            */
            uint32            : 8;
      __IOM uint32 MBC        : 6;            /*!< [29..24] MBC                                                              */
      __IOM uint32 SA         : 1;            /*!< [30..30] SA                                                               */
      __IOM uint32 AE         : 1;            /*!< [31..31] AE                                                               */
    } bit;
  } MACA1HR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) Ethernet MAC address1 low register                         */
    
    struct {
      __IOM uint32 MACA1LR    : 32;           /*!< [31..0] MACA1LR                                                           */
    } bit;
  } MACA1LR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000050) Ethernet MAC address 2 high register                       */
    
    struct {
      __IOM uint32 MAC2AH     : 16;           /*!< [15..0] MAC2AH                                                            */
            uint32            : 8;
      __IOM uint32 MBC        : 6;            /*!< [29..24] MBC                                                              */
      __IOM uint32 SA         : 1;            /*!< [30..30] SA                                                               */
      __IOM uint32 AE         : 1;            /*!< [31..31] AE                                                               */
    } bit;
  } MACA2HR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000054) Ethernet MAC address 2 low register                        */
    
    struct {
      __IOM uint32 MACA2L     : 31;           /*!< [30..0] MACA2L                                                            */
            uint32            : 1;
    } bit;
  } MACA2LR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000058) Ethernet MAC address 3 high register                       */
    
    struct {
      __IOM uint32 MACA3H     : 16;           /*!< [15..0] MACA3H                                                            */
            uint32            : 8;
      __IOM uint32 MBC        : 6;            /*!< [29..24] MBC                                                              */
      __IOM uint32 SA         : 1;            /*!< [30..30] SA                                                               */
      __IOM uint32 AE         : 1;            /*!< [31..31] AE                                                               */
    } bit;
  } MACA3HR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000005C) Ethernet MAC address 3 low register                        */
    
    struct {
      __IOM uint32 MBCA3L     : 32;           /*!< [31..0] MBCA3L                                                            */
    } bit;
  } MACA3LR;
  __IOM uint32  MACRWUFFER;                   /*!< (@ 0x00000060) Ethernet MAC remote wakeup frame filter register           */
} Ethernet_MAC_Type;                            /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                       Ethernet_MMC                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: MAC management counters (Ethernet_MMC)
  */

typedef struct {                                /*!< (@ 0x40028100) Ethernet_MMC Structure                                     */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Ethernet MMC control register                              */
    
    struct {
      __IOM uint32 CR         : 1;            /*!< [0..0] CR                                                                 */
      __IOM uint32 CSR        : 1;            /*!< [1..1] CSR                                                                */
      __IOM uint32 ROR        : 1;            /*!< [2..2] ROR                                                                */
      __IOM uint32 MCF        : 1;            /*!< [3..3] MCF                                                                */
      __IOM uint32 MCP        : 1;            /*!< [4..4] MCP                                                                */
      __IOM uint32 MCFHP      : 1;            /*!< [5..5] MCFHP                                                              */
            uint32            : 26;
    } bit;
  } MMCCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Ethernet MMC receive interrupt register                    */
    
    struct {
            uint32            : 5;
      __IOM uint32 RFCES      : 1;            /*!< [5..5] RFCES                                                              */
      __IOM uint32 RFAES      : 1;            /*!< [6..6] RFAES                                                              */
            uint32            : 10;
      __IOM uint32 RGUFS      : 1;            /*!< [17..17] RGUFS                                                            */
            uint32            : 14;
    } bit;
  } MMCRIR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) Ethernet MMC transmit interrupt register                   */
    
    struct {
            uint32            : 14;
      __IM  uint32 TGFSCS     : 1;            /*!< [14..14] TGFSCS                                                           */
      __IM  uint32 TGFMSCS    : 1;            /*!< [15..15] TGFMSCS                                                          */
            uint32            : 5;
      __IM  uint32 TGFS       : 1;            /*!< [21..21] TGFS                                                             */
            uint32            : 10;
    } bit;
  } MMCTIR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Ethernet MMC receive interrupt mask register               */
    
    struct {
            uint32            : 5;
      __IOM uint32 RFCEM      : 1;            /*!< [5..5] RFCEM                                                              */
      __IOM uint32 RFAEM      : 1;            /*!< [6..6] RFAEM                                                              */
            uint32            : 10;
      __IOM uint32 RGUFM      : 1;            /*!< [17..17] RGUFM                                                            */
            uint32            : 14;
    } bit;
  } MMCRIMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Ethernet MMC transmit interrupt mask register              */
    
    struct {
            uint32            : 14;
      __IOM uint32 TGFSCM     : 1;            /*!< [14..14] TGFSCM                                                           */
      __IOM uint32 TGFMSCM    : 1;            /*!< [15..15] TGFMSCM                                                          */
      __IOM uint32 TGFM       : 1;            /*!< [16..16] TGFM                                                             */
            uint32            : 15;
    } bit;
  } MMCTIMR;
  __IM  uint32  RESERVED[14];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000004C) Ethernet MMC transmitted good frames after a
                                                                    single collision counter                                   */
    
    struct {
      __IM  uint32 TGFSCC     : 32;           /*!< [31..0] TGFSCC                                                            */
    } bit;
  } MMCTGFSCCR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000050) Ethernet MMC transmitted good frames after more
                                                                    than a single collision                                    */
    
    struct {
      __IM  uint32 TGFMSCC    : 32;           /*!< [31..0] TGFMSCC                                                           */
    } bit;
  } MMCTGFMSCCR;
  __IM  uint32  RESERVED1[5];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000068) Ethernet MMC transmitted good frames counter
                                                                    register                                                   */
    
    struct {
      __IM  uint32 TGFC       : 32;           /*!< [31..0] HTL                                                               */
    } bit;
  } MMCTGFCR;
  __IM  uint32  RESERVED2[10];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000094) Ethernet MMC received frames with CRC error counter
                                                                    register                                                   */
    
    struct {
      __IM  uint32 RFCFC      : 32;           /*!< [31..0] RFCFC                                                             */
    } bit;
  } MMCRFCECR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000098) Ethernet MMC received frames with alignment error
                                                                    counter register                                           */
    
    struct {
      __IM  uint32 RFAEC      : 32;           /*!< [31..0] RFAEC                                                             */
    } bit;
  } MMCRFAECR;
  __IM  uint32  RESERVED3[10];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000000C4) MMC received good unicast frames counter register          */
    
    struct {
      __IM  uint32 RGUFC      : 32;           /*!< [31..0] RGUFC                                                             */
    } bit;
  } MMCRGUFCR;
} Ethernet_MMC_Type;                            /*!< Size = 200 (0xc8)                                                         */



/* =========================================================================================================================== */
/* ================                                       Ethernet_PTP                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: Precision time protocol (Ethernet_PTP)
  */

typedef struct {                                /*!< (@ 0x40028700) Ethernet_PTP Structure                                     */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Ethernet PTP time stamp control register                   */
    
    struct {
      __IOM uint32 TSE        : 1;            /*!< [0..0] TSE                                                                */
      __IOM uint32 TSFCU      : 1;            /*!< [1..1] TSFCU                                                              */
      __IOM uint32 TSSTI      : 1;            /*!< [2..2] TSSTI                                                              */
      __IOM uint32 TSSTU      : 1;            /*!< [3..3] TSSTU                                                              */
      __IOM uint32 TSITE      : 1;            /*!< [4..4] TSITE                                                              */
      __IOM uint32 TTSARU     : 1;            /*!< [5..5] TTSARU                                                             */
            uint32            : 2;
      __IOM uint32 TSSARFE    : 1;            /*!< [8..8] TSSARFE                                                            */
      __IOM uint32 TSSSR      : 1;            /*!< [9..9] TSSSR                                                              */
      __IOM uint32 TSPTPPSV2E : 1;            /*!< [10..10] TSPTPPSV2E                                                       */
      __IOM uint32 TSSPTPOEFE : 1;            /*!< [11..11] TSSPTPOEFE                                                       */
      __IOM uint32 TSSIPV6FE  : 1;            /*!< [12..12] TSSIPV6FE                                                        */
      __IOM uint32 TSSIPV4FE  : 1;            /*!< [13..13] TSSIPV4FE                                                        */
      __IOM uint32 TSSEME     : 1;            /*!< [14..14] TSSEME                                                           */
      __IOM uint32 TSSMRME    : 1;            /*!< [15..15] TSSMRME                                                          */
      __IOM uint32 TSCNT      : 2;            /*!< [17..16] TSCNT                                                            */
      __IOM uint32 TSPFFMAE   : 1;            /*!< [18..18] TSPFFMAE                                                         */
            uint32            : 13;
    } bit;
  } PTPTSCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Ethernet PTP subsecond increment register                  */
    
    struct {
      __IOM uint32 STSSI      : 8;            /*!< [7..0] STSSI                                                              */
            uint32            : 24;
    } bit;
  } PTPSSIR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) Ethernet PTP time stamp high register                      */
    
    struct {
      __IM  uint32 STS        : 32;           /*!< [31..0] STS                                                               */
    } bit;
  } PTPTSHR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000000C) Ethernet PTP time stamp low register                       */
    
    struct {
      __IM  uint32 STSS       : 31;           /*!< [30..0] STSS                                                              */
      __IM  uint32 STPNS      : 1;            /*!< [31..31] STPNS                                                            */
    } bit;
  } PTPTSLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Ethernet PTP time stamp high update register               */
    
    struct {
      __IOM uint32 TSUS       : 32;           /*!< [31..0] TSUS                                                              */
    } bit;
  } PTPTSHUR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Ethernet PTP time stamp low update register                */
    
    struct {
      __IOM uint32 TSUSS      : 31;           /*!< [30..0] TSUSS                                                             */
      __IOM uint32 TSUPNS     : 1;            /*!< [31..31] TSUPNS                                                           */
    } bit;
  } PTPTSLUR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) Ethernet PTP time stamp addend register                    */
    
    struct {
      __IOM uint32 TSA        : 32;           /*!< [31..0] TSA                                                               */
    } bit;
  } PTPTSAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) Ethernet PTP target time high register                     */
    
    struct {
      __IOM uint32 TTSH       : 32;           /*!< [31..0] 0                                                                 */
    } bit;
  } PTPTTHR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) Ethernet PTP target time low register                      */
    
    struct {
      __IOM uint32 TTSL       : 32;           /*!< [31..0] TTSL                                                              */
    } bit;
  } PTPTTLR;
  __IM  uint32  RESERVED;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000028) Ethernet PTP time stamp status register                    */
    
    struct {
      __IM  uint32 TSSO       : 1;            /*!< [0..0] TSSO                                                               */
      __IM  uint32 TSTTR      : 1;            /*!< [1..1] TSTTR                                                              */
            uint32            : 30;
    } bit;
  } PTPTSSR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000002C) Ethernet PTP PPS control register                          */
    
    struct {
      __IM  uint32 TSSO       : 1;            /*!< [0..0] TSSO                                                               */
      __IM  uint32 TSTTR      : 1;            /*!< [1..1] TSTTR                                                              */
            uint32            : 30;
    } bit;
  } PTPPPSCR;
} Ethernet_PTP_Type;                            /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                       Ethernet_DMA                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Ethernet: DMA controller operation (Ethernet_DMA)
  */

typedef struct {                                /*!< (@ 0x40029000) Ethernet_DMA Structure                                     */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Ethernet DMA bus mode register                             */
    
    struct {
      __IOM uint32 SR         : 1;            /*!< [0..0] SR                                                                 */
      __IOM uint32 DA         : 1;            /*!< [1..1] DA                                                                 */
      __IOM uint32 DSL        : 5;            /*!< [6..2] DSL                                                                */
      __IOM uint32 EDFE       : 1;            /*!< [7..7] EDFE                                                               */
      __IOM uint32 PBL        : 6;            /*!< [13..8] PBL                                                               */
      __IOM uint32 RTPR       : 2;            /*!< [15..14] RTPR                                                             */
      __IOM uint32 FB         : 1;            /*!< [16..16] FB                                                               */
      __IOM uint32 RDP        : 6;            /*!< [22..17] RDP                                                              */
      __IOM uint32 USP        : 1;            /*!< [23..23] USP                                                              */
      __IOM uint32 FPM        : 1;            /*!< [24..24] FPM                                                              */
      __IOM uint32 AAB        : 1;            /*!< [25..25] AAB                                                              */
      __IOM uint32 MB         : 1;            /*!< [26..26] MB                                                               */
            uint32            : 5;
    } bit;
  } DMABMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Ethernet DMA transmit poll demand register                 */
    
    struct {
      __IOM uint32 TPD        : 32;           /*!< [31..0] TPD                                                               */
    } bit;
  } DMATPDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) EHERNET DMA receive poll demand register                   */
    
    struct {
      __IOM uint32 RPD        : 32;           /*!< [31..0] RPD                                                               */
    } bit;
  } DMARPDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Ethernet DMA receive descriptor list address
                                                                    register                                                   */
    
    struct {
      __IOM uint32 SRL        : 32;           /*!< [31..0] SRL                                                               */
    } bit;
  } DMARDLAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Ethernet DMA transmit descriptor list address
                                                                    register                                                   */
    
    struct {
      __IOM uint32 STL        : 32;           /*!< [31..0] STL                                                               */
    } bit;
  } DMATDLAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Ethernet DMA status register                               */
    
    struct {
      __IOM uint32 TS         : 1;            /*!< [0..0] TS                                                                 */
      __IOM uint32 TPSS       : 1;            /*!< [1..1] TPSS                                                               */
      __IOM uint32 TBUS       : 1;            /*!< [2..2] TBUS                                                               */
      __IOM uint32 TJTS       : 1;            /*!< [3..3] TJTS                                                               */
      __IOM uint32 ROS        : 1;            /*!< [4..4] ROS                                                                */
      __IOM uint32 TUS        : 1;            /*!< [5..5] TUS                                                                */
      __IOM uint32 RS         : 1;            /*!< [6..6] RS                                                                 */
      __IOM uint32 RBUS       : 1;            /*!< [7..7] RBUS                                                               */
      __IOM uint32 RPSS       : 1;            /*!< [8..8] RPSS                                                               */
      __IOM uint32 PWTS       : 1;            /*!< [9..9] PWTS                                                               */
      __IOM uint32 ETS        : 1;            /*!< [10..10] ETS                                                              */
            uint32            : 2;
      __IOM uint32 FBES       : 1;            /*!< [13..13] FBES                                                             */
      __IOM uint32 ERS        : 1;            /*!< [14..14] ERS                                                              */
      __IOM uint32 AIS        : 1;            /*!< [15..15] AIS                                                              */
      __IOM uint32 NIS        : 1;            /*!< [16..16] NIS                                                              */
      __IM  uint32 RPS        : 3;            /*!< [19..17] RPS                                                              */
      __IM  uint32 TPS        : 3;            /*!< [22..20] TPS                                                              */
      __IM  uint32 EBS        : 3;            /*!< [25..23] EBS                                                              */
            uint32            : 1;
      __IM  uint32 MMCS       : 1;            /*!< [27..27] MMCS                                                             */
      __IM  uint32 PMTS       : 1;            /*!< [28..28] PMTS                                                             */
      __IM  uint32 TSTS       : 1;            /*!< [29..29] TSTS                                                             */
            uint32            : 2;
    } bit;
  } DMASR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) Ethernet DMA operation mode register                       */
    
    struct {
            uint32            : 1;
      __IOM uint32 SR         : 1;            /*!< [1..1] SR                                                                 */
      __IOM uint32 OSF        : 1;            /*!< [2..2] OSF                                                                */
      __IOM uint32 RTC        : 2;            /*!< [4..3] RTC                                                                */
            uint32            : 1;
      __IOM uint32 FUGF       : 1;            /*!< [6..6] FUGF                                                               */
      __IOM uint32 FEF        : 1;            /*!< [7..7] FEF                                                                */
            uint32            : 5;
      __IOM uint32 ST         : 1;            /*!< [13..13] ST                                                               */
      __IOM uint32 TTC        : 3;            /*!< [16..14] TTC                                                              */
            uint32            : 3;
      __IOM uint32 FTF        : 1;            /*!< [20..20] FTF                                                              */
      __IOM uint32 TSF        : 1;            /*!< [21..21] TSF                                                              */
            uint32            : 2;
      __IOM uint32 DFRF       : 1;            /*!< [24..24] DFRF                                                             */
      __IOM uint32 RSF        : 1;            /*!< [25..25] RSF                                                              */
      __IOM uint32 DTCEFD     : 1;            /*!< [26..26] DTCEFD                                                           */
            uint32            : 5;
    } bit;
  } DMAOMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) Ethernet DMA interrupt enable register                     */
    
    struct {
      __IOM uint32 TIE        : 1;            /*!< [0..0] TIE                                                                */
      __IOM uint32 TPSIE      : 1;            /*!< [1..1] TPSIE                                                              */
      __IOM uint32 TBUIE      : 1;            /*!< [2..2] TBUIE                                                              */
      __IOM uint32 TJTIE      : 1;            /*!< [3..3] TJTIE                                                              */
      __IOM uint32 ROIE       : 1;            /*!< [4..4] ROIE                                                               */
      __IOM uint32 TUIE       : 1;            /*!< [5..5] TUIE                                                               */
      __IOM uint32 RIE        : 1;            /*!< [6..6] RIE                                                                */
      __IOM uint32 RBUIE      : 1;            /*!< [7..7] RBUIE                                                              */
      __IOM uint32 RPSIE      : 1;            /*!< [8..8] RPSIE                                                              */
      __IOM uint32 RWTIE      : 1;            /*!< [9..9] RWTIE                                                              */
      __IOM uint32 ETIE       : 1;            /*!< [10..10] ETIE                                                             */
            uint32            : 2;
      __IOM uint32 FBEIE      : 1;            /*!< [13..13] FBEIE                                                            */
      __IOM uint32 ERIE       : 1;            /*!< [14..14] ERIE                                                             */
      __IOM uint32 AISE       : 1;            /*!< [15..15] AISE                                                             */
      __IOM uint32 NISE       : 1;            /*!< [16..16] NISE                                                             */
            uint32            : 15;
    } bit;
  } DMAIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) Ethernet DMA missed frame and buffer overflow
                                                                    counter register                                           */
    
    struct {
      __IOM uint32 MFC        : 16;           /*!< [15..0] MFC                                                               */
      __IOM uint32 OMFC       : 1;            /*!< [16..16] OMFC                                                             */
      __IOM uint32 MFA        : 11;           /*!< [27..17] MFA                                                              */
      __IOM uint32 OFOC       : 1;            /*!< [28..28] OFOC                                                             */
            uint32            : 3;
    } bit;
  } DMAMFBOCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) Ethernet DMA receive status watchdog timer register        */
    
    struct {
      __IOM uint32 RSWTC      : 8;            /*!< [7..0] RSWTC                                                              */
            uint32            : 24;
    } bit;
  } DMARSWTR;
  __IM  uint32  RESERVED[8];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000048) Ethernet DMA current host transmit descriptor
                                                                    register                                                   */
    
    struct {
      __IM  uint32 HTDAP      : 32;           /*!< [31..0] HTDAP                                                             */
    } bit;
  } DMACHTDR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000004C) Ethernet DMA current host receive descriptor
                                                                    register                                                   */
    
    struct {
      __IM  uint32 HRDAP      : 32;           /*!< [31..0] HRDAP                                                             */
    } bit;
  } DMACHRDR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000050) Ethernet DMA current host transmit buffer address
                                                                    register                                                   */
    
    struct {
      __IM  uint32 HTBAP      : 32;           /*!< [31..0] HTBAP                                                             */
    } bit;
  } DMACHTBAR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000054) Ethernet DMA current host receive buffer address
                                                                    register                                                   */
    
    struct {
      __IM  uint32 HRBAP      : 32;           /*!< [31..0] HRBAP                                                             */
    } bit;
  } DMACHRBAR;
} Ethernet_DMA_Type;                            /*!< Size = 88 (0x58)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cryptographic processor (CRC)
  */

typedef struct {                                /*!< (@ 0x40023000) CRC Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Data register                                              */
    
    struct {
      __IOM uint32 DR         : 32;           /*!< [31..0] Data Register                                                     */
    } bit;
  } DR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Independent Data register                                  */
    
    struct {
      __IOM uint32 IDR        : 8;            /*!< [7..0] Independent Data register                                          */
            uint32            : 24;
    } bit;
  } IDR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000008) Control register                                           */
    
    struct {
      __OM  uint32 CR         : 1;            /*!< [0..0] Control regidter                                                   */
            uint32            : 31;
    } bit;
  } CR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Initial CRC value                                          */
    
    struct {
      __IOM uint32 CRC_INIT   : 32;           /*!< [31..0] Programmable initial CRC value                                    */
    } bit;
  } INIT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) CRC polynomial                                             */
    
    struct {
      __IOM uint32 POL        : 32;           /*!< [31..0] Programmable polynomial                                           */
    } bit;
  } POL;
} CRC_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           CAN1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Controller area network (CAN1)
  */

typedef struct {                                /*!< (@ 0x40006400) CAN1 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) master control register                                    */
    
    struct {
      __IOM uint32 INRQ       : 1;            /*!< [0..0] INRQ                                                               */
      __IOM uint32 SLEEP      : 1;            /*!< [1..1] SLEEP                                                              */
      __IOM uint32 TXFP       : 1;            /*!< [2..2] TXFP                                                               */
      __IOM uint32 RFLM       : 1;            /*!< [3..3] RFLM                                                               */
      __IOM uint32 NART       : 1;            /*!< [4..4] NART                                                               */
      __IOM uint32 AWUM       : 1;            /*!< [5..5] AWUM                                                               */
      __IOM uint32 ABOM       : 1;            /*!< [6..6] ABOM                                                               */
      __IOM uint32 TTCM       : 1;            /*!< [7..7] TTCM                                                               */
            uint32            : 7;
      __IOM uint32 RESET      : 1;            /*!< [15..15] RESET                                                            */
      __IOM uint32 DBF        : 1;            /*!< [16..16] DBF                                                              */
            uint32            : 15;
    } bit;
  } MCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) master status register                                     */
    
    struct {
      __IM  uint32 INAK       : 1;            /*!< [0..0] INAK                                                               */
      __IM  uint32 SLAK       : 1;            /*!< [1..1] SLAK                                                               */
      __IOM uint32 ERRI       : 1;            /*!< [2..2] ERRI                                                               */
      __IOM uint32 WKUI       : 1;            /*!< [3..3] WKUI                                                               */
      __IOM uint32 SLAKI      : 1;            /*!< [4..4] SLAKI                                                              */
            uint32            : 3;
      __IM  uint32 TXM        : 1;            /*!< [8..8] TXM                                                                */
      __IM  uint32 RXM        : 1;            /*!< [9..9] RXM                                                                */
      __IM  uint32 SAMP       : 1;            /*!< [10..10] SAMP                                                             */
      __IM  uint32 RX         : 1;            /*!< [11..11] RX                                                               */
            uint32            : 20;
    } bit;
  } MSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) transmit status register                                   */
    
    struct {
      __IOM uint32 RQCP0      : 1;            /*!< [0..0] RQCP0                                                              */
      __IOM uint32 TXOK0      : 1;            /*!< [1..1] TXOK0                                                              */
      __IOM uint32 ALST0      : 1;            /*!< [2..2] ALST0                                                              */
      __IOM uint32 TERR0      : 1;            /*!< [3..3] TERR0                                                              */
            uint32            : 3;
      __IOM uint32 ABRQ0      : 1;            /*!< [7..7] ABRQ0                                                              */
      __IOM uint32 RQCP1      : 1;            /*!< [8..8] RQCP1                                                              */
      __IOM uint32 TXOK1      : 1;            /*!< [9..9] TXOK1                                                              */
      __IOM uint32 ALST1      : 1;            /*!< [10..10] ALST1                                                            */
      __IOM uint32 TERR1      : 1;            /*!< [11..11] TERR1                                                            */
            uint32            : 3;
      __IOM uint32 ABRQ1      : 1;            /*!< [15..15] ABRQ1                                                            */
      __IOM uint32 RQCP2      : 1;            /*!< [16..16] RQCP2                                                            */
      __IOM uint32 TXOK2      : 1;            /*!< [17..17] TXOK2                                                            */
      __IOM uint32 ALST2      : 1;            /*!< [18..18] ALST2                                                            */
      __IOM uint32 TERR2      : 1;            /*!< [19..19] TERR2                                                            */
            uint32            : 3;
      __IOM uint32 ABRQ2      : 1;            /*!< [23..23] ABRQ2                                                            */
      __IM  uint32 CODE       : 2;            /*!< [25..24] CODE                                                             */
      __IM  uint32 TME0       : 1;            /*!< [26..26] Lowest priority flag for mailbox 0                               */
      __IM  uint32 TME1       : 1;            /*!< [27..27] Lowest priority flag for mailbox 1                               */
      __IM  uint32 TME2       : 1;            /*!< [28..28] Lowest priority flag for mailbox 2                               */
      __IM  uint32 LOW0       : 1;            /*!< [29..29] Lowest priority flag for mailbox 0                               */
      __IM  uint32 LOW1       : 1;            /*!< [30..30] Lowest priority flag for mailbox 1                               */
      __IM  uint32 LOW2       : 1;            /*!< [31..31] Lowest priority flag for mailbox 2                               */
    } bit;
  } TSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) receive FIFO 0 register                                    */
    
    struct {
      __IM  uint32 FMP0       : 2;            /*!< [1..0] FMP0                                                               */
            uint32            : 1;
      __IOM uint32 FULL0      : 1;            /*!< [3..3] FULL0                                                              */
      __IOM uint32 FOVR0      : 1;            /*!< [4..4] FOVR0                                                              */
      __IOM uint32 RFOM0      : 1;            /*!< [5..5] RFOM0                                                              */
            uint32            : 26;
    } bit;
  } RF0R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) receive FIFO 1 register                                    */
    
    struct {
      __IM  uint32 FMP1       : 2;            /*!< [1..0] FMP1                                                               */
            uint32            : 1;
      __IOM uint32 FULL1      : 1;            /*!< [3..3] FULL1                                                              */
      __IOM uint32 FOVR1      : 1;            /*!< [4..4] FOVR1                                                              */
      __IOM uint32 RFOM1      : 1;            /*!< [5..5] RFOM1                                                              */
            uint32            : 26;
    } bit;
  } RF1R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) interrupt enable register                                  */
    
    struct {
      __IOM uint32 TMEIE      : 1;            /*!< [0..0] TMEIE                                                              */
      __IOM uint32 FMPIE0     : 1;            /*!< [1..1] FMPIE0                                                             */
      __IOM uint32 FFIE0      : 1;            /*!< [2..2] FFIE0                                                              */
      __IOM uint32 FOVIE0     : 1;            /*!< [3..3] FOVIE0                                                             */
      __IOM uint32 FMPIE1     : 1;            /*!< [4..4] FMPIE1                                                             */
      __IOM uint32 FFIE1      : 1;            /*!< [5..5] FFIE1                                                              */
      __IOM uint32 FOVIE1     : 1;            /*!< [6..6] FOVIE1                                                             */
            uint32            : 1;
      __IOM uint32 EWGIE      : 1;            /*!< [8..8] EWGIE                                                              */
      __IOM uint32 EPVIE      : 1;            /*!< [9..9] EPVIE                                                              */
      __IOM uint32 BOFIE      : 1;            /*!< [10..10] BOFIE                                                            */
      __IOM uint32 LECIE      : 1;            /*!< [11..11] LECIE                                                            */
            uint32            : 3;
      __IOM uint32 ERRIE      : 1;            /*!< [15..15] ERRIE                                                            */
      __IOM uint32 WKUIE      : 1;            /*!< [16..16] WKUIE                                                            */
      __IOM uint32 SLKIE      : 1;            /*!< [17..17] SLKIE                                                            */
            uint32            : 14;
    } bit;
  } IER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) interrupt enable register                                  */
    
    struct {
      __IM  uint32 EWGF       : 1;            /*!< [0..0] EWGF                                                               */
      __IM  uint32 EPVF       : 1;            /*!< [1..1] EPVF                                                               */
      __IM  uint32 BOFF       : 1;            /*!< [2..2] BOFF                                                               */
            uint32            : 1;
      __IOM uint32 LEC        : 3;            /*!< [6..4] LEC                                                                */
            uint32            : 9;
      __IM  uint32 TEC        : 8;            /*!< [23..16] TEC                                                              */
      __IM  uint32 REC        : 8;            /*!< [31..24] REC                                                              */
    } bit;
  } ESR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) bit timing register                                        */
    
    struct {
      __IOM uint32 BRP        : 10;           /*!< [9..0] BRP                                                                */
            uint32            : 6;
      __IOM uint32 TS1        : 4;            /*!< [19..16] TS1                                                              */
      __IOM uint32 TS2        : 3;            /*!< [22..20] TS2                                                              */
            uint32            : 1;
      __IOM uint32 SJW        : 2;            /*!< [25..24] SJW                                                              */
            uint32            : 4;
      __IOM uint32 LBKM       : 1;            /*!< [30..30] LBKM                                                             */
      __IOM uint32 SILM       : 1;            /*!< [31..31] SILM                                                             */
    } bit;
  } BTR;
  __IM  uint32  RESERVED[88];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000180) TX mailbox identifier register                             */
    
    struct {
      __IOM uint32 TXRQ       : 1;            /*!< [0..0] TXRQ                                                               */
      __IOM uint32 RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IOM uint32 IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IOM uint32 EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IOM uint32 STID       : 11;           /*!< [31..21] STID                                                             */
    } bit;
  } TI0R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000184) mailbox data length control and time stamp register        */
    
    struct {
      __IOM uint32 DLC        : 4;            /*!< [3..0] DLC                                                                */
            uint32            : 4;
      __IOM uint32 TGT        : 1;            /*!< [8..8] TGT                                                                */
            uint32            : 7;
      __IOM uint32 TIME       : 16;           /*!< [31..16] TIME                                                             */
    } bit;
  } TDT0R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000188) mailbox data low register                                  */
    
    struct {
      __IOM uint32 DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IOM uint32 DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IOM uint32 DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IOM uint32 DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } bit;
  } TDL0R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000018C) mailbox data high register                                 */
    
    struct {
      __IOM uint32 DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IOM uint32 DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IOM uint32 DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IOM uint32 DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } bit;
  } TDH0R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000190) mailbox identifier register                                */
    
    struct {
      __IOM uint32 TXRQ       : 1;            /*!< [0..0] TXRQ                                                               */
      __IOM uint32 RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IOM uint32 IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IOM uint32 EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IOM uint32 STID       : 11;           /*!< [31..21] STID                                                             */
    } bit;
  } TI1R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000194) mailbox data length control and time stamp register        */
    
    struct {
      __IOM uint32 DLC        : 4;            /*!< [3..0] DLC                                                                */
            uint32            : 4;
      __IOM uint32 TGT        : 1;            /*!< [8..8] TGT                                                                */
            uint32            : 7;
      __IOM uint32 TIME       : 16;           /*!< [31..16] TIME                                                             */
    } bit;
  } TDT1R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000198) mailbox data low register                                  */
    
    struct {
      __IOM uint32 DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IOM uint32 DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IOM uint32 DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IOM uint32 DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } bit;
  } TDL1R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000019C) mailbox data high register                                 */
    
    struct {
      __IOM uint32 DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IOM uint32 DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IOM uint32 DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IOM uint32 DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } bit;
  } TDH1R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A0) mailbox identifier register                                */
    
    struct {
      __IOM uint32 TXRQ       : 1;            /*!< [0..0] TXRQ                                                               */
      __IOM uint32 RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IOM uint32 IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IOM uint32 EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IOM uint32 STID       : 11;           /*!< [31..21] STID                                                             */
    } bit;
  } TI2R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A4) mailbox data length control and time stamp register        */
    
    struct {
      __IOM uint32 DLC        : 4;            /*!< [3..0] DLC                                                                */
            uint32            : 4;
      __IOM uint32 TGT        : 1;            /*!< [8..8] TGT                                                                */
            uint32            : 7;
      __IOM uint32 TIME       : 16;           /*!< [31..16] TIME                                                             */
    } bit;
  } TDT2R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A8) mailbox data low register                                  */
    
    struct {
      __IOM uint32 DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IOM uint32 DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IOM uint32 DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IOM uint32 DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } bit;
  } TDL2R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001AC) mailbox data high register                                 */
    
    struct {
      __IOM uint32 DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IOM uint32 DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IOM uint32 DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IOM uint32 DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } bit;
  } TDH2R;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001B0) receive FIFO mailbox identifier register                   */
    
    struct {
            uint32            : 1;
      __IM  uint32 RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IM  uint32 IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IM  uint32 EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IM  uint32 STID       : 11;           /*!< [31..21] STID                                                             */
    } bit;
  } RI0R;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001B4) mailbox data high register                                 */
    
    struct {
      __IM  uint32 DLC        : 4;            /*!< [3..0] DLC                                                                */
            uint32            : 4;
      __IM  uint32 FMI        : 8;            /*!< [15..8] FMI                                                               */
      __IM  uint32 TIME       : 16;           /*!< [31..16] TIME                                                             */
    } bit;
  } RDT0R;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001B8) mailbox data high register                                 */
    
    struct {
      __IM  uint32 DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IM  uint32 DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IM  uint32 DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IM  uint32 DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } bit;
  } RDL0R;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001BC) receive FIFO mailbox data high register                    */
    
    struct {
      __IM  uint32 DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IM  uint32 DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IM  uint32 DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IM  uint32 DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } bit;
  } RDH0R;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001C0) mailbox data high register                                 */
    
    struct {
            uint32            : 1;
      __IM  uint32 RTR        : 1;            /*!< [1..1] RTR                                                                */
      __IM  uint32 IDE        : 1;            /*!< [2..2] IDE                                                                */
      __IM  uint32 EXID       : 18;           /*!< [20..3] EXID                                                              */
      __IM  uint32 STID       : 11;           /*!< [31..21] STID                                                             */
    } bit;
  } RI1R;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001C4) mailbox data high register                                 */
    
    struct {
      __IM  uint32 DLC        : 4;            /*!< [3..0] DLC                                                                */
            uint32            : 4;
      __IM  uint32 FMI        : 8;            /*!< [15..8] FMI                                                               */
      __IM  uint32 TIME       : 16;           /*!< [31..16] TIME                                                             */
    } bit;
  } RDT1R;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001C8) mailbox data high register                                 */
    
    struct {
      __IM  uint32 DATA0      : 8;            /*!< [7..0] DATA0                                                              */
      __IM  uint32 DATA1      : 8;            /*!< [15..8] DATA1                                                             */
      __IM  uint32 DATA2      : 8;            /*!< [23..16] DATA2                                                            */
      __IM  uint32 DATA3      : 8;            /*!< [31..24] DATA3                                                            */
    } bit;
  } RDL1R;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001CC) mailbox data high register                                 */
    
    struct {
      __IM  uint32 DATA4      : 8;            /*!< [7..0] DATA4                                                              */
      __IM  uint32 DATA5      : 8;            /*!< [15..8] DATA5                                                             */
      __IM  uint32 DATA6      : 8;            /*!< [23..16] DATA6                                                            */
      __IM  uint32 DATA7      : 8;            /*!< [31..24] DATA7                                                            */
    } bit;
  } RDH1R;
  __IM  uint32  RESERVED1[12];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000200) filter master register                                     */
    
    struct {
      __IOM uint32 FINIT      : 1;            /*!< [0..0] FINIT                                                              */
            uint32            : 7;
      __IOM uint32 CAN2SB     : 6;            /*!< [13..8] CAN2SB                                                            */
            uint32            : 18;
    } bit;
  } FMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000204) filter mode register                                       */
    
    struct {
      __IOM uint32 FBM0       : 1;            /*!< [0..0] Filter mode                                                        */
      __IOM uint32 FBM1       : 1;            /*!< [1..1] Filter mode                                                        */
      __IOM uint32 FBM2       : 1;            /*!< [2..2] Filter mode                                                        */
      __IOM uint32 FBM3       : 1;            /*!< [3..3] Filter mode                                                        */
      __IOM uint32 FBM4       : 1;            /*!< [4..4] Filter mode                                                        */
      __IOM uint32 FBM5       : 1;            /*!< [5..5] Filter mode                                                        */
      __IOM uint32 FBM6       : 1;            /*!< [6..6] Filter mode                                                        */
      __IOM uint32 FBM7       : 1;            /*!< [7..7] Filter mode                                                        */
      __IOM uint32 FBM8       : 1;            /*!< [8..8] Filter mode                                                        */
      __IOM uint32 FBM9       : 1;            /*!< [9..9] Filter mode                                                        */
      __IOM uint32 FBM10      : 1;            /*!< [10..10] Filter mode                                                      */
      __IOM uint32 FBM11      : 1;            /*!< [11..11] Filter mode                                                      */
      __IOM uint32 FBM12      : 1;            /*!< [12..12] Filter mode                                                      */
      __IOM uint32 FBM13      : 1;            /*!< [13..13] Filter mode                                                      */
      __IOM uint32 FBM14      : 1;            /*!< [14..14] Filter mode                                                      */
      __IOM uint32 FBM15      : 1;            /*!< [15..15] Filter mode                                                      */
      __IOM uint32 FBM16      : 1;            /*!< [16..16] Filter mode                                                      */
      __IOM uint32 FBM17      : 1;            /*!< [17..17] Filter mode                                                      */
      __IOM uint32 FBM18      : 1;            /*!< [18..18] Filter mode                                                      */
      __IOM uint32 FBM19      : 1;            /*!< [19..19] Filter mode                                                      */
      __IOM uint32 FBM20      : 1;            /*!< [20..20] Filter mode                                                      */
      __IOM uint32 FBM21      : 1;            /*!< [21..21] Filter mode                                                      */
      __IOM uint32 FBM22      : 1;            /*!< [22..22] Filter mode                                                      */
      __IOM uint32 FBM23      : 1;            /*!< [23..23] Filter mode                                                      */
      __IOM uint32 FBM24      : 1;            /*!< [24..24] Filter mode                                                      */
      __IOM uint32 FBM25      : 1;            /*!< [25..25] Filter mode                                                      */
      __IOM uint32 FBM26      : 1;            /*!< [26..26] Filter mode                                                      */
      __IOM uint32 FBM27      : 1;            /*!< [27..27] Filter mode                                                      */
            uint32            : 4;
    } bit;
  } FM1R;
  __IM  uint32  RESERVED2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000020C) filter scale register                                      */
    
    struct {
      __IOM uint32 FSC0       : 1;            /*!< [0..0] Filter scale configuration                                         */
      __IOM uint32 FSC1       : 1;            /*!< [1..1] Filter scale configuration                                         */
      __IOM uint32 FSC2       : 1;            /*!< [2..2] Filter scale configuration                                         */
      __IOM uint32 FSC3       : 1;            /*!< [3..3] Filter scale configuration                                         */
      __IOM uint32 FSC4       : 1;            /*!< [4..4] Filter scale configuration                                         */
      __IOM uint32 FSC5       : 1;            /*!< [5..5] Filter scale configuration                                         */
      __IOM uint32 FSC6       : 1;            /*!< [6..6] Filter scale configuration                                         */
      __IOM uint32 FSC7       : 1;            /*!< [7..7] Filter scale configuration                                         */
      __IOM uint32 FSC8       : 1;            /*!< [8..8] Filter scale configuration                                         */
      __IOM uint32 FSC9       : 1;            /*!< [9..9] Filter scale configuration                                         */
      __IOM uint32 FSC10      : 1;            /*!< [10..10] Filter scale configuration                                       */
      __IOM uint32 FSC11      : 1;            /*!< [11..11] Filter scale configuration                                       */
      __IOM uint32 FSC12      : 1;            /*!< [12..12] Filter scale configuration                                       */
      __IOM uint32 FSC13      : 1;            /*!< [13..13] Filter scale configuration                                       */
      __IOM uint32 FSC14      : 1;            /*!< [14..14] Filter scale configuration                                       */
      __IOM uint32 FSC15      : 1;            /*!< [15..15] Filter scale configuration                                       */
      __IOM uint32 FSC16      : 1;            /*!< [16..16] Filter scale configuration                                       */
      __IOM uint32 FSC17      : 1;            /*!< [17..17] Filter scale configuration                                       */
      __IOM uint32 FSC18      : 1;            /*!< [18..18] Filter scale configuration                                       */
      __IOM uint32 FSC19      : 1;            /*!< [19..19] Filter scale configuration                                       */
      __IOM uint32 FSC20      : 1;            /*!< [20..20] Filter scale configuration                                       */
      __IOM uint32 FSC21      : 1;            /*!< [21..21] Filter scale configuration                                       */
      __IOM uint32 FSC22      : 1;            /*!< [22..22] Filter scale configuration                                       */
      __IOM uint32 FSC23      : 1;            /*!< [23..23] Filter scale configuration                                       */
      __IOM uint32 FSC24      : 1;            /*!< [24..24] Filter scale configuration                                       */
      __IOM uint32 FSC25      : 1;            /*!< [25..25] Filter scale configuration                                       */
      __IOM uint32 FSC26      : 1;            /*!< [26..26] Filter scale configuration                                       */
      __IOM uint32 FSC27      : 1;            /*!< [27..27] Filter scale configuration                                       */
            uint32            : 4;
    } bit;
  } FS1R;
  __IM  uint32  RESERVED3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000214) filter FIFO assignment register                            */
    
    struct {
      __IOM uint32 FFA0       : 1;            /*!< [0..0] Filter FIFO assignment for filter 0                                */
      __IOM uint32 FFA1       : 1;            /*!< [1..1] Filter FIFO assignment for filter 1                                */
      __IOM uint32 FFA2       : 1;            /*!< [2..2] Filter FIFO assignment for filter 2                                */
      __IOM uint32 FFA3       : 1;            /*!< [3..3] Filter FIFO assignment for filter 3                                */
      __IOM uint32 FFA4       : 1;            /*!< [4..4] Filter FIFO assignment for filter 4                                */
      __IOM uint32 FFA5       : 1;            /*!< [5..5] Filter FIFO assignment for filter 5                                */
      __IOM uint32 FFA6       : 1;            /*!< [6..6] Filter FIFO assignment for filter 6                                */
      __IOM uint32 FFA7       : 1;            /*!< [7..7] Filter FIFO assignment for filter 7                                */
      __IOM uint32 FFA8       : 1;            /*!< [8..8] Filter FIFO assignment for filter 8                                */
      __IOM uint32 FFA9       : 1;            /*!< [9..9] Filter FIFO assignment for filter 9                                */
      __IOM uint32 FFA10      : 1;            /*!< [10..10] Filter FIFO assignment for filter 10                             */
      __IOM uint32 FFA11      : 1;            /*!< [11..11] Filter FIFO assignment for filter 11                             */
      __IOM uint32 FFA12      : 1;            /*!< [12..12] Filter FIFO assignment for filter 12                             */
      __IOM uint32 FFA13      : 1;            /*!< [13..13] Filter FIFO assignment for filter 13                             */
      __IOM uint32 FFA14      : 1;            /*!< [14..14] Filter FIFO assignment for filter 14                             */
      __IOM uint32 FFA15      : 1;            /*!< [15..15] Filter FIFO assignment for filter 15                             */
      __IOM uint32 FFA16      : 1;            /*!< [16..16] Filter FIFO assignment for filter 16                             */
      __IOM uint32 FFA17      : 1;            /*!< [17..17] Filter FIFO assignment for filter 17                             */
      __IOM uint32 FFA18      : 1;            /*!< [18..18] Filter FIFO assignment for filter 18                             */
      __IOM uint32 FFA19      : 1;            /*!< [19..19] Filter FIFO assignment for filter 19                             */
      __IOM uint32 FFA20      : 1;            /*!< [20..20] Filter FIFO assignment for filter 20                             */
      __IOM uint32 FFA21      : 1;            /*!< [21..21] Filter FIFO assignment for filter 21                             */
      __IOM uint32 FFA22      : 1;            /*!< [22..22] Filter FIFO assignment for filter 22                             */
      __IOM uint32 FFA23      : 1;            /*!< [23..23] Filter FIFO assignment for filter 23                             */
      __IOM uint32 FFA24      : 1;            /*!< [24..24] Filter FIFO assignment for filter 24                             */
      __IOM uint32 FFA25      : 1;            /*!< [25..25] Filter FIFO assignment for filter 25                             */
      __IOM uint32 FFA26      : 1;            /*!< [26..26] Filter FIFO assignment for filter 26                             */
      __IOM uint32 FFA27      : 1;            /*!< [27..27] Filter FIFO assignment for filter 27                             */
            uint32            : 4;
    } bit;
  } FFA1R;
  __IM  uint32  RESERVED4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000021C) filter activation register                                 */
    
    struct {
      __IOM uint32 FACT0      : 1;            /*!< [0..0] Filter active                                                      */
      __IOM uint32 FACT1      : 1;            /*!< [1..1] Filter active                                                      */
      __IOM uint32 FACT2      : 1;            /*!< [2..2] Filter active                                                      */
      __IOM uint32 FACT3      : 1;            /*!< [3..3] Filter active                                                      */
      __IOM uint32 FACT4      : 1;            /*!< [4..4] Filter active                                                      */
      __IOM uint32 FACT5      : 1;            /*!< [5..5] Filter active                                                      */
      __IOM uint32 FACT6      : 1;            /*!< [6..6] Filter active                                                      */
      __IOM uint32 FACT7      : 1;            /*!< [7..7] Filter active                                                      */
      __IOM uint32 FACT8      : 1;            /*!< [8..8] Filter active                                                      */
      __IOM uint32 FACT9      : 1;            /*!< [9..9] Filter active                                                      */
      __IOM uint32 FACT10     : 1;            /*!< [10..10] Filter active                                                    */
      __IOM uint32 FACT11     : 1;            /*!< [11..11] Filter active                                                    */
      __IOM uint32 FACT12     : 1;            /*!< [12..12] Filter active                                                    */
      __IOM uint32 FACT13     : 1;            /*!< [13..13] Filter active                                                    */
      __IOM uint32 FACT14     : 1;            /*!< [14..14] Filter active                                                    */
      __IOM uint32 FACT15     : 1;            /*!< [15..15] Filter active                                                    */
      __IOM uint32 FACT16     : 1;            /*!< [16..16] Filter active                                                    */
      __IOM uint32 FACT17     : 1;            /*!< [17..17] Filter active                                                    */
      __IOM uint32 FACT18     : 1;            /*!< [18..18] Filter active                                                    */
      __IOM uint32 FACT19     : 1;            /*!< [19..19] Filter active                                                    */
      __IOM uint32 FACT20     : 1;            /*!< [20..20] Filter active                                                    */
      __IOM uint32 FACT21     : 1;            /*!< [21..21] Filter active                                                    */
      __IOM uint32 FACT22     : 1;            /*!< [22..22] Filter active                                                    */
      __IOM uint32 FACT23     : 1;            /*!< [23..23] Filter active                                                    */
      __IOM uint32 FACT24     : 1;            /*!< [24..24] Filter active                                                    */
      __IOM uint32 FACT25     : 1;            /*!< [25..25] Filter active                                                    */
      __IOM uint32 FACT26     : 1;            /*!< [26..26] Filter active                                                    */
      __IOM uint32 FACT27     : 1;            /*!< [27..27] Filter active                                                    */
            uint32            : 4;
    } bit;
  } FA1R;
  __IM  uint32  RESERVED5[8];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000240) Filter bank 0 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F0R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000244) Filter bank 0 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F0R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000248) Filter bank 1 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F1R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000024C) Filter bank 1 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F1R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000250) Filter bank 2 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F2R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000254) Filter bank 2 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F2R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000258) Filter bank 3 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F3R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000025C) Filter bank 3 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F3R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000260) Filter bank 4 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F4R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000264) Filter bank 4 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F4R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000268) Filter bank 5 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F5R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000026C) Filter bank 5 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F5R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000270) Filter bank 6 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F6R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000274) Filter bank 6 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F6R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000278) Filter bank 7 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F7R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000027C) Filter bank 7 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F7R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000280) Filter bank 8 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F8R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000284) Filter bank 8 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F8R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000288) Filter bank 9 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F9R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000028C) Filter bank 9 register 2                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F9R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000290) Filter bank 10 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F10R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000294) Filter bank 10 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F10R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000298) Filter bank 11 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F11R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000029C) Filter bank 11 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F11R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002A0) Filter bank 4 register 1                                   */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F12R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002A4) Filter bank 12 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F12R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002A8) Filter bank 13 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F13R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002AC) Filter bank 13 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F13R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002B0) Filter bank 14 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F14R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002B4) Filter bank 14 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F14R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002B8) Filter bank 15 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F15R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002BC) Filter bank 15 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F15R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002C0) Filter bank 16 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F16R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002C4) Filter bank 16 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F16R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002C8) Filter bank 17 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F17R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002CC) Filter bank 17 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F17R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002D0) Filter bank 18 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F18R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002D4) Filter bank 18 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F18R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002D8) Filter bank 19 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F19R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002DC) Filter bank 19 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F19R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002E0) Filter bank 20 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F20R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002E4) Filter bank 20 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F20R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002E8) Filter bank 21 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F21R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002EC) Filter bank 21 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F21R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002F0) Filter bank 22 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F22R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002F4) Filter bank 22 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F22R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002F8) Filter bank 23 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F23R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002FC) Filter bank 23 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F23R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000300) Filter bank 24 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F24R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000304) Filter bank 24 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F24R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000308) Filter bank 25 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F25R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000030C) Filter bank 25 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F25R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000310) Filter bank 26 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F26R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000314) Filter bank 26 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F26R2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000318) Filter bank 27 register 1                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F27R1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000031C) Filter bank 27 register 2                                  */
    
    struct {
      __IOM uint32 FB0        : 1;            /*!< [0..0] Filter bits                                                        */
      __IOM uint32 FB1        : 1;            /*!< [1..1] Filter bits                                                        */
      __IOM uint32 FB2        : 1;            /*!< [2..2] Filter bits                                                        */
      __IOM uint32 FB3        : 1;            /*!< [3..3] Filter bits                                                        */
      __IOM uint32 FB4        : 1;            /*!< [4..4] Filter bits                                                        */
      __IOM uint32 FB5        : 1;            /*!< [5..5] Filter bits                                                        */
      __IOM uint32 FB6        : 1;            /*!< [6..6] Filter bits                                                        */
      __IOM uint32 FB7        : 1;            /*!< [7..7] Filter bits                                                        */
      __IOM uint32 FB8        : 1;            /*!< [8..8] Filter bits                                                        */
      __IOM uint32 FB9        : 1;            /*!< [9..9] Filter bits                                                        */
      __IOM uint32 FB10       : 1;            /*!< [10..10] Filter bits                                                      */
      __IOM uint32 FB11       : 1;            /*!< [11..11] Filter bits                                                      */
      __IOM uint32 FB12       : 1;            /*!< [12..12] Filter bits                                                      */
      __IOM uint32 FB13       : 1;            /*!< [13..13] Filter bits                                                      */
      __IOM uint32 FB14       : 1;            /*!< [14..14] Filter bits                                                      */
      __IOM uint32 FB15       : 1;            /*!< [15..15] Filter bits                                                      */
      __IOM uint32 FB16       : 1;            /*!< [16..16] Filter bits                                                      */
      __IOM uint32 FB17       : 1;            /*!< [17..17] Filter bits                                                      */
      __IOM uint32 FB18       : 1;            /*!< [18..18] Filter bits                                                      */
      __IOM uint32 FB19       : 1;            /*!< [19..19] Filter bits                                                      */
      __IOM uint32 FB20       : 1;            /*!< [20..20] Filter bits                                                      */
      __IOM uint32 FB21       : 1;            /*!< [21..21] Filter bits                                                      */
      __IOM uint32 FB22       : 1;            /*!< [22..22] Filter bits                                                      */
      __IOM uint32 FB23       : 1;            /*!< [23..23] Filter bits                                                      */
      __IOM uint32 FB24       : 1;            /*!< [24..24] Filter bits                                                      */
      __IOM uint32 FB25       : 1;            /*!< [25..25] Filter bits                                                      */
      __IOM uint32 FB26       : 1;            /*!< [26..26] Filter bits                                                      */
      __IOM uint32 FB27       : 1;            /*!< [27..27] Filter bits                                                      */
      __IOM uint32 FB28       : 1;            /*!< [28..28] Filter bits                                                      */
      __IOM uint32 FB29       : 1;            /*!< [29..29] Filter bits                                                      */
      __IOM uint32 FB30       : 1;            /*!< [30..30] Filter bits                                                      */
      __IOM uint32 FB31       : 1;            /*!< [31..31] Filter bits                                                      */
    } bit;
  } F27R2;
} CAN1_Type;                                    /*!< Size = 800 (0x320)                                                        */



/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief FLASH (FLASH)
  */

typedef struct {                                /*!< (@ 0x40023C00) FLASH Structure                                            */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Flash access control register                              */
    
    struct {
      __IOM uint32 LATENCY    : 4;            /*!< [3..0] Latency                                                            */
            uint32            : 4;
      __IOM uint32 PRFTEN     : 1;            /*!< [8..8] Prefetch enable                                                    */
      __IOM uint32 ARTEN      : 1;            /*!< [9..9] ART Accelerator Enable                                             */
            uint32            : 1;
      __IOM uint32 ARTRST     : 1;            /*!< [11..11] ART Accelerator reset                                            */
            uint32            : 20;
    } bit;
  } ACR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000004) Flash key register                                         */
    
    struct {
      __OM  uint32 KEY        : 32;           /*!< [31..0] FPEC key                                                          */
    } bit;
  } KEYR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000008) Flash option key register                                  */
    
    struct {
      __OM  uint32 OPTKEY     : 32;           /*!< [31..0] Option byte key                                                   */
    } bit;
  } OPTKEYR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Status register                                            */
    
    struct {
      __IOM uint32 EOP        : 1;            /*!< [0..0] End of operation                                                   */
      __IOM uint32 OPERR      : 1;            /*!< [1..1] Operation error                                                    */
            uint32            : 2;
      __IOM uint32 WRPERR     : 1;            /*!< [4..4] Write protection error                                             */
      __IOM uint32 PGAERR     : 1;            /*!< [5..5] Programming alignment error                                        */
      __IOM uint32 PGPERR     : 1;            /*!< [6..6] Programming parallelism error                                      */
      __IOM uint32 ERSERR     : 1;            /*!< [7..7] Programming sequence error                                         */
            uint32            : 8;
      __IM  uint32 BSY        : 1;            /*!< [16..16] Busy                                                             */
            uint32            : 15;
    } bit;
  } SR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Control register                                           */
    
    struct {
      __IOM uint32 PG         : 1;            /*!< [0..0] Programming                                                        */
      __IOM uint32 SER        : 1;            /*!< [1..1] Sector Erase                                                       */
      __IOM uint32 MER        : 1;            /*!< [2..2] Mass Erase of sectors 0 to 11                                      */
      __IOM uint32 SNB        : 4;            /*!< [6..3] Sector number                                                      */
            uint32            : 1;
      __IOM uint32 PSIZE      : 2;            /*!< [9..8] Program size                                                       */
            uint32            : 6;
      __IOM uint32 STRT       : 1;            /*!< [16..16] Start                                                            */
            uint32            : 7;
      __IOM uint32 EOPIE      : 1;            /*!< [24..24] End of operation interrupt enable                                */
      __IOM uint32 ERRIE      : 1;            /*!< [25..25] Error interrupt enable                                           */
            uint32            : 5;
      __IOM uint32 LOCK       : 1;            /*!< [31..31] Lock                                                             */
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Flash option control register                              */
    
    struct {
      __IOM uint32 OPTLOCK    : 1;            /*!< [0..0] Option lock                                                        */
      __IOM uint32 OPTSTRT    : 1;            /*!< [1..1] Option start                                                       */
      __IOM uint32 BOR_LEV    : 2;            /*!< [3..2] BOR reset Level                                                    */
      __IOM uint32 WWDG_SW    : 1;            /*!< [4..4] User option bytes                                                  */
      __IOM uint32 IWDG_SW    : 1;            /*!< [5..5] User option bytes                                                  */
      __IOM uint32 nRST_STOP  : 1;            /*!< [6..6] User option bytes                                                  */
      __IOM uint32 nRST_STDBY : 1;            /*!< [7..7] User option bytes                                                  */
      __IOM uint32 RDP        : 8;            /*!< [15..8] Read protect                                                      */
      __IOM uint32 nWRP       : 8;            /*!< [23..16] Not write protect                                                */
            uint32            : 6;
      __IOM uint32 IWDG_STDBY : 1;            /*!< [30..30] Independent watchdog counter freeze in standby mode              */
      __IOM uint32 IWDG_STOP  : 1;            /*!< [31..31] Independent watchdog counter freeze in Stop mode                 */
    } bit;
  } OPTCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) Flash option control register 1                            */
    
    struct {
      __IOM uint32 BOOT_ADD0  : 16;           /*!< [15..0] Boot base address when Boot pin =0                                */
      __IOM uint32 BOOT_ADD1  : 16;           /*!< [31..16] Boot base address when Boot pin =1                               */
    } bit;
  } OPTCR1;
} FLASH_Type;                                   /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief External interrupt/event       controller (EXTI)
  */

typedef struct {                                /*!< (@ 0x40013C00) EXTI Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Interrupt mask register (EXTI_IMR)                         */
    
    struct {
      __IOM uint32 MR0        : 1;            /*!< [0..0] Interrupt Mask on line 0                                           */
      __IOM uint32 MR1        : 1;            /*!< [1..1] Interrupt Mask on line 1                                           */
      __IOM uint32 MR2        : 1;            /*!< [2..2] Interrupt Mask on line 2                                           */
      __IOM uint32 MR3        : 1;            /*!< [3..3] Interrupt Mask on line 3                                           */
      __IOM uint32 MR4        : 1;            /*!< [4..4] Interrupt Mask on line 4                                           */
      __IOM uint32 MR5        : 1;            /*!< [5..5] Interrupt Mask on line 5                                           */
      __IOM uint32 MR6        : 1;            /*!< [6..6] Interrupt Mask on line 6                                           */
      __IOM uint32 MR7        : 1;            /*!< [7..7] Interrupt Mask on line 7                                           */
      __IOM uint32 MR8        : 1;            /*!< [8..8] Interrupt Mask on line 8                                           */
      __IOM uint32 MR9        : 1;            /*!< [9..9] Interrupt Mask on line 9                                           */
      __IOM uint32 MR10       : 1;            /*!< [10..10] Interrupt Mask on line 10                                        */
      __IOM uint32 MR11       : 1;            /*!< [11..11] Interrupt Mask on line 11                                        */
      __IOM uint32 MR12       : 1;            /*!< [12..12] Interrupt Mask on line 12                                        */
      __IOM uint32 MR13       : 1;            /*!< [13..13] Interrupt Mask on line 13                                        */
      __IOM uint32 MR14       : 1;            /*!< [14..14] Interrupt Mask on line 14                                        */
      __IOM uint32 MR15       : 1;            /*!< [15..15] Interrupt Mask on line 15                                        */
      __IOM uint32 MR16       : 1;            /*!< [16..16] Interrupt Mask on line 16                                        */
      __IOM uint32 MR17       : 1;            /*!< [17..17] Interrupt Mask on line 17                                        */
      __IOM uint32 MR18       : 1;            /*!< [18..18] Interrupt Mask on line 18                                        */
      __IOM uint32 MR19       : 1;            /*!< [19..19] Interrupt Mask on line 19                                        */
      __IOM uint32 MR20       : 1;            /*!< [20..20] Interrupt Mask on line 20                                        */
      __IOM uint32 MR21       : 1;            /*!< [21..21] Interrupt Mask on line 21                                        */
      __IOM uint32 MR22       : 1;            /*!< [22..22] Interrupt Mask on line 22                                        */
            uint32            : 9;
    } bit;
  } IMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Event mask register (EXTI_EMR)                             */
    
    struct {
      __IOM uint32 MR0        : 1;            /*!< [0..0] Event Mask on line 0                                               */
      __IOM uint32 MR1        : 1;            /*!< [1..1] Event Mask on line 1                                               */
      __IOM uint32 MR2        : 1;            /*!< [2..2] Event Mask on line 2                                               */
      __IOM uint32 MR3        : 1;            /*!< [3..3] Event Mask on line 3                                               */
      __IOM uint32 MR4        : 1;            /*!< [4..4] Event Mask on line 4                                               */
      __IOM uint32 MR5        : 1;            /*!< [5..5] Event Mask on line 5                                               */
      __IOM uint32 MR6        : 1;            /*!< [6..6] Event Mask on line 6                                               */
      __IOM uint32 MR7        : 1;            /*!< [7..7] Event Mask on line 7                                               */
      __IOM uint32 MR8        : 1;            /*!< [8..8] Event Mask on line 8                                               */
      __IOM uint32 MR9        : 1;            /*!< [9..9] Event Mask on line 9                                               */
      __IOM uint32 MR10       : 1;            /*!< [10..10] Event Mask on line 10                                            */
      __IOM uint32 MR11       : 1;            /*!< [11..11] Event Mask on line 11                                            */
      __IOM uint32 MR12       : 1;            /*!< [12..12] Event Mask on line 12                                            */
      __IOM uint32 MR13       : 1;            /*!< [13..13] Event Mask on line 13                                            */
      __IOM uint32 MR14       : 1;            /*!< [14..14] Event Mask on line 14                                            */
      __IOM uint32 MR15       : 1;            /*!< [15..15] Event Mask on line 15                                            */
      __IOM uint32 MR16       : 1;            /*!< [16..16] Event Mask on line 16                                            */
      __IOM uint32 MR17       : 1;            /*!< [17..17] Event Mask on line 17                                            */
      __IOM uint32 MR18       : 1;            /*!< [18..18] Event Mask on line 18                                            */
      __IOM uint32 MR19       : 1;            /*!< [19..19] Event Mask on line 19                                            */
      __IOM uint32 MR20       : 1;            /*!< [20..20] Event Mask on line 20                                            */
      __IOM uint32 MR21       : 1;            /*!< [21..21] Event Mask on line 21                                            */
      __IOM uint32 MR22       : 1;            /*!< [22..22] Event Mask on line 22                                            */
            uint32            : 9;
    } bit;
  } EMR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Rising Trigger selection register (EXTI_RTSR)              */
    
    struct {
      __IOM uint32 TR0        : 1;            /*!< [0..0] Rising trigger event configuration of line 0                       */
      __IOM uint32 TR1        : 1;            /*!< [1..1] Rising trigger event configuration of line 1                       */
      __IOM uint32 TR2        : 1;            /*!< [2..2] Rising trigger event configuration of line 2                       */
      __IOM uint32 TR3        : 1;            /*!< [3..3] Rising trigger event configuration of line 3                       */
      __IOM uint32 TR4        : 1;            /*!< [4..4] Rising trigger event configuration of line 4                       */
      __IOM uint32 TR5        : 1;            /*!< [5..5] Rising trigger event configuration of line 5                       */
      __IOM uint32 TR6        : 1;            /*!< [6..6] Rising trigger event configuration of line 6                       */
      __IOM uint32 TR7        : 1;            /*!< [7..7] Rising trigger event configuration of line 7                       */
      __IOM uint32 TR8        : 1;            /*!< [8..8] Rising trigger event configuration of line 8                       */
      __IOM uint32 TR9        : 1;            /*!< [9..9] Rising trigger event configuration of line 9                       */
      __IOM uint32 TR10       : 1;            /*!< [10..10] Rising trigger event configuration of line 10                    */
      __IOM uint32 TR11       : 1;            /*!< [11..11] Rising trigger event configuration of line 11                    */
      __IOM uint32 TR12       : 1;            /*!< [12..12] Rising trigger event configuration of line 12                    */
      __IOM uint32 TR13       : 1;            /*!< [13..13] Rising trigger event configuration of line 13                    */
      __IOM uint32 TR14       : 1;            /*!< [14..14] Rising trigger event configuration of line 14                    */
      __IOM uint32 TR15       : 1;            /*!< [15..15] Rising trigger event configuration of line 15                    */
      __IOM uint32 TR16       : 1;            /*!< [16..16] Rising trigger event configuration of line 16                    */
      __IOM uint32 TR17       : 1;            /*!< [17..17] Rising trigger event configuration of line 17                    */
      __IOM uint32 TR18       : 1;            /*!< [18..18] Rising trigger event configuration of line 18                    */
      __IOM uint32 TR19       : 1;            /*!< [19..19] Rising trigger event configuration of line 19                    */
      __IOM uint32 TR20       : 1;            /*!< [20..20] Rising trigger event configuration of line 20                    */
      __IOM uint32 TR21       : 1;            /*!< [21..21] Rising trigger event configuration of line 21                    */
      __IOM uint32 TR22       : 1;            /*!< [22..22] Rising trigger event configuration of line 22                    */
            uint32            : 9;
    } bit;
  } RTSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Falling Trigger selection register (EXTI_FTSR)             */
    
    struct {
      __IOM uint32 TR0        : 1;            /*!< [0..0] Falling trigger event configuration of line 0                      */
      __IOM uint32 TR1        : 1;            /*!< [1..1] Falling trigger event configuration of line 1                      */
      __IOM uint32 TR2        : 1;            /*!< [2..2] Falling trigger event configuration of line 2                      */
      __IOM uint32 TR3        : 1;            /*!< [3..3] Falling trigger event configuration of line 3                      */
      __IOM uint32 TR4        : 1;            /*!< [4..4] Falling trigger event configuration of line 4                      */
      __IOM uint32 TR5        : 1;            /*!< [5..5] Falling trigger event configuration of line 5                      */
      __IOM uint32 TR6        : 1;            /*!< [6..6] Falling trigger event configuration of line 6                      */
      __IOM uint32 TR7        : 1;            /*!< [7..7] Falling trigger event configuration of line 7                      */
      __IOM uint32 TR8        : 1;            /*!< [8..8] Falling trigger event configuration of line 8                      */
      __IOM uint32 TR9        : 1;            /*!< [9..9] Falling trigger event configuration of line 9                      */
      __IOM uint32 TR10       : 1;            /*!< [10..10] Falling trigger event configuration of line 10                   */
      __IOM uint32 TR11       : 1;            /*!< [11..11] Falling trigger event configuration of line 11                   */
      __IOM uint32 TR12       : 1;            /*!< [12..12] Falling trigger event configuration of line 12                   */
      __IOM uint32 TR13       : 1;            /*!< [13..13] Falling trigger event configuration of line 13                   */
      __IOM uint32 TR14       : 1;            /*!< [14..14] Falling trigger event configuration of line 14                   */
      __IOM uint32 TR15       : 1;            /*!< [15..15] Falling trigger event configuration of line 15                   */
      __IOM uint32 TR16       : 1;            /*!< [16..16] Falling trigger event configuration of line 16                   */
      __IOM uint32 TR17       : 1;            /*!< [17..17] Falling trigger event configuration of line 17                   */
      __IOM uint32 TR18       : 1;            /*!< [18..18] Falling trigger event configuration of line 18                   */
      __IOM uint32 TR19       : 1;            /*!< [19..19] Falling trigger event configuration of line 19                   */
      __IOM uint32 TR20       : 1;            /*!< [20..20] Falling trigger event configuration of line 20                   */
      __IOM uint32 TR21       : 1;            /*!< [21..21] Falling trigger event configuration of line 21                   */
      __IOM uint32 TR22       : 1;            /*!< [22..22] Falling trigger event configuration of line 22                   */
            uint32            : 9;
    } bit;
  } FTSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Software interrupt event register (EXTI_SWIER)             */
    
    struct {
      __IOM uint32 SWIER0     : 1;            /*!< [0..0] Software Interrupt on line 0                                       */
      __IOM uint32 SWIER1     : 1;            /*!< [1..1] Software Interrupt on line 1                                       */
      __IOM uint32 SWIER2     : 1;            /*!< [2..2] Software Interrupt on line 2                                       */
      __IOM uint32 SWIER3     : 1;            /*!< [3..3] Software Interrupt on line 3                                       */
      __IOM uint32 SWIER4     : 1;            /*!< [4..4] Software Interrupt on line 4                                       */
      __IOM uint32 SWIER5     : 1;            /*!< [5..5] Software Interrupt on line 5                                       */
      __IOM uint32 SWIER6     : 1;            /*!< [6..6] Software Interrupt on line 6                                       */
      __IOM uint32 SWIER7     : 1;            /*!< [7..7] Software Interrupt on line 7                                       */
      __IOM uint32 SWIER8     : 1;            /*!< [8..8] Software Interrupt on line 8                                       */
      __IOM uint32 SWIER9     : 1;            /*!< [9..9] Software Interrupt on line 9                                       */
      __IOM uint32 SWIER10    : 1;            /*!< [10..10] Software Interrupt on line 10                                    */
      __IOM uint32 SWIER11    : 1;            /*!< [11..11] Software Interrupt on line 11                                    */
      __IOM uint32 SWIER12    : 1;            /*!< [12..12] Software Interrupt on line 12                                    */
      __IOM uint32 SWIER13    : 1;            /*!< [13..13] Software Interrupt on line 13                                    */
      __IOM uint32 SWIER14    : 1;            /*!< [14..14] Software Interrupt on line 14                                    */
      __IOM uint32 SWIER15    : 1;            /*!< [15..15] Software Interrupt on line 15                                    */
      __IOM uint32 SWIER16    : 1;            /*!< [16..16] Software Interrupt on line 16                                    */
      __IOM uint32 SWIER17    : 1;            /*!< [17..17] Software Interrupt on line 17                                    */
      __IOM uint32 SWIER18    : 1;            /*!< [18..18] Software Interrupt on line 18                                    */
      __IOM uint32 SWIER19    : 1;            /*!< [19..19] Software Interrupt on line 19                                    */
      __IOM uint32 SWIER20    : 1;            /*!< [20..20] Software Interrupt on line 20                                    */
      __IOM uint32 SWIER21    : 1;            /*!< [21..21] Software Interrupt on line 21                                    */
      __IOM uint32 SWIER22    : 1;            /*!< [22..22] Software Interrupt on line 22                                    */
            uint32            : 9;
    } bit;
  } SWIER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Pending register (EXTI_PR)                                 */
    
    struct {
      __IOM uint32 PR0        : 1;            /*!< [0..0] Pending bit 0                                                      */
      __IOM uint32 PR1        : 1;            /*!< [1..1] Pending bit 1                                                      */
      __IOM uint32 PR2        : 1;            /*!< [2..2] Pending bit 2                                                      */
      __IOM uint32 PR3        : 1;            /*!< [3..3] Pending bit 3                                                      */
      __IOM uint32 PR4        : 1;            /*!< [4..4] Pending bit 4                                                      */
      __IOM uint32 PR5        : 1;            /*!< [5..5] Pending bit 5                                                      */
      __IOM uint32 PR6        : 1;            /*!< [6..6] Pending bit 6                                                      */
      __IOM uint32 PR7        : 1;            /*!< [7..7] Pending bit 7                                                      */
      __IOM uint32 PR8        : 1;            /*!< [8..8] Pending bit 8                                                      */
      __IOM uint32 PR9        : 1;            /*!< [9..9] Pending bit 9                                                      */
      __IOM uint32 PR10       : 1;            /*!< [10..10] Pending bit 10                                                   */
      __IOM uint32 PR11       : 1;            /*!< [11..11] Pending bit 11                                                   */
      __IOM uint32 PR12       : 1;            /*!< [12..12] Pending bit 12                                                   */
      __IOM uint32 PR13       : 1;            /*!< [13..13] Pending bit 13                                                   */
      __IOM uint32 PR14       : 1;            /*!< [14..14] Pending bit 14                                                   */
      __IOM uint32 PR15       : 1;            /*!< [15..15] Pending bit 15                                                   */
      __IOM uint32 PR16       : 1;            /*!< [16..16] Pending bit 16                                                   */
      __IOM uint32 PR17       : 1;            /*!< [17..17] Pending bit 17                                                   */
      __IOM uint32 PR18       : 1;            /*!< [18..18] Pending bit 18                                                   */
      __IOM uint32 PR19       : 1;            /*!< [19..19] Pending bit 19                                                   */
      __IOM uint32 PR20       : 1;            /*!< [20..20] Pending bit 20                                                   */
      __IOM uint32 PR21       : 1;            /*!< [21..21] Pending bit 21                                                   */
      __IOM uint32 PR22       : 1;            /*!< [22..22] Pending bit 22                                                   */
            uint32            : 9;
    } bit;
  } PR;
} EXTI_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           LTDC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief LCD-TFT Controller (LTDC)
  */

typedef struct {                                /*!< (@ 0x40016800) LTDC Structure                                             */
  __IM  uint32  RESERVED[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Synchronization Size Configuration Register                */
    
    struct {
      __IOM uint32 VSH        : 11;           /*!< [10..0] Vertical Synchronization Height (in units of horizontal
                                                     scan line)                                                                */
            uint32            : 5;
      __IOM uint32 HSW        : 10;           /*!< [25..16] Horizontal Synchronization Width (in units of pixel
                                                     clock period)                                                             */
            uint32            : 6;
    } bit;
  } SSCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Back Porch Configuration Register                          */
    
    struct {
      __IOM uint32 AVBP       : 11;           /*!< [10..0] Accumulated Vertical back porch (in units of horizontal
                                                     scan line)                                                                */
            uint32            : 5;
      __IOM uint32 AHBP       : 10;           /*!< [25..16] Accumulated Horizontal back porch (in units of pixel
                                                     clock period)                                                             */
            uint32            : 6;
    } bit;
  } BPCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Active Width Configuration Register                        */
    
    struct {
      __IOM uint32 AAH        : 11;           /*!< [10..0] Accumulated Active Height (in units of horizontal scan
                                                     line)                                                                     */
            uint32            : 5;
      __IOM uint32 AAV        : 10;           /*!< [25..16] AAV                                                              */
            uint32            : 6;
    } bit;
  } AWCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Total Width Configuration Register                         */
    
    struct {
      __IOM uint32 TOTALH     : 11;           /*!< [10..0] Total Height (in units of horizontal scan line)                   */
            uint32            : 5;
      __IOM uint32 TOTALW     : 10;           /*!< [25..16] Total Width (in units of pixel clock period)                     */
            uint32            : 6;
    } bit;
  } TWCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) Global Control Register                                    */
    
    struct {
      __IOM uint32 LTDCEN     : 1;            /*!< [0..0] LCD-TFT controller enable bit                                      */
            uint32            : 3;
      __IM  uint32 DBW        : 3;            /*!< [6..4] Dither Blue Width                                                  */
            uint32            : 1;
      __IM  uint32 DGW        : 3;            /*!< [10..8] Dither Green Width                                                */
            uint32            : 1;
      __IM  uint32 DRW        : 3;            /*!< [14..12] Dither Red Width                                                 */
            uint32            : 1;
      __IOM uint32 DEN        : 1;            /*!< [16..16] Dither Enable                                                    */
            uint32            : 11;
      __IOM uint32 PCPOL      : 1;            /*!< [28..28] Pixel Clock Polarity                                             */
      __IOM uint32 DEPOL      : 1;            /*!< [29..29] Data Enable Polarity                                             */
      __IOM uint32 VSPOL      : 1;            /*!< [30..30] Vertical Synchronization Polarity                                */
      __IOM uint32 HSPOL      : 1;            /*!< [31..31] Horizontal Synchronization Polarity                              */
    } bit;
  } GCR;
  __IM  uint32  RESERVED1[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) Shadow Reload Configuration Register                       */
    
    struct {
      __IOM uint32 IMR        : 1;            /*!< [0..0] Immediate Reload                                                   */
      __IOM uint32 VBR        : 1;            /*!< [1..1] Vertical Blanking Reload                                           */
            uint32            : 30;
    } bit;
  } SRCR;
  __IM  uint32  RESERVED2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) Background Color Configuration Register                    */
    
    struct {
      __IOM uint32 BC         : 24;           /*!< [23..0] Background Color Red value                                        */
            uint32            : 8;
    } bit;
  } BCCR;
  __IM  uint32  RESERVED3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) Interrupt Enable Register                                  */
    
    struct {
      __IOM uint32 LIE        : 1;            /*!< [0..0] Line Interrupt Enable                                              */
      __IOM uint32 FUIE       : 1;            /*!< [1..1] FIFO Underrun Interrupt Enable                                     */
      __IOM uint32 TERRIE     : 1;            /*!< [2..2] Transfer Error Interrupt Enable                                    */
      __IOM uint32 RRIE       : 1;            /*!< [3..3] Register Reload interrupt enable                                   */
            uint32            : 28;
    } bit;
  } IER;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000038) Interrupt Status Register                                  */
    
    struct {
      __IM  uint32 LIF        : 1;            /*!< [0..0] Line Interrupt flag                                                */
      __IM  uint32 FUIF       : 1;            /*!< [1..1] FIFO Underrun Interrupt flag                                       */
      __IM  uint32 TERRIF     : 1;            /*!< [2..2] Transfer Error interrupt flag                                      */
      __IM  uint32 RRIF       : 1;            /*!< [3..3] Register Reload Interrupt Flag                                     */
            uint32            : 28;
    } bit;
  } ISR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x0000003C) Interrupt Clear Register                                   */
    
    struct {
      __OM  uint32 CLIF       : 1;            /*!< [0..0] Clears the Line Interrupt Flag                                     */
      __OM  uint32 CFUIF      : 1;            /*!< [1..1] Clears the FIFO Underrun Interrupt flag                            */
      __OM  uint32 CTERRIF    : 1;            /*!< [2..2] Clears the Transfer Error Interrupt Flag                           */
      __OM  uint32 CRRIF      : 1;            /*!< [3..3] Clears Register Reload Interrupt Flag                              */
            uint32            : 28;
    } bit;
  } ICR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) Line Interrupt Position Configuration Register             */
    
    struct {
      __IOM uint32 LIPOS      : 11;           /*!< [10..0] Line Interrupt Position                                           */
            uint32            : 21;
    } bit;
  } LIPCR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000044) Current Position Status Register                           */
    
    struct {
      __IM  uint32 CYPOS      : 16;           /*!< [15..0] Current Y Position                                                */
      __IM  uint32 CXPOS      : 16;           /*!< [31..16] Current X Position                                               */
    } bit;
  } CPSR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000048) Current Display Status Register                            */
    
    struct {
      __IM  uint32 VDES       : 1;            /*!< [0..0] Vertical Data Enable display Status                                */
      __IM  uint32 HDES       : 1;            /*!< [1..1] Horizontal Data Enable display Status                              */
      __IM  uint32 VSYNCS     : 1;            /*!< [2..2] Vertical Synchronization display Status                            */
      __IM  uint32 HSYNCS     : 1;            /*!< [3..3] Horizontal Synchronization display Status                          */
            uint32            : 28;
    } bit;
  } CDSR;
  __IM  uint32  RESERVED4[14];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000084) Layerx Control Register                                    */
    
    struct {
      __IOM uint32 LEN        : 1;            /*!< [0..0] Layer Enable                                                       */
      __IOM uint32 COLKEN     : 1;            /*!< [1..1] Color Keying Enable                                                */
            uint32            : 2;
      __IOM uint32 CLUTEN     : 1;            /*!< [4..4] Color Look-Up Table Enable                                         */
            uint32            : 27;
    } bit;
  } L1CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000088) Layerx Window Horizontal Position Configuration
                                                                    Register                                                   */
    
    struct {
      __IOM uint32 WHSTPOS    : 12;           /*!< [11..0] Window Horizontal Start Position                                  */
            uint32            : 4;
      __IOM uint32 WHSPPOS    : 12;           /*!< [27..16] Window Horizontal Stop Position                                  */
            uint32            : 4;
    } bit;
  } L1WHPCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000008C) Layerx Window Vertical Position Configuration
                                                                    Register                                                   */
    
    struct {
      __IOM uint32 WVSTPOS    : 11;           /*!< [10..0] Window Vertical Start Position                                    */
            uint32            : 5;
      __IOM uint32 WVSPPOS    : 11;           /*!< [26..16] Window Vertical Stop Position                                    */
            uint32            : 5;
    } bit;
  } L1WVPCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000090) Layerx Color Keying Configuration Register                 */
    
    struct {
      __IOM uint32 CKBLUE     : 8;            /*!< [7..0] Color Key Blue value                                               */
      __IOM uint32 CKGREEN    : 8;            /*!< [15..8] Color Key Green value                                             */
      __IOM uint32 CKRED      : 8;            /*!< [23..16] Color Key Red value                                              */
            uint32            : 8;
    } bit;
  } L1CKCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000094) Layerx Pixel Format Configuration Register                 */
    
    struct {
      __IOM uint32 PF         : 3;            /*!< [2..0] Pixel Format                                                       */
            uint32            : 29;
    } bit;
  } L1PFCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000098) Layerx Constant Alpha Configuration Register               */
    
    struct {
      __IOM uint32 CONSTA     : 8;            /*!< [7..0] Constant Alpha                                                     */
            uint32            : 24;
    } bit;
  } L1CACR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000009C) Layerx Default Color Configuration Register                */
    
    struct {
      __IOM uint32 DCBLUE     : 8;            /*!< [7..0] Default Color Blue                                                 */
      __IOM uint32 DCGREEN    : 8;            /*!< [15..8] Default Color Green                                               */
      __IOM uint32 DCRED      : 8;            /*!< [23..16] Default Color Red                                                */
      __IOM uint32 DCALPHA    : 8;            /*!< [31..24] Default Color Alpha                                              */
    } bit;
  } L1DCCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000A0) Layerx Blending Factors Configuration Register             */
    
    struct {
      __IOM uint32 BF2        : 3;            /*!< [2..0] Blending Factor 2                                                  */
            uint32            : 5;
      __IOM uint32 BF1        : 3;            /*!< [10..8] Blending Factor 1                                                 */
            uint32            : 21;
    } bit;
  } L1BFCR;
  __IM  uint32  RESERVED5[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000AC) Layerx Color Frame Buffer Address Register                 */
    
    struct {
      __IOM uint32 CFBADD     : 32;           /*!< [31..0] Color Frame Buffer Start Address                                  */
    } bit;
  } L1CFBAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000B0) Layerx Color Frame Buffer Length Register                  */
    
    struct {
      __IOM uint32 CFBLL      : 13;           /*!< [12..0] Color Frame Buffer Line Length                                    */
            uint32            : 3;
      __IOM uint32 CFBP       : 13;           /*!< [28..16] Color Frame Buffer Pitch in bytes                                */
            uint32            : 3;
    } bit;
  } L1CFBLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000B4) Layerx ColorFrame Buffer Line Number Register              */
    
    struct {
      __IOM uint32 CFBLNBR    : 11;           /*!< [10..0] Frame Buffer Line Number                                          */
            uint32            : 21;
    } bit;
  } L1CFBLNR;
  __IM  uint32  RESERVED6[3];
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x000000C4) Layerx CLUT Write Register                                 */
    
    struct {
      __OM  uint32 BLUE       : 8;            /*!< [7..0] Blue value                                                         */
      __OM  uint32 GREEN      : 8;            /*!< [15..8] Green value                                                       */
      __OM  uint32 RED        : 8;            /*!< [23..16] Red value                                                        */
      __OM  uint32 CLUTADD    : 8;            /*!< [31..24] CLUT Address                                                     */
    } bit;
  } L1CLUTWR;
  __IM  uint32  RESERVED7[15];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000104) Layerx Control Register                                    */
    
    struct {
      __IOM uint32 LEN        : 1;            /*!< [0..0] Layer Enable                                                       */
      __IOM uint32 COLKEN     : 1;            /*!< [1..1] Color Keying Enable                                                */
            uint32            : 2;
      __IOM uint32 CLUTEN     : 1;            /*!< [4..4] Color Look-Up Table Enable                                         */
            uint32            : 27;
    } bit;
  } L2CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) Layerx Window Horizontal Position Configuration
                                                                    Register                                                   */
    
    struct {
      __IOM uint32 WHSTPOS    : 12;           /*!< [11..0] Window Horizontal Start Position                                  */
            uint32            : 4;
      __IOM uint32 WHSPPOS    : 12;           /*!< [27..16] Window Horizontal Stop Position                                  */
            uint32            : 4;
    } bit;
  } L2WHPCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000010C) Layerx Window Vertical Position Configuration
                                                                    Register                                                   */
    
    struct {
      __IOM uint32 WVSTPOS    : 11;           /*!< [10..0] Window Vertical Start Position                                    */
            uint32            : 5;
      __IOM uint32 WVSPPOS    : 11;           /*!< [26..16] Window Vertical Stop Position                                    */
            uint32            : 5;
    } bit;
  } L2WVPCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000110) Layerx Color Keying Configuration Register                 */
    
    struct {
      __IOM uint32 CKBLUE     : 8;            /*!< [7..0] Color Key Blue value                                               */
      __IOM uint32 CKGREEN    : 7;            /*!< [14..8] Color Key Green value                                             */
      __IOM uint32 CKRED      : 9;            /*!< [23..15] Color Key Red value                                              */
            uint32            : 8;
    } bit;
  } L2CKCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000114) Layerx Pixel Format Configuration Register                 */
    
    struct {
      __IOM uint32 PF         : 3;            /*!< [2..0] Pixel Format                                                       */
            uint32            : 29;
    } bit;
  } L2PFCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000118) Layerx Constant Alpha Configuration Register               */
    
    struct {
      __IOM uint32 CONSTA     : 8;            /*!< [7..0] Constant Alpha                                                     */
            uint32            : 24;
    } bit;
  } L2CACR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000011C) Layerx Default Color Configuration Register                */
    
    struct {
      __IOM uint32 DCBLUE     : 8;            /*!< [7..0] Default Color Blue                                                 */
      __IOM uint32 DCGREEN    : 8;            /*!< [15..8] Default Color Green                                               */
      __IOM uint32 DCRED      : 8;            /*!< [23..16] Default Color Red                                                */
      __IOM uint32 DCALPHA    : 8;            /*!< [31..24] Default Color Alpha                                              */
    } bit;
  } L2DCCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000120) Layerx Blending Factors Configuration Register             */
    
    struct {
      __IOM uint32 BF2        : 3;            /*!< [2..0] Blending Factor 2                                                  */
            uint32            : 5;
      __IOM uint32 BF1        : 3;            /*!< [10..8] Blending Factor 1                                                 */
            uint32            : 21;
    } bit;
  } L2BFCR;
  __IM  uint32  RESERVED8[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000012C) Layerx Color Frame Buffer Address Register                 */
    
    struct {
      __IOM uint32 CFBADD     : 32;           /*!< [31..0] Color Frame Buffer Start Address                                  */
    } bit;
  } L2CFBAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000130) Layerx Color Frame Buffer Length Register                  */
    
    struct {
      __IOM uint32 CFBLL      : 13;           /*!< [12..0] Color Frame Buffer Line Length                                    */
            uint32            : 3;
      __IOM uint32 CFBP       : 13;           /*!< [28..16] Color Frame Buffer Pitch in bytes                                */
            uint32            : 3;
    } bit;
  } L2CFBLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000134) Layerx ColorFrame Buffer Line Number Register              */
    
    struct {
      __IOM uint32 CFBLNBR    : 11;           /*!< [10..0] Frame Buffer Line Number                                          */
            uint32            : 21;
    } bit;
  } L2CFBLNR;
  __IM  uint32  RESERVED9[3];
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000144) Layerx CLUT Write Register                                 */
    
    struct {
      __OM  uint32 BLUE       : 8;            /*!< [7..0] Blue value                                                         */
      __OM  uint32 GREEN      : 8;            /*!< [15..8] Green value                                                       */
      __OM  uint32 RED        : 8;            /*!< [23..16] Red value                                                        */
      __OM  uint32 CLUTADD    : 8;            /*!< [31..24] CLUT Address                                                     */
    } bit;
  } L2CLUTWR;
} LTDC_Type;                                    /*!< Size = 328 (0x148)                                                        */



/* =========================================================================================================================== */
/* ================                                           SAI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial audio interface (SAI1)
  */

typedef struct {                                /*!< (@ 0x40015800) SAI1 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Global configuration register                              */
    
    struct {
      __IOM uint32 SYNCIN     : 2;            /*!< [1..0] Synchronization inputs                                             */
            uint32            : 2;
      __IOM uint32 SYNCOUT    : 2;            /*!< [5..4] Synchronization outputs                                            */
            uint32            : 26;
    } bit;
  } GCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) AConfiguration register 1                                  */
    
    struct {
      __IOM uint32 MODE       : 2;            /*!< [1..0] Audio block mode                                                   */
      __IOM uint32 PRTCFG     : 2;            /*!< [3..2] Protocol configuration                                             */
            uint32            : 1;
      __IOM uint32 DS         : 3;            /*!< [7..5] Data size                                                          */
      __IOM uint32 LSBFIRST   : 1;            /*!< [8..8] Least significant bit first                                        */
      __IOM uint32 CKSTR      : 1;            /*!< [9..9] Clock strobing edge                                                */
      __IOM uint32 SYNCEN     : 2;            /*!< [11..10] Synchronization enable                                           */
      __IOM uint32 MONO       : 1;            /*!< [12..12] Mono mode                                                        */
      __IOM uint32 OutDri     : 1;            /*!< [13..13] Output drive                                                     */
            uint32            : 2;
      __IOM uint32 SAIAEN     : 1;            /*!< [16..16] Audio block A enable                                             */
      __IOM uint32 DMAEN      : 1;            /*!< [17..17] DMA enable                                                       */
            uint32            : 1;
      __IOM uint32 NODIV      : 1;            /*!< [19..19] No divider                                                       */
      __IOM uint32 MCJDIV     : 4;            /*!< [23..20] Master clock divider                                             */
            uint32            : 8;
    } bit;
  } ACR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) AConfiguration register 2                                  */
    
    struct {
      __IOM uint32 FTH        : 3;            /*!< [2..0] FIFO threshold                                                     */
      __IOM uint32 FFLUS      : 1;            /*!< [3..3] FIFO flush                                                         */
      __IOM uint32 TRIS       : 1;            /*!< [4..4] Tristate management on data line                                   */
      __IOM uint32 MUTE       : 1;            /*!< [5..5] Mute                                                               */
      __IOM uint32 MUTEVAL    : 1;            /*!< [6..6] Mute value                                                         */
      __IOM uint32 MUTECN     : 6;            /*!< [12..7] Mute counter                                                      */
      __IOM uint32 CPL        : 1;            /*!< [13..13] Complement bit                                                   */
      __IOM uint32 COMP       : 2;            /*!< [15..14] Companding mode                                                  */
            uint32            : 16;
    } bit;
  } ACR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) AFRCR                                                      */
    
    struct {
      __IOM uint32 FRL        : 8;            /*!< [7..0] Frame length                                                       */
      __IOM uint32 FSALL      : 7;            /*!< [14..8] Frame synchronization active level length                         */
            uint32            : 1;
      __IOM uint32 FSDEF      : 1;            /*!< [16..16] Frame synchronization definition                                 */
      __IOM uint32 FSPOL      : 1;            /*!< [17..17] Frame synchronization polarity                                   */
      __IOM uint32 FSOFF      : 1;            /*!< [18..18] Frame synchronization offset                                     */
            uint32            : 13;
    } bit;
  } AFRCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) ASlot register                                             */
    
    struct {
      __IOM uint32 FBOFF      : 5;            /*!< [4..0] First bit offset                                                   */
            uint32            : 1;
      __IOM uint32 SLOTSZ     : 2;            /*!< [7..6] Slot size                                                          */
      __IOM uint32 NBSLOT     : 4;            /*!< [11..8] Number of slots in an audio frame                                 */
            uint32            : 4;
      __IOM uint32 SLOTEN     : 16;           /*!< [31..16] Slot enable                                                      */
    } bit;
  } ASLOTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) AInterrupt mask register2                                  */
    
    struct {
      __IOM uint32 OVRUDRIE   : 1;            /*!< [0..0] Overrun/underrun interrupt enable                                  */
      __IOM uint32 MUTEDET    : 1;            /*!< [1..1] Mute detection interrupt enable                                    */
      __IOM uint32 WCKCFG     : 1;            /*!< [2..2] Wrong clock configuration interrupt enable                         */
      __IOM uint32 FREQIE     : 1;            /*!< [3..3] FIFO request interrupt enable                                      */
      __IOM uint32 CNRDYIE    : 1;            /*!< [4..4] Codec not ready interrupt enable                                   */
      __IOM uint32 AFSDETIE   : 1;            /*!< [5..5] Anticipated frame synchronization detection interrupt
                                                     enable                                                                    */
      __IOM uint32 LFSDET     : 1;            /*!< [6..6] Late frame synchronization detection interrupt enable              */
            uint32            : 25;
    } bit;
  } AIM;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) AStatus register                                           */
    
    struct {
      __IOM uint32 OVRUDR     : 1;            /*!< [0..0] Overrun / underrun                                                 */
      __IOM uint32 MUTEDET    : 1;            /*!< [1..1] Mute detection                                                     */
      __IOM uint32 WCKCFG     : 1;            /*!< [2..2] Wrong clock configuration flag. This bit is read only.             */
      __IOM uint32 FREQ       : 1;            /*!< [3..3] FIFO request                                                       */
      __IOM uint32 CNRDY      : 1;            /*!< [4..4] Codec not ready                                                    */
      __IOM uint32 AFSDET     : 1;            /*!< [5..5] Anticipated frame synchronization detection                        */
      __IOM uint32 LFSDET     : 1;            /*!< [6..6] Late frame synchronization detection                               */
            uint32            : 9;
      __IOM uint32 FLVL       : 3;            /*!< [18..16] FIFO level threshold                                             */
            uint32            : 13;
    } bit;
  } ASR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) AClear flag register                                       */
    
    struct {
      __IOM uint32 OVRUDR     : 1;            /*!< [0..0] Clear overrun / underrun                                           */
      __IOM uint32 MUTEDET    : 1;            /*!< [1..1] Mute detection flag                                                */
      __IOM uint32 WCKCFG     : 1;            /*!< [2..2] Clear wrong clock configuration flag                               */
            uint32            : 1;
      __IOM uint32 CNRDY      : 1;            /*!< [4..4] Clear codec not ready flag                                         */
      __IOM uint32 CAFSDET    : 1;            /*!< [5..5] Clear anticipated frame synchronization detection flag.            */
      __IOM uint32 LFSDET     : 1;            /*!< [6..6] Clear late frame synchronization detection flag                    */
            uint32            : 25;
    } bit;
  } ACLRFR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) AData register                                             */
    
    struct {
      __IOM uint32 DATA       : 32;           /*!< [31..0] Data                                                              */
    } bit;
  } ADR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) BConfiguration register 1                                  */
    
    struct {
      __IOM uint32 MODE       : 2;            /*!< [1..0] Audio block mode                                                   */
      __IOM uint32 PRTCFG     : 2;            /*!< [3..2] Protocol configuration                                             */
            uint32            : 1;
      __IOM uint32 DS         : 3;            /*!< [7..5] Data size                                                          */
      __IOM uint32 LSBFIRST   : 1;            /*!< [8..8] Least significant bit first                                        */
      __IOM uint32 CKSTR      : 1;            /*!< [9..9] Clock strobing edge                                                */
      __IOM uint32 SYNCEN     : 2;            /*!< [11..10] Synchronization enable                                           */
      __IOM uint32 MONO       : 1;            /*!< [12..12] Mono mode                                                        */
      __IOM uint32 OutDri     : 1;            /*!< [13..13] Output drive                                                     */
            uint32            : 2;
      __IOM uint32 SAIBEN     : 1;            /*!< [16..16] Audio block B enable                                             */
      __IOM uint32 DMAEN      : 1;            /*!< [17..17] DMA enable                                                       */
            uint32            : 1;
      __IOM uint32 NODIV      : 1;            /*!< [19..19] No divider                                                       */
      __IOM uint32 MCJDIV     : 4;            /*!< [23..20] Master clock divider                                             */
            uint32            : 8;
    } bit;
  } BCR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) BConfiguration register 2                                  */
    
    struct {
      __IOM uint32 FTH        : 3;            /*!< [2..0] FIFO threshold                                                     */
      __IOM uint32 FFLUS      : 1;            /*!< [3..3] FIFO flush                                                         */
      __IOM uint32 TRIS       : 1;            /*!< [4..4] Tristate management on data line                                   */
      __IOM uint32 MUTE       : 1;            /*!< [5..5] Mute                                                               */
      __IOM uint32 MUTEVAL    : 1;            /*!< [6..6] Mute value                                                         */
      __IOM uint32 MUTECN     : 6;            /*!< [12..7] Mute counter                                                      */
      __IOM uint32 CPL        : 1;            /*!< [13..13] Complement bit                                                   */
      __IOM uint32 COMP       : 2;            /*!< [15..14] Companding mode                                                  */
            uint32            : 16;
    } bit;
  } BCR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) BFRCR                                                      */
    
    struct {
      __IOM uint32 FRL        : 8;            /*!< [7..0] Frame length                                                       */
      __IOM uint32 FSALL      : 7;            /*!< [14..8] Frame synchronization active level length                         */
            uint32            : 1;
      __IOM uint32 FSDEF      : 1;            /*!< [16..16] Frame synchronization definition                                 */
      __IOM uint32 FSPOL      : 1;            /*!< [17..17] Frame synchronization polarity                                   */
      __IOM uint32 FSOFF      : 1;            /*!< [18..18] Frame synchronization offset                                     */
            uint32            : 13;
    } bit;
  } BFRCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) BSlot register                                             */
    
    struct {
      __IOM uint32 FBOFF      : 5;            /*!< [4..0] First bit offset                                                   */
            uint32            : 1;
      __IOM uint32 SLOTSZ     : 2;            /*!< [7..6] Slot size                                                          */
      __IOM uint32 NBSLOT     : 4;            /*!< [11..8] Number of slots in an audio frame                                 */
            uint32            : 4;
      __IOM uint32 SLOTEN     : 16;           /*!< [31..16] Slot enable                                                      */
    } bit;
  } BSLOTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) BInterrupt mask register2                                  */
    
    struct {
      __IOM uint32 OVRUDRIE   : 1;            /*!< [0..0] Overrun/underrun interrupt enable                                  */
      __IOM uint32 MUTEDET    : 1;            /*!< [1..1] Mute detection interrupt enable                                    */
      __IOM uint32 WCKCFG     : 1;            /*!< [2..2] Wrong clock configuration interrupt enable                         */
      __IOM uint32 FREQIE     : 1;            /*!< [3..3] FIFO request interrupt enable                                      */
      __IOM uint32 CNRDYIE    : 1;            /*!< [4..4] Codec not ready interrupt enable                                   */
      __IOM uint32 AFSDETIE   : 1;            /*!< [5..5] Anticipated frame synchronization detection interrupt
                                                     enable                                                                    */
      __IOM uint32 LFSDETIE   : 1;            /*!< [6..6] Late frame synchronization detection interrupt enable              */
            uint32            : 25;
    } bit;
  } BIM;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000038) BStatus register                                           */
    
    struct {
      __IM  uint32 OVRUDR     : 1;            /*!< [0..0] Overrun / underrun                                                 */
      __IM  uint32 MUTEDET    : 1;            /*!< [1..1] Mute detection                                                     */
      __IM  uint32 WCKCFG     : 1;            /*!< [2..2] Wrong clock configuration flag                                     */
      __IM  uint32 FREQ       : 1;            /*!< [3..3] FIFO request                                                       */
      __IM  uint32 CNRDY      : 1;            /*!< [4..4] Codec not ready                                                    */
      __IM  uint32 AFSDET     : 1;            /*!< [5..5] Anticipated frame synchronization detection                        */
      __IM  uint32 LFSDET     : 1;            /*!< [6..6] Late frame synchronization detection                               */
            uint32            : 9;
      __IM  uint32 FLVL       : 3;            /*!< [18..16] FIFO level threshold                                             */
            uint32            : 13;
    } bit;
  } BSR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x0000003C) BClear flag register                                       */
    
    struct {
      __OM  uint32 OVRUDR     : 1;            /*!< [0..0] Clear overrun / underrun                                           */
      __OM  uint32 MUTEDET    : 1;            /*!< [1..1] Mute detection flag                                                */
      __OM  uint32 WCKCFG     : 1;            /*!< [2..2] Clear wrong clock configuration flag                               */
            uint32            : 1;
      __OM  uint32 CNRDY      : 1;            /*!< [4..4] Clear codec not ready flag                                         */
      __OM  uint32 CAFSDET    : 1;            /*!< [5..5] Clear anticipated frame synchronization detection flag             */
      __OM  uint32 LFSDET     : 1;            /*!< [6..6] Clear late frame synchronization detection flag                    */
            uint32            : 25;
    } bit;
  } BCLRFR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) BData register                                             */
    
    struct {
      __IOM uint32 DATA       : 32;           /*!< [31..0] Data                                                              */
    } bit;
  } BDR;
} SAI1_Type;                                    /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMA2D                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA2D controller (DMA2D)
  */

typedef struct {                                /*!< (@ 0x4002B000) DMA2D Structure                                            */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register                                           */
    
    struct {
      __IOM uint32 START      : 1;            /*!< [0..0] Start                                                              */
      __IOM uint32 SUSP       : 1;            /*!< [1..1] Suspend                                                            */
      __IOM uint32 ABORT      : 1;            /*!< [2..2] Abort                                                              */
            uint32            : 5;
      __IOM uint32 TEIE       : 1;            /*!< [8..8] Transfer error interrupt enable                                    */
      __IOM uint32 TCIE       : 1;            /*!< [9..9] Transfer complete interrupt enable                                 */
      __IOM uint32 TWIE       : 1;            /*!< [10..10] Transfer watermark interrupt enable                              */
      __IOM uint32 CAEIE      : 1;            /*!< [11..11] CLUT access error interrupt enable                               */
      __IOM uint32 CTCIE      : 1;            /*!< [12..12] CLUT transfer complete interrupt enable                          */
      __IOM uint32 CEIE       : 1;            /*!< [13..13] Configuration Error Interrupt Enable                             */
            uint32            : 2;
      __IOM uint32 MODE       : 2;            /*!< [17..16] DMA2D mode                                                       */
            uint32            : 14;
    } bit;
  } CR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000004) Interrupt Status Register                                  */
    
    struct {
      __IM  uint32 TEIF       : 1;            /*!< [0..0] Transfer error interrupt flag                                      */
      __IM  uint32 TCIF       : 1;            /*!< [1..1] Transfer complete interrupt flag                                   */
      __IM  uint32 TWIF       : 1;            /*!< [2..2] Transfer watermark interrupt flag                                  */
      __IM  uint32 CAEIF      : 1;            /*!< [3..3] CLUT access error interrupt flag                                   */
      __IM  uint32 CTCIF      : 1;            /*!< [4..4] CLUT transfer complete interrupt flag                              */
      __IM  uint32 CEIF       : 1;            /*!< [5..5] Configuration error interrupt flag                                 */
            uint32            : 26;
    } bit;
  } ISR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) interrupt flag clear register                              */
    
    struct {
      __IOM uint32 CTEIF      : 1;            /*!< [0..0] Clear Transfer error interrupt flag                                */
      __IOM uint32 CTCIF      : 1;            /*!< [1..1] Clear transfer complete interrupt flag                             */
      __IOM uint32 CTWIF      : 1;            /*!< [2..2] Clear transfer watermark interrupt flag                            */
      __IOM uint32 CAECIF     : 1;            /*!< [3..3] Clear CLUT access error interrupt flag                             */
      __IOM uint32 CCTCIF     : 1;            /*!< [4..4] Clear CLUT transfer complete interrupt flag                        */
      __IOM uint32 CCEIF      : 1;            /*!< [5..5] Clear configuration error interrupt flag                           */
            uint32            : 26;
    } bit;
  } IFCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) foreground memory address register                         */
    
    struct {
      __IOM uint32 MA         : 32;           /*!< [31..0] Memory address                                                    */
    } bit;
  } FGMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) foreground offset register                                 */
    
    struct {
      __IOM uint32 LO         : 14;           /*!< [13..0] Line offset                                                       */
            uint32            : 18;
    } bit;
  } FGOR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) background memory address register                         */
    
    struct {
      __IOM uint32 MA         : 32;           /*!< [31..0] Memory address                                                    */
    } bit;
  } BGMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) background offset register                                 */
    
    struct {
      __IOM uint32 LO         : 14;           /*!< [13..0] Line offset                                                       */
            uint32            : 18;
    } bit;
  } BGOR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) foreground PFC control register                            */
    
    struct {
      __IOM uint32 CM         : 4;            /*!< [3..0] Color mode                                                         */
      __IOM uint32 CCM        : 1;            /*!< [4..4] CLUT color mode                                                    */
      __IOM uint32 START      : 1;            /*!< [5..5] Start                                                              */
            uint32            : 2;
      __IOM uint32 CS         : 8;            /*!< [15..8] CLUT size                                                         */
      __IOM uint32 AM         : 2;            /*!< [17..16] Alpha mode                                                       */
            uint32            : 6;
      __IOM uint32 ALPHA      : 8;            /*!< [31..24] Alpha value                                                      */
    } bit;
  } FGPFCCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) foreground color register                                  */
    
    struct {
      __IOM uint32 BLUE       : 8;            /*!< [7..0] Blue Value                                                         */
      __IOM uint32 GREEN      : 8;            /*!< [15..8] Green Value                                                       */
      __IOM uint32 RED        : 8;            /*!< [23..16] Red Value                                                        */
            uint32            : 8;
    } bit;
  } FGCOLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) background PFC control register                            */
    
    struct {
      __IOM uint32 CM         : 4;            /*!< [3..0] Color mode                                                         */
      __IOM uint32 CCM        : 1;            /*!< [4..4] CLUT Color mode                                                    */
      __IOM uint32 START      : 1;            /*!< [5..5] Start                                                              */
            uint32            : 2;
      __IOM uint32 CS         : 8;            /*!< [15..8] CLUT size                                                         */
      __IOM uint32 AM         : 2;            /*!< [17..16] Alpha mode                                                       */
            uint32            : 6;
      __IOM uint32 ALPHA      : 8;            /*!< [31..24] Alpha value                                                      */
    } bit;
  } BGPFCCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) background color register                                  */
    
    struct {
      __IOM uint32 BLUE       : 8;            /*!< [7..0] Blue Value                                                         */
      __IOM uint32 GREEN      : 8;            /*!< [15..8] Green Value                                                       */
      __IOM uint32 RED        : 8;            /*!< [23..16] Red Value                                                        */
            uint32            : 8;
    } bit;
  } BGCOLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) foreground CLUT memory address register                    */
    
    struct {
      __IOM uint32 MA         : 32;           /*!< [31..0] Memory Address                                                    */
    } bit;
  } FGCMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) background CLUT memory address register                    */
    
    struct {
      __IOM uint32 MA         : 32;           /*!< [31..0] Memory address                                                    */
    } bit;
  } BGCMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) output PFC control register                                */
    
    struct {
      __IOM uint32 CM         : 3;            /*!< [2..0] Color mode                                                         */
            uint32            : 29;
    } bit;
  } OPFCCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) output color register                                      */
    
    struct {
      __IOM uint32 BLUE       : 8;            /*!< [7..0] Blue Value                                                         */
      __IOM uint32 GREEN      : 8;            /*!< [15..8] Green Value                                                       */
      __IOM uint32 RED        : 8;            /*!< [23..16] Red Value                                                        */
      __IOM uint32 APLHA      : 8;            /*!< [31..24] Alpha Channel Value                                              */
    } bit;
  } OCOLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) output memory address register                             */
    
    struct {
      __IOM uint32 MA         : 32;           /*!< [31..0] Memory Address                                                    */
    } bit;
  } OMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) output offset register                                     */
    
    struct {
      __IOM uint32 LO         : 14;           /*!< [13..0] Line Offset                                                       */
            uint32            : 18;
    } bit;
  } OOR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000044) number of line register                                    */
    
    struct {
      __IOM uint32 NL         : 16;           /*!< [15..0] Number of lines                                                   */
      __IOM uint32 PL         : 14;           /*!< [29..16] Pixel per lines                                                  */
            uint32            : 2;
    } bit;
  } NLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) line watermark register                                    */
    
    struct {
      __IOM uint32 LW         : 16;           /*!< [15..0] Line watermark                                                    */
            uint32            : 16;
    } bit;
  } LWR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) AHB master timer configuration register                    */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Enable                                                             */
            uint32            : 7;
      __IOM uint32 DT         : 8;            /*!< [15..8] Dead Time                                                         */
            uint32            : 16;
    } bit;
  } AMTCR;
  __IM  uint32  RESERVED[236];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000400) FGCLUT                                                     */
    
    struct {
      __IOM uint32 BLUE       : 8;            /*!< [7..0] BLUE                                                               */
      __IOM uint32 GREEN      : 8;            /*!< [15..8] GREEN                                                             */
      __IOM uint32 RED        : 8;            /*!< [23..16] RED                                                              */
      __IOM uint32 APLHA      : 8;            /*!< [31..24] APLHA                                                            */
    } bit;
  } FGCLUT;
  __IM  uint32  RESERVED1[255];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000800) BGCLUT                                                     */
    
    struct {
      __IOM uint32 BLUE       : 8;            /*!< [7..0] BLUE                                                               */
      __IOM uint32 GREEN      : 8;            /*!< [15..8] GREEN                                                             */
      __IOM uint32 RED        : 8;            /*!< [23..16] RED                                                              */
      __IOM uint32 APLHA      : 8;            /*!< [31..24] APLHA                                                            */
    } bit;
  } BGCLUT;
} DMA2D_Type;                                   /*!< Size = 2052 (0x804)                                                       */



/* =========================================================================================================================== */
/* ================                                          QUADSPI                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief QuadSPI interface (QUADSPI)
  */

typedef struct {                                /*!< (@ 0xA0001000) QUADSPI Structure                                          */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register                                           */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] Enable                                                             */
      __IOM uint32 ABORT      : 1;            /*!< [1..1] Abort request                                                      */
      __IOM uint32 DMAEN      : 1;            /*!< [2..2] DMA enable                                                         */
      __IOM uint32 TCEN       : 1;            /*!< [3..3] Timeout counter enable                                             */
      __IOM uint32 SSHIFT     : 1;            /*!< [4..4] Sample shift                                                       */
            uint32            : 1;
      __IOM uint32 DFM        : 1;            /*!< [6..6] Dual-flash mode                                                    */
      __IOM uint32 FSEL       : 1;            /*!< [7..7] FLASH memory selection                                             */
      __IOM uint32 FTHRES     : 5;            /*!< [12..8] IFO threshold level                                               */
            uint32            : 3;
      __IOM uint32 TEIE       : 1;            /*!< [16..16] Transfer error interrupt enable                                  */
      __IOM uint32 TCIE       : 1;            /*!< [17..17] Transfer complete interrupt enable                               */
      __IOM uint32 FTIE       : 1;            /*!< [18..18] FIFO threshold interrupt enable                                  */
      __IOM uint32 SMIE       : 1;            /*!< [19..19] Status match interrupt enable                                    */
      __IOM uint32 TOIE       : 1;            /*!< [20..20] TimeOut interrupt enable                                         */
            uint32            : 1;
      __IOM uint32 APMS       : 1;            /*!< [22..22] Automatic poll mode stop                                         */
      __IOM uint32 PMM        : 1;            /*!< [23..23] Polling match mode                                               */
      __IOM uint32 PRESCALER  : 8;            /*!< [31..24] Clock prescaler                                                  */
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) device configuration register                              */
    
    struct {
      __IOM uint32 CKMODE     : 1;            /*!< [0..0] Mode 0 / mode 3                                                    */
            uint32            : 7;
      __IOM uint32 CSHT       : 3;            /*!< [10..8] Chip select high time                                             */
            uint32            : 5;
      __IOM uint32 FSIZE      : 5;            /*!< [20..16] FLASH memory size                                                */
            uint32            : 11;
    } bit;
  } DCR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) status register                                            */
    
    struct {
      __IM  uint32 TEF        : 1;            /*!< [0..0] Transfer error flag                                                */
      __IM  uint32 TCF        : 1;            /*!< [1..1] Transfer complete flag                                             */
      __IM  uint32 FTF        : 1;            /*!< [2..2] FIFO threshold flag                                                */
      __IM  uint32 SMF        : 1;            /*!< [3..3] Status match flag                                                  */
      __IM  uint32 TOF        : 1;            /*!< [4..4] Timeout flag                                                       */
      __IM  uint32 BUSY       : 1;            /*!< [5..5] Busy                                                               */
            uint32            : 2;
      __IM  uint32 FLEVEL     : 7;            /*!< [14..8] FIFO level                                                        */
            uint32            : 17;
    } bit;
  } SR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) flag clear register                                        */
    
    struct {
      __IOM uint32 CTEF       : 1;            /*!< [0..0] Clear transfer error flag                                          */
      __IOM uint32 CTCF       : 1;            /*!< [1..1] Clear transfer complete flag                                       */
            uint32            : 1;
      __IOM uint32 CSMF       : 1;            /*!< [3..3] Clear status match flag                                            */
      __IOM uint32 CTOF       : 1;            /*!< [4..4] Clear timeout flag                                                 */
            uint32            : 27;
    } bit;
  } FCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) data length register                                       */
    
    struct {
      __IOM uint32 DL         : 32;           /*!< [31..0] Data length                                                       */
    } bit;
  } DLR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) communication configuration register                       */
    
    struct {
      __IOM uint32 INSTRUCTION : 8;           /*!< [7..0] Instruction                                                        */
      __IOM uint32 IMODE      : 2;            /*!< [9..8] Instruction mode                                                   */
      __IOM uint32 ADMODE     : 2;            /*!< [11..10] Address mode                                                     */
      __IOM uint32 ADSIZE     : 2;            /*!< [13..12] Address size                                                     */
      __IOM uint32 ABMODE     : 2;            /*!< [15..14] Alternate bytes mode                                             */
      __IOM uint32 ABSIZE     : 2;            /*!< [17..16] Alternate bytes size                                             */
      __IOM uint32 DCYC       : 5;            /*!< [22..18] Number of dummy cycles                                           */
            uint32            : 1;
      __IOM uint32 DMODE      : 2;            /*!< [25..24] Data mode                                                        */
      __IOM uint32 FMODE      : 2;            /*!< [27..26] Functional mode                                                  */
      __IOM uint32 SIOO       : 1;            /*!< [28..28] Send instruction only once mode                                  */
            uint32            : 1;
      __IOM uint32 DHHC       : 1;            /*!< [30..30] DDR hold half cycle                                              */
      __IOM uint32 DDRM       : 1;            /*!< [31..31] Double data rate mode                                            */
    } bit;
  } CCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) address register                                           */
    
    struct {
      __IOM uint32 ADDRESS    : 32;           /*!< [31..0] Address                                                           */
    } bit;
  } AR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) ABR                                                        */
    
    struct {
      __IOM uint32 ALTERNATE  : 32;           /*!< [31..0] ALTERNATE                                                         */
    } bit;
  } ABR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) data register                                              */
    
    struct {
      __IOM uint32 DATA       : 32;           /*!< [31..0] Data                                                              */
    } bit;
  } DR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) polling status mask register                               */
    
    struct {
      __IOM uint32 MASK       : 32;           /*!< [31..0] Status mask                                                       */
    } bit;
  } PSMKR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) polling status match register                              */
    
    struct {
      __IOM uint32 MATCH      : 32;           /*!< [31..0] Status match                                                      */
    } bit;
  } PSMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) polling interval register                                  */
    
    struct {
      __IOM uint32 INTERVAL   : 16;           /*!< [15..0] Polling interval                                                  */
            uint32            : 16;
    } bit;
  } PIR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) low-power timeout register                                 */
    
    struct {
      __IOM uint32 TIMEOUT    : 16;           /*!< [15..0] Timeout period                                                    */
            uint32            : 16;
    } bit;
  } LPTR;
} QUADSPI_Type;                                 /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                            CEC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief HDMI-CEC controller (CEC)
  */

typedef struct {                                /*!< (@ 0x40006C00) CEC Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) control register                                           */
    
    struct {
      __IOM uint32 CECEN      : 1;            /*!< [0..0] CEC Enable                                                         */
      __IOM uint32 TXSOM      : 1;            /*!< [1..1] Tx start of message                                                */
      __IOM uint32 TXEOM      : 1;            /*!< [2..2] Tx End Of Message                                                  */
            uint32            : 29;
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) configuration register                                     */
    
    struct {
      __IOM uint32 SFT        : 3;            /*!< [2..0] Signal Free Time                                                   */
      __IOM uint32 RXTOL      : 1;            /*!< [3..3] Rx-Tolerance                                                       */
      __IOM uint32 BRESTP     : 1;            /*!< [4..4] Rx-stop on bit rising error                                        */
      __IOM uint32 BREGEN     : 1;            /*!< [5..5] Generate error-bit on bit rising error                             */
      __IOM uint32 LBPEGEN    : 1;            /*!< [6..6] Generate Error-Bit on Long Bit Period Error                        */
      __IOM uint32 BRDNOGEN   : 1;            /*!< [7..7] Avoid Error-Bit Generation in Broadcast                            */
      __IOM uint32 SFTOP      : 1;            /*!< [8..8] SFT Option Bit                                                     */
            uint32            : 7;
      __IOM uint32 OAR        : 15;           /*!< [30..16] Own addresses configuration                                      */
      __IOM uint32 LSTN       : 1;            /*!< [31..31] Listen mode                                                      */
    } bit;
  } CFGR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000008) Tx data register                                           */
    
    struct {
      __OM  uint32 TXD        : 8;            /*!< [7..0] Tx Data register                                                   */
            uint32            : 24;
    } bit;
  } TXDR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000000C) Rx Data Register                                           */
    
    struct {
      __IM  uint32 RXDR       : 8;            /*!< [7..0] CEC Rx Data Register                                               */
            uint32            : 24;
    } bit;
  } RXDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Interrupt and Status Register                              */
    
    struct {
      __IOM uint32 RXBR       : 1;            /*!< [0..0] Rx-Byte Received                                                   */
      __IOM uint32 RXEND      : 1;            /*!< [1..1] End Of Reception                                                   */
      __IOM uint32 RXOVR      : 1;            /*!< [2..2] Rx-Overrun                                                         */
      __IOM uint32 BRE        : 1;            /*!< [3..3] Rx-Bit rising error                                                */
      __IOM uint32 SBPE       : 1;            /*!< [4..4] Rx-Short Bit period error                                          */
      __IOM uint32 LBPE       : 1;            /*!< [5..5] Rx-Long Bit Period Error                                           */
      __IOM uint32 RXACKE     : 1;            /*!< [6..6] Rx-Missing Acknowledge                                             */
      __IOM uint32 ARBLST     : 1;            /*!< [7..7] Arbitration Lost                                                   */
      __IOM uint32 TXBR       : 1;            /*!< [8..8] Tx-Byte Request                                                    */
      __IOM uint32 TXEND      : 1;            /*!< [9..9] End of Transmission                                                */
      __IOM uint32 TXUDR      : 1;            /*!< [10..10] Tx-Buffer Underrun                                               */
      __IOM uint32 TXERR      : 1;            /*!< [11..11] Tx-Error                                                         */
      __IOM uint32 TXACKE     : 1;            /*!< [12..12] Tx-Missing acknowledge error                                     */
            uint32            : 19;
    } bit;
  } ISR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) interrupt enable register                                  */
    
    struct {
      __IOM uint32 RXBRIE     : 1;            /*!< [0..0] Rx-Byte Received Interrupt Enable                                  */
      __IOM uint32 RXENDIE    : 1;            /*!< [1..1] End Of Reception Interrupt Enable                                  */
      __IOM uint32 RXOVRIE    : 1;            /*!< [2..2] Rx-Buffer Overrun Interrupt Enable                                 */
      __IOM uint32 BREIE      : 1;            /*!< [3..3] Bit Rising Error Interrupt Enable                                  */
      __IOM uint32 SBPEIE     : 1;            /*!< [4..4] Short Bit Period Error Interrupt Enable                            */
      __IOM uint32 LBPEIE     : 1;            /*!< [5..5] Long Bit Period Error Interrupt Enable                             */
      __IOM uint32 RXACKIE    : 1;            /*!< [6..6] Rx-Missing Acknowledge Error Interrupt Enable                      */
      __IOM uint32 ARBLSTIE   : 1;            /*!< [7..7] Arbitration Lost Interrupt Enable                                  */
      __IOM uint32 TXBRIE     : 1;            /*!< [8..8] Tx-Byte Request Interrupt Enable                                   */
      __IOM uint32 TXENDIE    : 1;            /*!< [9..9] Tx-End of message interrupt enable                                 */
      __IOM uint32 TXUDRIE    : 1;            /*!< [10..10] Tx-Underrun interrupt enable                                     */
      __IOM uint32 TXERRIE    : 1;            /*!< [11..11] Tx-Error Interrupt Enable                                        */
      __IOM uint32 TXACKIE    : 1;            /*!< [12..12] Tx-Missing Acknowledge Error Interrupt Enable                    */
            uint32            : 19;
    } bit;
  } IER;
} CEC_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                         SPDIF_RX                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Receiver Interface (SPDIF_RX)
  */

typedef struct {                                /*!< (@ 0x40004000) SPDIF_RX Structure                                         */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Control register                                           */
    
    struct {
      __IOM uint32 SPDIFEN    : 2;            /*!< [1..0] Peripheral Block Enable                                            */
      __IOM uint32 RXDMAEN    : 1;            /*!< [2..2] Receiver DMA ENable for data flow                                  */
      __IOM uint32 RXSTEO     : 1;            /*!< [3..3] STerEO Mode                                                        */
      __IOM uint32 DRFMT      : 2;            /*!< [5..4] RX Data format                                                     */
      __IOM uint32 PMSK       : 1;            /*!< [6..6] Mask Parity error bit                                              */
      __IOM uint32 VMSK       : 1;            /*!< [7..7] Mask of Validity bit                                               */
      __IOM uint32 CUMSK      : 1;            /*!< [8..8] Mask of channel status and user bits                               */
      __IOM uint32 PTMSK      : 1;            /*!< [9..9] Mask of Preamble Type bits                                         */
      __IOM uint32 CBDMAEN    : 1;            /*!< [10..10] Control Buffer DMA ENable for control flow                       */
      __IOM uint32 CHSEL      : 1;            /*!< [11..11] Channel Selection                                                */
      __IOM uint32 NBTR       : 2;            /*!< [13..12] Maximum allowed re-tries during synchronization phase            */
      __IOM uint32 WFA        : 1;            /*!< [14..14] Wait For Activity                                                */
            uint32            : 1;
      __IOM uint32 INSEL      : 3;            /*!< [18..16] input selection                                                  */
            uint32            : 13;
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Interrupt mask register                                    */
    
    struct {
      __IOM uint32 RXNEIE     : 1;            /*!< [0..0] RXNE interrupt enable                                              */
      __IOM uint32 CSRNEIE    : 1;            /*!< [1..1] Control Buffer Ready Interrupt Enable                              */
      __IOM uint32 PERRIE     : 1;            /*!< [2..2] Parity error interrupt enable                                      */
      __IOM uint32 OVRIE      : 1;            /*!< [3..3] Overrun error Interrupt Enable                                     */
      __IOM uint32 SBLKIE     : 1;            /*!< [4..4] Synchronization Block Detected Interrupt Enable                    */
      __IOM uint32 SYNCDIE    : 1;            /*!< [5..5] Synchronization Done                                               */
      __IOM uint32 IFEIE      : 1;            /*!< [6..6] Serial Interface Error Interrupt Enable                            */
            uint32            : 25;
    } bit;
  } IMR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) Status register                                            */
    
    struct {
      __IM  uint32 RXNE       : 1;            /*!< [0..0] Read data register not empty                                       */
      __IM  uint32 CSRNE      : 1;            /*!< [1..1] Control Buffer register is not empty                               */
      __IM  uint32 PERR       : 1;            /*!< [2..2] Parity error                                                       */
      __IM  uint32 OVR        : 1;            /*!< [3..3] Overrun error                                                      */
      __IM  uint32 SBD        : 1;            /*!< [4..4] Synchronization Block Detected                                     */
      __IM  uint32 SYNCD      : 1;            /*!< [5..5] Synchronization Done                                               */
      __IM  uint32 FERR       : 1;            /*!< [6..6] Framing error                                                      */
      __IM  uint32 SERR       : 1;            /*!< [7..7] Synchronization error                                              */
      __IM  uint32 TERR       : 1;            /*!< [8..8] Time-out error                                                     */
            uint32            : 7;
      __IM  uint32 WIDTH5     : 15;           /*!< [30..16] Duration of 5 symbols counted with SPDIF_CLK                     */
            uint32            : 1;
    } bit;
  } SR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x0000000C) Interrupt Flag Clear register                              */
    
    struct {
            uint32            : 2;
      __OM  uint32 PERRCF     : 1;            /*!< [2..2] Clears the Parity error flag                                       */
      __OM  uint32 OVRCF      : 1;            /*!< [3..3] Clears the Overrun error flag                                      */
      __OM  uint32 SBDCF      : 1;            /*!< [4..4] Clears the Synchronization Block Detected flag                     */
      __OM  uint32 SYNCDCF    : 1;            /*!< [5..5] Clears the Synchronization Done flag                               */
            uint32            : 26;
    } bit;
  } IFCR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000010) Data input register                                        */
    
    struct {
      __IM  uint32 DR         : 24;           /*!< [23..0] Parity Error bit                                                  */
      __IM  uint32 PE         : 1;            /*!< [24..24] Parity Error bit                                                 */
      __IM  uint32 V          : 1;            /*!< [25..25] Validity bit                                                     */
      __IM  uint32 U          : 1;            /*!< [26..26] User bit                                                         */
      __IM  uint32 C          : 1;            /*!< [27..27] Channel Status bit                                               */
      __IM  uint32 PT         : 2;            /*!< [29..28] Preamble Type                                                    */
            uint32            : 2;
    } bit;
  } DR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000014) Channel Status register                                    */
    
    struct {
      __IM  uint32 USR        : 16;           /*!< [15..0] User data information                                             */
      __IM  uint32 CS         : 8;            /*!< [23..16] Channel A status information                                     */
      __IM  uint32 SOB        : 1;            /*!< [24..24] Start Of Block                                                   */
            uint32            : 7;
    } bit;
  } CSR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000018) Debug Information register                                 */
    
    struct {
      __IM  uint32 THI        : 13;           /*!< [12..0] Threshold HIGH                                                    */
            uint32            : 3;
      __IM  uint32 TLO        : 13;           /*!< [28..16] Threshold LOW                                                    */
            uint32            : 3;
    } bit;
  } DIR;
} SPDIF_RX_Type;                                /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                          SDMMC1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Secure digital input/output       interface (SDMMC1)
  */

typedef struct {                                /*!< (@ 0x40012C00) SDMMC1 Structure                                           */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) power control register                                     */
    
    struct {
      __IOM uint32 PWRCTRL    : 2;            /*!< [1..0] PWRCTRL                                                            */
            uint32            : 30;
    } bit;
  } POWER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) SDI clock control register                                 */
    
    struct {
      __IOM uint32 CLKDIV     : 8;            /*!< [7..0] Clock divide factor                                                */
      __IOM uint32 CLKEN      : 1;            /*!< [8..8] Clock enable bit                                                   */
      __IOM uint32 PWRSAV     : 1;            /*!< [9..9] Power saving configuration bit                                     */
      __IOM uint32 BYPASS     : 1;            /*!< [10..10] Clock divider bypass enable bit                                  */
      __IOM uint32 WIDBUS     : 2;            /*!< [12..11] Wide bus mode enable bit                                         */
      __IOM uint32 NEGEDGE    : 1;            /*!< [13..13] SDIO_CK dephasing selection bit                                  */
      __IOM uint32 HWFC_EN    : 1;            /*!< [14..14] HW Flow Control enable                                           */
            uint32            : 17;
    } bit;
  } CLKCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) argument register                                          */
    
    struct {
      __IOM uint32 CMDARG     : 32;           /*!< [31..0] Command argument                                                  */
    } bit;
  } ARG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) command register                                           */
    
    struct {
      __IOM uint32 CMDINDEX   : 6;            /*!< [5..0] Command index                                                      */
      __IOM uint32 WAITRESP   : 2;            /*!< [7..6] Wait for response bits                                             */
      __IOM uint32 WAITINT    : 1;            /*!< [8..8] CPSM waits for interrupt request                                   */
      __IOM uint32 WAITPEND   : 1;            /*!< [9..9] CPSM Waits for ends of data transfer (CmdPend internal
                                                     signal)                                                                   */
      __IOM uint32 CPSMEN     : 1;            /*!< [10..10] Command path state machine (CPSM) Enable bit                     */
      __IOM uint32 SDIOSuspend : 1;           /*!< [11..11] SD I/O suspend command                                           */
      __IOM uint32 ENCMDcompl : 1;            /*!< [12..12] Enable CMD completion                                            */
      __IOM uint32 nIEN       : 1;            /*!< [13..13] not Interrupt Enable                                             */
      __IOM uint32 CE_ATACMD  : 1;            /*!< [14..14] CE-ATA command                                                   */
            uint32            : 17;
    } bit;
  } CMD;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000010) command response register                                  */
    
    struct {
      __IM  uint32 RESPCMD    : 6;            /*!< [5..0] Response command index                                             */
            uint32            : 26;
    } bit;
  } RESPCMD;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000014) response 1..4 register                                     */
    
    struct {
      __IM  uint32 CARDSTATUS1 : 32;          /*!< [31..0] see Table 132                                                     */
    } bit;
  } RESP1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000018) response 1..4 register                                     */
    
    struct {
      __IM  uint32 CARDSTATUS2 : 32;          /*!< [31..0] see Table 132                                                     */
    } bit;
  } RESP2;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000001C) response 1..4 register                                     */
    
    struct {
      __IM  uint32 CARDSTATUS3 : 32;          /*!< [31..0] see Table 132                                                     */
    } bit;
  } RESP3;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000020) response 1..4 register                                     */
    
    struct {
      __IM  uint32 CARDSTATUS4 : 32;          /*!< [31..0] see Table 132                                                     */
    } bit;
  } RESP4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) data timer register                                        */
    
    struct {
      __IOM uint32 DATATIME   : 32;           /*!< [31..0] Data timeout period                                               */
    } bit;
  } DTIMER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) data length register                                       */
    
    struct {
      __IOM uint32 DATALENGTH : 25;           /*!< [24..0] Data length value                                                 */
            uint32            : 7;
    } bit;
  } DLEN;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) data control register                                      */
    
    struct {
      __IOM uint32 DTEN       : 1;            /*!< [0..0] DTEN                                                               */
      __IOM uint32 DTDIR      : 1;            /*!< [1..1] Data transfer direction selection                                  */
      __IOM uint32 DTMODE     : 1;            /*!< [2..2] Data transfer mode selection 1: Stream or SDIO multibyte
                                                     data transfer                                                             */
      __IOM uint32 DMAEN      : 1;            /*!< [3..3] DMA enable bit                                                     */
      __IOM uint32 DBLOCKSIZE : 4;            /*!< [7..4] Data block size                                                    */
      __IOM uint32 RWSTART    : 1;            /*!< [8..8] Read wait start                                                    */
      __IOM uint32 RWSTOP     : 1;            /*!< [9..9] Read wait stop                                                     */
      __IOM uint32 RWMOD      : 1;            /*!< [10..10] Read wait mode                                                   */
      __IOM uint32 SDIOEN     : 1;            /*!< [11..11] SD I/O enable functions                                          */
            uint32            : 20;
    } bit;
  } DCTRL;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000030) data counter register                                      */
    
    struct {
      __IM  uint32 DATACOUNT  : 25;           /*!< [24..0] Data count value                                                  */
            uint32            : 7;
    } bit;
  } DCOUNT;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000034) status register                                            */
    
    struct {
      __IM  uint32 CCRCFAIL   : 1;            /*!< [0..0] Command response received (CRC check failed)                       */
      __IM  uint32 DCRCFAIL   : 1;            /*!< [1..1] Data block sent/received (CRC check failed)                        */
      __IM  uint32 CTIMEOUT   : 1;            /*!< [2..2] Command response timeout                                           */
      __IM  uint32 DTIMEOUT   : 1;            /*!< [3..3] Data timeout                                                       */
      __IM  uint32 TXUNDERR   : 1;            /*!< [4..4] Transmit FIFO underrun error                                       */
      __IM  uint32 RXOVERR    : 1;            /*!< [5..5] Received FIFO overrun error                                        */
      __IM  uint32 CMDREND    : 1;            /*!< [6..6] Command response received (CRC check passed)                       */
      __IM  uint32 CMDSENT    : 1;            /*!< [7..7] Command sent (no response required)                                */
      __IM  uint32 DATAEND    : 1;            /*!< [8..8] Data end (data counter, SDIDCOUNT, is zero)                        */
      __IM  uint32 STBITERR   : 1;            /*!< [9..9] Start bit not detected on all data signals in wide bus
                                                     mode                                                                      */
      __IM  uint32 DBCKEND    : 1;            /*!< [10..10] Data block sent/received (CRC check passed)                      */
      __IM  uint32 CMDACT     : 1;            /*!< [11..11] Command transfer in progress                                     */
      __IM  uint32 TXACT      : 1;            /*!< [12..12] Data transmit in progress                                        */
      __IM  uint32 RXACT      : 1;            /*!< [13..13] Data receive in progress                                         */
      __IM  uint32 TXFIFOHE   : 1;            /*!< [14..14] Transmit FIFO half empty: at least 8 words can be written
                                                     into the FIFO                                                             */
      __IM  uint32 RXFIFOHF   : 1;            /*!< [15..15] Receive FIFO half full: there are at least 8 words
                                                     in the FIFO                                                               */
      __IM  uint32 TXFIFOF    : 1;            /*!< [16..16] Transmit FIFO full                                               */
      __IM  uint32 RXFIFOF    : 1;            /*!< [17..17] Receive FIFO full                                                */
      __IM  uint32 TXFIFOE    : 1;            /*!< [18..18] Transmit FIFO empty                                              */
      __IM  uint32 RXFIFOE    : 1;            /*!< [19..19] Receive FIFO empty                                               */
      __IM  uint32 TXDAVL     : 1;            /*!< [20..20] Data available in transmit FIFO                                  */
      __IM  uint32 RXDAVL     : 1;            /*!< [21..21] Data available in receive FIFO                                   */
      __IM  uint32 SDIOIT     : 1;            /*!< [22..22] SDIO interrupt received                                          */
      __IM  uint32 CEATAEND   : 1;            /*!< [23..23] CE-ATA command completion signal received for CMD61              */
            uint32            : 8;
    } bit;
  } STA;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) interrupt clear register                                   */
    
    struct {
      __IOM uint32 CCRCFAILC  : 1;            /*!< [0..0] CCRCFAIL flag clear bit                                            */
      __IOM uint32 DCRCFAILC  : 1;            /*!< [1..1] DCRCFAIL flag clear bit                                            */
      __IOM uint32 CTIMEOUTC  : 1;            /*!< [2..2] CTIMEOUT flag clear bit                                            */
      __IOM uint32 DTIMEOUTC  : 1;            /*!< [3..3] DTIMEOUT flag clear bit                                            */
      __IOM uint32 TXUNDERRC  : 1;            /*!< [4..4] TXUNDERR flag clear bit                                            */
      __IOM uint32 RXOVERRC   : 1;            /*!< [5..5] RXOVERR flag clear bit                                             */
      __IOM uint32 CMDRENDC   : 1;            /*!< [6..6] CMDREND flag clear bit                                             */
      __IOM uint32 CMDSENTC   : 1;            /*!< [7..7] CMDSENT flag clear bit                                             */
      __IOM uint32 DATAENDC   : 1;            /*!< [8..8] DATAEND flag clear bit                                             */
      __IOM uint32 STBITERRC  : 1;            /*!< [9..9] STBITERR flag clear bit                                            */
      __IOM uint32 DBCKENDC   : 1;            /*!< [10..10] DBCKEND flag clear bit                                           */
            uint32            : 11;
      __IOM uint32 SDIOITC    : 1;            /*!< [22..22] SDIOIT flag clear bit                                            */
      __IOM uint32 CEATAENDC  : 1;            /*!< [23..23] CEATAEND flag clear bit                                          */
            uint32            : 8;
    } bit;
  } ICR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) mask register                                              */
    
    struct {
      __IOM uint32 CCRCFAILIE : 1;            /*!< [0..0] Command CRC fail interrupt enable                                  */
      __IOM uint32 DCRCFAILIE : 1;            /*!< [1..1] Data CRC fail interrupt enable                                     */
      __IOM uint32 CTIMEOUTIE : 1;            /*!< [2..2] Command timeout interrupt enable                                   */
      __IOM uint32 DTIMEOUTIE : 1;            /*!< [3..3] Data timeout interrupt enable                                      */
      __IOM uint32 TXUNDERRIE : 1;            /*!< [4..4] Tx FIFO underrun error interrupt enable                            */
      __IOM uint32 RXOVERRIE  : 1;            /*!< [5..5] Rx FIFO overrun error interrupt enable                             */
      __IOM uint32 CMDRENDIE  : 1;            /*!< [6..6] Command response received interrupt enable                         */
      __IOM uint32 CMDSENTIE  : 1;            /*!< [7..7] Command sent interrupt enable                                      */
      __IOM uint32 DATAENDIE  : 1;            /*!< [8..8] Data end interrupt enable                                          */
      __IOM uint32 STBITERRIE : 1;            /*!< [9..9] Start bit error interrupt enable                                   */
      __IOM uint32 DBCKENDIE  : 1;            /*!< [10..10] Data block end interrupt enable                                  */
      __IOM uint32 CMDACTIE   : 1;            /*!< [11..11] Command acting interrupt enable                                  */
      __IOM uint32 TXACTIE    : 1;            /*!< [12..12] Data transmit acting interrupt enable                            */
      __IOM uint32 RXACTIE    : 1;            /*!< [13..13] Data receive acting interrupt enable                             */
      __IOM uint32 TXFIFOHEIE : 1;            /*!< [14..14] Tx FIFO half empty interrupt enable                              */
      __IOM uint32 RXFIFOHFIE : 1;            /*!< [15..15] Rx FIFO half full interrupt enable                               */
      __IOM uint32 TXFIFOFIE  : 1;            /*!< [16..16] Tx FIFO full interrupt enable                                    */
      __IOM uint32 RXFIFOFIE  : 1;            /*!< [17..17] Rx FIFO full interrupt enable                                    */
      __IOM uint32 TXFIFOEIE  : 1;            /*!< [18..18] Tx FIFO empty interrupt enable                                   */
      __IOM uint32 RXFIFOEIE  : 1;            /*!< [19..19] Rx FIFO empty interrupt enable                                   */
      __IOM uint32 TXDAVLIE   : 1;            /*!< [20..20] Data available in Tx FIFO interrupt enable                       */
      __IOM uint32 RXDAVLIE   : 1;            /*!< [21..21] Data available in Rx FIFO interrupt enable                       */
      __IOM uint32 SDIOITIE   : 1;            /*!< [22..22] SDIO mode interrupt received interrupt enable                    */
      __IOM uint32 CEATAENDIE : 1;            /*!< [23..23] CE-ATA command completion signal received interrupt
                                                     enable                                                                    */
            uint32            : 8;
    } bit;
  } MASK;
  __IM  uint32  RESERVED[2];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000048) FIFO counter register                                      */
    
    struct {
      __IM  uint32 FIFOCOUNT  : 24;           /*!< [23..0] Remaining number of words to be written to or read from
                                                     the FIFO                                                                  */
            uint32            : 8;
    } bit;
  } FIFOCNT;
  __IM  uint32  RESERVED1[13];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000080) data FIFO register                                         */
    
    struct {
      __IOM uint32 FIFOData   : 32;           /*!< [31..0] Receive and transmit FIFO data                                    */
    } bit;
  } FIFO;
} SDMMC1_Type;                                  /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                          LPTIM1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Low power timer (LPTIM1)
  */

typedef struct {                                /*!< (@ 0x40002400) LPTIM1 Structure                                           */
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000000) Interrupt and Status Register                              */
    
    struct {
      __IM  uint32 CMPM       : 1;            /*!< [0..0] Compare match                                                      */
      __IM  uint32 ARRM       : 1;            /*!< [1..1] Autoreload match                                                   */
      __IM  uint32 EXTTRIG    : 1;            /*!< [2..2] External trigger edge event                                        */
      __IM  uint32 CMPOK      : 1;            /*!< [3..3] Compare register update OK                                         */
      __IM  uint32 ARROK      : 1;            /*!< [4..4] Autoreload register update OK                                      */
      __IM  uint32 UP         : 1;            /*!< [5..5] Counter direction change down to up                                */
      __IM  uint32 DOWN       : 1;            /*!< [6..6] Counter direction change up to down                                */
            uint32            : 25;
    } bit;
  } ISR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000004) Interrupt Clear Register                                   */
    
    struct {
      __OM  uint32 CMPMCF     : 1;            /*!< [0..0] compare match Clear Flag                                           */
      __OM  uint32 ARRMCF     : 1;            /*!< [1..1] Autoreload match Clear Flag                                        */
      __OM  uint32 EXTTRIGCF  : 1;            /*!< [2..2] External trigger valid edge Clear Flag                             */
      __OM  uint32 CMPOKCF    : 1;            /*!< [3..3] Compare register update OK Clear Flag                              */
      __OM  uint32 ARROKCF    : 1;            /*!< [4..4] Autoreload register update OK Clear Flag                           */
      __OM  uint32 UPCF       : 1;            /*!< [5..5] Direction change to UP Clear Flag                                  */
      __OM  uint32 DOWNCF     : 1;            /*!< [6..6] Direction change to down Clear Flag                                */
            uint32            : 25;
    } bit;
  } ICR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Interrupt Enable Register                                  */
    
    struct {
      __IOM uint32 CMPMIE     : 1;            /*!< [0..0] Compare match Interrupt Enable                                     */
      __IOM uint32 ARRMIE     : 1;            /*!< [1..1] Autoreload match Interrupt Enable                                  */
      __IOM uint32 EXTTRIGIE  : 1;            /*!< [2..2] External trigger valid edge Interrupt Enable                       */
      __IOM uint32 CMPOKIE    : 1;            /*!< [3..3] Compare register update OK Interrupt Enable                        */
      __IOM uint32 ARROKIE    : 1;            /*!< [4..4] Autoreload register update OK Interrupt Enable                     */
      __IOM uint32 UPIE       : 1;            /*!< [5..5] Direction change to UP Interrupt Enable                            */
      __IOM uint32 DOWNIE     : 1;            /*!< [6..6] Direction change to down Interrupt Enable                          */
            uint32            : 25;
    } bit;
  } IER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Configuration Register                                     */
    
    struct {
      __IOM uint32 CKSEL      : 1;            /*!< [0..0] Clock selector                                                     */
      __IOM uint32 CKPOL      : 2;            /*!< [2..1] Clock Polarity                                                     */
      __IOM uint32 CKFLT      : 2;            /*!< [4..3] Configurable digital filter for external clock                     */
            uint32            : 1;
      __IOM uint32 TRGFLT     : 2;            /*!< [7..6] Configurable digital filter for trigger                            */
            uint32            : 1;
      __IOM uint32 PRESC      : 3;            /*!< [11..9] Clock prescaler                                                   */
            uint32            : 1;
      __IOM uint32 TRIGSEL    : 3;            /*!< [15..13] Trigger selector                                                 */
            uint32            : 1;
      __IOM uint32 TRIGEN     : 2;            /*!< [18..17] Trigger enable and polarity                                      */
      __IOM uint32 TIMOUT     : 1;            /*!< [19..19] Timeout enable                                                   */
      __IOM uint32 WAVE       : 1;            /*!< [20..20] Waveform shape                                                   */
      __IOM uint32 WAVPOL     : 1;            /*!< [21..21] Waveform shape polarity                                          */
      __IOM uint32 PRELOAD    : 1;            /*!< [22..22] Registers update mode                                            */
      __IOM uint32 COUNTMODE  : 1;            /*!< [23..23] counter mode enabled                                             */
      __IOM uint32 ENC        : 1;            /*!< [24..24] Encoder mode enable                                              */
            uint32            : 7;
    } bit;
  } CFGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Control Register                                           */
    
    struct {
      __IOM uint32 ENABLE     : 1;            /*!< [0..0] LPTIM Enable                                                       */
      __IOM uint32 SNGSTRT    : 1;            /*!< [1..1] LPTIM start in single mode                                         */
      __IOM uint32 CNTSTRT    : 1;            /*!< [2..2] Timer start in continuous mode                                     */
            uint32            : 29;
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Compare Register                                           */
    
    struct {
      __IOM uint32 CMP        : 16;           /*!< [15..0] Compare value                                                     */
            uint32            : 16;
    } bit;
  } CMP;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) Autoreload Register                                        */
    
    struct {
      __IOM uint32 ARR        : 16;           /*!< [15..0] Auto reload value                                                 */
            uint32            : 16;
    } bit;
  } ARR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000001C) Counter Register                                           */
    
    struct {
      __IM  uint32 CNT        : 16;           /*!< [15..0] Counter value                                                     */
            uint32            : 16;
    } bit;
  } CNT;
} LPTIM1_Type;                                  /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter-integrated circuit (I2C1)
  */

typedef struct {                                /*!< (@ 0x40005400) I2C1 Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Control register 1                                         */
    
    struct {
      __IOM uint32 PE         : 1;            /*!< [0..0] Peripheral enable                                                  */
      __IOM uint32 TXIE       : 1;            /*!< [1..1] TX Interrupt enable                                                */
      __IOM uint32 RXIE       : 1;            /*!< [2..2] RX Interrupt enable                                                */
      __IOM uint32 ADDRIE     : 1;            /*!< [3..3] Address match interrupt enable (slave only)                        */
      __IOM uint32 NACKIE     : 1;            /*!< [4..4] Not acknowledge received interrupt enable                          */
      __IOM uint32 STOPIE     : 1;            /*!< [5..5] STOP detection Interrupt enable                                    */
      __IOM uint32 TCIE       : 1;            /*!< [6..6] Transfer Complete interrupt enable                                 */
      __IOM uint32 ERRIE      : 1;            /*!< [7..7] Error interrupts enable                                            */
      __IOM uint32 DNF        : 4;            /*!< [11..8] Digital noise filter                                              */
      __IOM uint32 ANFOFF     : 1;            /*!< [12..12] Analog noise filter OFF                                          */
            uint32            : 1;
      __IOM uint32 TXDMAEN    : 1;            /*!< [14..14] DMA transmission requests enable                                 */
      __IOM uint32 RXDMAEN    : 1;            /*!< [15..15] DMA reception requests enable                                    */
      __IOM uint32 SBC        : 1;            /*!< [16..16] Slave byte control                                               */
      __IOM uint32 NOSTRETCH  : 1;            /*!< [17..17] Clock stretching disable                                         */
      __IOM uint32 WUPEN      : 1;            /*!< [18..18] Wakeup from STOP enable                                          */
      __IOM uint32 GCEN       : 1;            /*!< [19..19] General call enable                                              */
      __IOM uint32 SMBHEN     : 1;            /*!< [20..20] SMBus Host address enable                                        */
      __IOM uint32 SMBDEN     : 1;            /*!< [21..21] SMBus Device Default address enable                              */
      __IOM uint32 ALERTEN    : 1;            /*!< [22..22] SMBUS alert enable                                               */
      __IOM uint32 PECEN      : 1;            /*!< [23..23] PEC enable                                                       */
            uint32            : 8;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Control register 2                                         */
    
    struct {
      __IOM uint32 SADD       : 10;           /*!< [9..0] Slave address bit (master mode)                                    */
      __IOM uint32 RD_WRN     : 1;            /*!< [10..10] Transfer direction (master mode)                                 */
      __IOM uint32 ADD10      : 1;            /*!< [11..11] 10-bit addressing mode (master mode)                             */
      __IOM uint32 HEAD10R    : 1;            /*!< [12..12] 10-bit address header only read direction (master receiver
                                                     mode)                                                                     */
      __IOM uint32 START      : 1;            /*!< [13..13] Start generation                                                 */
      __IOM uint32 STOP       : 1;            /*!< [14..14] Stop generation (master mode)                                    */
      __IOM uint32 NACK       : 1;            /*!< [15..15] NACK generation (slave mode)                                     */
      __IOM uint32 NBYTES     : 8;            /*!< [23..16] Number of bytes                                                  */
      __IOM uint32 RELOAD     : 1;            /*!< [24..24] NBYTES reload mode                                               */
      __IOM uint32 AUTOEND    : 1;            /*!< [25..25] Automatic end mode (master mode)                                 */
      __IOM uint32 PECBYTE    : 1;            /*!< [26..26] Packet error checking byte                                       */
            uint32            : 5;
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Own address register 1                                     */
    
    struct {
      __IOM uint32 OA1        : 10;           /*!< [9..0] Interface address                                                  */
      __IOM uint32 OA1MODE    : 1;            /*!< [10..10] Own Address 1 10-bit mode                                        */
            uint32            : 4;
      __IOM uint32 OA1EN      : 1;            /*!< [15..15] Own Address 1 enable                                             */
            uint32            : 16;
    } bit;
  } OAR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Own address register 2                                     */
    
    struct {
            uint32            : 1;
      __IOM uint32 OA2        : 7;            /*!< [7..1] Interface address                                                  */
      __IOM uint32 OA2MSK     : 3;            /*!< [10..8] Own Address 2 masks                                               */
            uint32            : 4;
      __IOM uint32 OA2EN      : 1;            /*!< [15..15] Own Address 2 enable                                             */
            uint32            : 16;
    } bit;
  } OAR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Timing register                                            */
    
    struct {
      __IOM uint32 SCLL       : 8;            /*!< [7..0] SCL low period (master mode)                                       */
      __IOM uint32 SCLH       : 8;            /*!< [15..8] SCL high period (master mode)                                     */
      __IOM uint32 SDADEL     : 4;            /*!< [19..16] Data hold time                                                   */
      __IOM uint32 SCLDEL     : 4;            /*!< [23..20] Data setup time                                                  */
            uint32            : 4;
      __IOM uint32 PRESC      : 4;            /*!< [31..28] Timing prescaler                                                 */
    } bit;
  } TIMINGR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Status register 1                                          */
    
    struct {
      __IOM uint32 TIMEOUTA   : 12;           /*!< [11..0] Bus timeout A                                                     */
      __IOM uint32 TIDLE      : 1;            /*!< [12..12] Idle clock timeout detection                                     */
            uint32            : 2;
      __IOM uint32 TIMOUTEN   : 1;            /*!< [15..15] Clock timeout enable                                             */
      __IOM uint32 TIMEOUTB   : 12;           /*!< [27..16] Bus timeout B                                                    */
            uint32            : 3;
      __IOM uint32 TEXTEN     : 1;            /*!< [31..31] Extended clock timeout enable                                    */
    } bit;
  } TIMEOUTR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) Interrupt and Status register                              */
    
    struct {
      __IOM uint32 TXE        : 1;            /*!< [0..0] Transmit data register empty (transmitters)                        */
      __IOM uint32 TXIS       : 1;            /*!< [1..1] Transmit interrupt status (transmitters)                           */
      __IM  uint32 RXNE       : 1;            /*!< [2..2] Receive data register not empty (receivers)                        */
      __IM  uint32 ADDR       : 1;            /*!< [3..3] Address matched (slave mode)                                       */
      __IM  uint32 NACKF      : 1;            /*!< [4..4] Not acknowledge received flag                                      */
      __IM  uint32 STOPF      : 1;            /*!< [5..5] Stop detection flag                                                */
      __IM  uint32 TC         : 1;            /*!< [6..6] Transfer Complete (master mode)                                    */
      __IM  uint32 TCR        : 1;            /*!< [7..7] Transfer Complete Reload                                           */
      __IM  uint32 BERR       : 1;            /*!< [8..8] Bus error                                                          */
      __IM  uint32 ARLO       : 1;            /*!< [9..9] Arbitration lost                                                   */
      __IM  uint32 OVR        : 1;            /*!< [10..10] Overrun/Underrun (slave mode)                                    */
      __IM  uint32 PECERR     : 1;            /*!< [11..11] PEC Error in reception                                           */
      __IM  uint32 TIMEOUT    : 1;            /*!< [12..12] Timeout or t_low detection flag                                  */
      __IM  uint32 ALERT      : 1;            /*!< [13..13] SMBus alert                                                      */
            uint32            : 1;
      __IM  uint32 BUSY       : 1;            /*!< [15..15] Bus busy                                                         */
      __IM  uint32 DIR        : 1;            /*!< [16..16] Transfer direction (Slave mode)                                  */
      __IM  uint32 ADDCODE    : 7;            /*!< [23..17] Address match code (Slave mode)                                  */
            uint32            : 8;
    } bit;
  } ISR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x0000001C) Interrupt clear register                                   */
    
    struct {
            uint32            : 3;
      __OM  uint32 ADDRCF     : 1;            /*!< [3..3] Address Matched flag clear                                         */
      __OM  uint32 NACKCF     : 1;            /*!< [4..4] Not Acknowledge flag clear                                         */
      __OM  uint32 STOPCF     : 1;            /*!< [5..5] Stop detection flag clear                                          */
            uint32            : 2;
      __OM  uint32 BERRCF     : 1;            /*!< [8..8] Bus error flag clear                                               */
      __OM  uint32 ARLOCF     : 1;            /*!< [9..9] Arbitration lost flag clear                                        */
      __OM  uint32 OVRCF      : 1;            /*!< [10..10] Overrun/Underrun flag clear                                      */
      __OM  uint32 PECCF      : 1;            /*!< [11..11] PEC Error flag clear                                             */
      __OM  uint32 TIMOUTCF   : 1;            /*!< [12..12] Timeout detection flag clear                                     */
      __OM  uint32 ALERTCF    : 1;            /*!< [13..13] Alert flag clear                                                 */
            uint32            : 18;
    } bit;
  } ICR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000020) PEC register                                               */
    
    struct {
      __IM  uint32 PEC        : 8;            /*!< [7..0] Packet error checking register                                     */
            uint32            : 24;
    } bit;
  } PECR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000024) Receive data register                                      */
    
    struct {
      __IM  uint32 RXDATA     : 8;            /*!< [7..0] 8-bit receive data                                                 */
            uint32            : 24;
    } bit;
  } RXDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) Transmit data register                                     */
    
    struct {
      __IOM uint32 TXDATA     : 8;            /*!< [7..0] 8-bit transmit data                                                */
            uint32            : 24;
    } bit;
  } TXDR;
} I2C1_Type;                                    /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real-time clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002800) RTC Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) time register                                              */
    
    struct {
      __IOM uint32 SU         : 4;            /*!< [3..0] Second units in BCD format                                         */
      __IOM uint32 ST         : 3;            /*!< [6..4] Second tens in BCD format                                          */
            uint32            : 1;
      __IOM uint32 MNU        : 4;            /*!< [11..8] Minute units in BCD format                                        */
      __IOM uint32 MNT        : 3;            /*!< [14..12] Minute tens in BCD format                                        */
            uint32            : 1;
      __IOM uint32 HU         : 4;            /*!< [19..16] Hour units in BCD format                                         */
      __IOM uint32 HT         : 2;            /*!< [21..20] Hour tens in BCD format                                          */
      __IOM uint32 PM         : 1;            /*!< [22..22] AM/PM notation                                                   */
            uint32            : 9;
    } bit;
  } TR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) date register                                              */
    
    struct {
      __IOM uint32 DU         : 4;            /*!< [3..0] Date units in BCD format                                           */
      __IOM uint32 DT         : 2;            /*!< [5..4] Date tens in BCD format                                            */
            uint32            : 2;
      __IOM uint32 MU         : 4;            /*!< [11..8] Month units in BCD format                                         */
      __IOM uint32 MT         : 1;            /*!< [12..12] Month tens in BCD format                                         */
      __IOM uint32 WDU        : 3;            /*!< [15..13] Week day units                                                   */
      __IOM uint32 YU         : 4;            /*!< [19..16] Year units in BCD format                                         */
      __IOM uint32 YT         : 4;            /*!< [23..20] Year tens in BCD format                                          */
            uint32            : 8;
    } bit;
  } DR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) control register                                           */
    
    struct {
      __IOM uint32 WCKSEL     : 3;            /*!< [2..0] Wakeup clock selection                                             */
      __IOM uint32 TSEDGE     : 1;            /*!< [3..3] Time-stamp event active edge                                       */
      __IOM uint32 REFCKON    : 1;            /*!< [4..4] Reference clock detection enable (50 or 60 Hz)                     */
      __IOM uint32 BYPSHAD    : 1;            /*!< [5..5] Bypass the shadow registers                                        */
      __IOM uint32 FMT        : 1;            /*!< [6..6] Hour format                                                        */
            uint32            : 1;
      __IOM uint32 ALRAE      : 1;            /*!< [8..8] Alarm A enable                                                     */
      __IOM uint32 ALRBE      : 1;            /*!< [9..9] Alarm B enable                                                     */
      __IOM uint32 WUTE       : 1;            /*!< [10..10] Wakeup timer enable                                              */
      __IOM uint32 TSE        : 1;            /*!< [11..11] Time stamp enable                                                */
      __IOM uint32 ALRAIE     : 1;            /*!< [12..12] Alarm A interrupt enable                                         */
      __IOM uint32 ALRBIE     : 1;            /*!< [13..13] Alarm B interrupt enable                                         */
      __IOM uint32 WUTIE      : 1;            /*!< [14..14] Wakeup timer interrupt enable                                    */
      __IOM uint32 TSIE       : 1;            /*!< [15..15] Time-stamp interrupt enable                                      */
      __IOM uint32 ADD1H      : 1;            /*!< [16..16] Add 1 hour (summer time change)                                  */
      __IOM uint32 SUB1H      : 1;            /*!< [17..17] Subtract 1 hour (winter time change)                             */
      __IOM uint32 BKP        : 1;            /*!< [18..18] Backup                                                           */
      __IOM uint32 COSEL      : 1;            /*!< [19..19] Calibration output selection                                     */
      __IOM uint32 POL        : 1;            /*!< [20..20] Output polarity                                                  */
      __IOM uint32 OSEL       : 2;            /*!< [22..21] Output selection                                                 */
      __IOM uint32 COE        : 1;            /*!< [23..23] Calibration output enable                                        */
      __IOM uint32 ITSE       : 1;            /*!< [24..24] timestamp on internal event enable                               */
            uint32            : 7;
    } bit;
  } CR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) initialization and status register                         */
    
    struct {
      __IM  uint32 ALRAWF     : 1;            /*!< [0..0] Alarm A write flag                                                 */
      __IM  uint32 ALRBWF     : 1;            /*!< [1..1] Alarm B write flag                                                 */
      __IM  uint32 WUTWF      : 1;            /*!< [2..2] Wakeup timer write flag                                            */
      __IOM uint32 SHPF       : 1;            /*!< [3..3] Shift operation pending                                            */
      __IM  uint32 INITS      : 1;            /*!< [4..4] Initialization status flag                                         */
      __IOM uint32 RSF        : 1;            /*!< [5..5] Registers synchronization flag                                     */
      __IM  uint32 INITF      : 1;            /*!< [6..6] Initialization flag                                                */
      __IOM uint32 INIT       : 1;            /*!< [7..7] Initialization mode                                                */
      __IOM uint32 ALRAF      : 1;            /*!< [8..8] Alarm A flag                                                       */
      __IOM uint32 ALRBF      : 1;            /*!< [9..9] Alarm B flag                                                       */
      __IOM uint32 WUTF       : 1;            /*!< [10..10] Wakeup timer flag                                                */
      __IOM uint32 TSF        : 1;            /*!< [11..11] Time-stamp flag                                                  */
      __IOM uint32 TSOVF      : 1;            /*!< [12..12] Time-stamp overflow flag                                         */
      __IOM uint32 TAMP1F     : 1;            /*!< [13..13] Tamper detection flag                                            */
      __IOM uint32 TAMP2F     : 1;            /*!< [14..14] RTC_TAMP2 detection flag                                         */
      __IOM uint32 TAMP3F     : 1;            /*!< [15..15] RTC_TAMP3 detection flag                                         */
      __IM  uint32 RECALPF    : 1;            /*!< [16..16] Recalibration pending Flag                                       */
            uint32            : 15;
    } bit;
  } ISR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) prescaler register                                         */
    
    struct {
      __IOM uint32 PREDIV_S   : 15;           /*!< [14..0] Synchronous prescaler factor                                      */
            uint32            : 1;
      __IOM uint32 PREDIV_A   : 7;            /*!< [22..16] Asynchronous prescaler factor                                    */
            uint32            : 9;
    } bit;
  } PRER;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) wakeup timer register                                      */
    
    struct {
      __IOM uint32 WUT        : 16;           /*!< [15..0] Wakeup auto-reload value bits                                     */
            uint32            : 16;
    } bit;
  } WUTR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) alarm A register                                           */
    
    struct {
      __IOM uint32 SU         : 4;            /*!< [3..0] Second units in BCD format                                         */
      __IOM uint32 ST         : 3;            /*!< [6..4] Second tens in BCD format                                          */
      __IOM uint32 MSK1       : 1;            /*!< [7..7] Alarm A seconds mask                                               */
      __IOM uint32 MNU        : 4;            /*!< [11..8] Minute units in BCD format                                        */
      __IOM uint32 MNT        : 3;            /*!< [14..12] Minute tens in BCD format                                        */
      __IOM uint32 MSK2       : 1;            /*!< [15..15] Alarm A minutes mask                                             */
      __IOM uint32 HU         : 4;            /*!< [19..16] Hour units in BCD format                                         */
      __IOM uint32 HT         : 2;            /*!< [21..20] Hour tens in BCD format                                          */
      __IOM uint32 PM         : 1;            /*!< [22..22] AM/PM notation                                                   */
      __IOM uint32 MSK3       : 1;            /*!< [23..23] Alarm A hours mask                                               */
      __IOM uint32 DU         : 4;            /*!< [27..24] Date units or day in BCD format                                  */
      __IOM uint32 DT         : 2;            /*!< [29..28] Date tens in BCD format                                          */
      __IOM uint32 WDSEL      : 1;            /*!< [30..30] Week day selection                                               */
      __IOM uint32 MSK4       : 1;            /*!< [31..31] Alarm A date mask                                                */
    } bit;
  } ALRMAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) alarm B register                                           */
    
    struct {
      __IOM uint32 SU         : 4;            /*!< [3..0] Second units in BCD format                                         */
      __IOM uint32 ST         : 3;            /*!< [6..4] Second tens in BCD format                                          */
      __IOM uint32 MSK1       : 1;            /*!< [7..7] Alarm B seconds mask                                               */
      __IOM uint32 MNU        : 4;            /*!< [11..8] Minute units in BCD format                                        */
      __IOM uint32 MNT        : 3;            /*!< [14..12] Minute tens in BCD format                                        */
      __IOM uint32 MSK2       : 1;            /*!< [15..15] Alarm B minutes mask                                             */
      __IOM uint32 HU         : 4;            /*!< [19..16] Hour units in BCD format                                         */
      __IOM uint32 HT         : 2;            /*!< [21..20] Hour tens in BCD format                                          */
      __IOM uint32 PM         : 1;            /*!< [22..22] AM/PM notation                                                   */
      __IOM uint32 MSK3       : 1;            /*!< [23..23] Alarm B hours mask                                               */
      __IOM uint32 DU         : 4;            /*!< [27..24] Date units or day in BCD format                                  */
      __IOM uint32 DT         : 2;            /*!< [29..28] Date tens in BCD format                                          */
      __IOM uint32 WDSEL      : 1;            /*!< [30..30] Week day selection                                               */
      __IOM uint32 MSK4       : 1;            /*!< [31..31] Alarm B date mask                                                */
    } bit;
  } ALRMBR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000024) write protection register                                  */
    
    struct {
      __OM  uint32 KEY        : 8;            /*!< [7..0] Write protection key                                               */
            uint32            : 24;
    } bit;
  } WPR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000028) sub second register                                        */
    
    struct {
      __IM  uint32 SS         : 16;           /*!< [15..0] Sub second value                                                  */
            uint32            : 16;
    } bit;
  } SSR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x0000002C) shift control register                                     */
    
    struct {
      __OM  uint32 SUBFS      : 15;           /*!< [14..0] Subtract a fraction of a second                                   */
            uint32            : 16;
      __OM  uint32 ADD1S      : 1;            /*!< [31..31] Add one second                                                   */
    } bit;
  } SHIFTR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000030) time stamp time register                                   */
    
    struct {
      __IM  uint32 SU         : 4;            /*!< [3..0] Second units in BCD format                                         */
      __IM  uint32 ST         : 3;            /*!< [6..4] Second tens in BCD format                                          */
            uint32            : 1;
      __IM  uint32 MNU        : 4;            /*!< [11..8] Minute units in BCD format                                        */
      __IM  uint32 MNT        : 3;            /*!< [14..12] Minute tens in BCD format                                        */
            uint32            : 1;
      __IM  uint32 HU         : 4;            /*!< [19..16] Hour units in BCD format                                         */
      __IM  uint32 HT         : 2;            /*!< [21..20] Hour tens in BCD format                                          */
      __IM  uint32 PM         : 1;            /*!< [22..22] AM/PM notation                                                   */
            uint32            : 9;
    } bit;
  } TSTR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000034) time stamp date register                                   */
    
    struct {
      __IM  uint32 DU         : 4;            /*!< [3..0] Date units in BCD format                                           */
      __IM  uint32 DT         : 2;            /*!< [5..4] Date tens in BCD format                                            */
            uint32            : 2;
      __IM  uint32 MU         : 4;            /*!< [11..8] Month units in BCD format                                         */
      __IM  uint32 MT         : 1;            /*!< [12..12] Month tens in BCD format                                         */
      __IM  uint32 WDU        : 3;            /*!< [15..13] Week day units                                                   */
            uint32            : 16;
    } bit;
  } TSDR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000038) timestamp sub second register                              */
    
    struct {
      __IM  uint32 SS         : 16;           /*!< [15..0] Sub second value                                                  */
            uint32            : 16;
    } bit;
  } TSSSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) calibration register                                       */
    
    struct {
      __IOM uint32 CALM       : 9;            /*!< [8..0] Calibration minus                                                  */
            uint32            : 4;
      __IOM uint32 CALW16     : 1;            /*!< [13..13] Use a 16-second calibration cycle period                         */
      __IOM uint32 CALW8      : 1;            /*!< [14..14] Use an 8-second calibration cycle period                         */
      __IOM uint32 CALP       : 1;            /*!< [15..15] Increase frequency of RTC by 488.5 ppm                           */
            uint32            : 16;
    } bit;
  } CALR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) tamper configuration register                              */
    
    struct {
      __IOM uint32 TAMP1E     : 1;            /*!< [0..0] Tamper 1 detection enable                                          */
      __IOM uint32 TAMP1TRG   : 1;            /*!< [1..1] Active level for tamper 1                                          */
      __IOM uint32 TAMPIE     : 1;            /*!< [2..2] Tamper interrupt enable                                            */
      __IOM uint32 TAMP2E     : 1;            /*!< [3..3] Tamper 2 detection enable                                          */
      __IOM uint32 TAMP2TRG   : 1;            /*!< [4..4] Active level for tamper 2                                          */
      __IOM uint32 TAMP3E     : 1;            /*!< [5..5] Tamper 3 detection enable                                          */
      __IOM uint32 TAMP3TRG   : 1;            /*!< [6..6] Active level for tamper 3                                          */
      __IOM uint32 TAMPTS     : 1;            /*!< [7..7] Activate timestamp on tamper detection event                       */
      __IOM uint32 TAMPFREQ   : 3;            /*!< [10..8] Tamper sampling frequency                                         */
      __IOM uint32 TAMPFLT    : 2;            /*!< [12..11] Tamper filter count                                              */
      __IOM uint32 TAMPPRCH   : 2;            /*!< [14..13] Tamper precharge duration                                        */
      __IOM uint32 TAMPPUDIS  : 1;            /*!< [15..15] TAMPER pull-up disable                                           */
      __IOM uint32 TAMP1IE    : 1;            /*!< [16..16] Tamper 1 interrupt enable                                        */
      __IOM uint32 TAMP1NOERASE : 1;          /*!< [17..17] Tamper 1 no erase                                                */
      __IOM uint32 TAMP1MF    : 1;            /*!< [18..18] Tamper 1 mask flag                                               */
      __IOM uint32 TAMP2IE    : 1;            /*!< [19..19] Tamper 2 interrupt enable                                        */
      __IOM uint32 TAMP2NOERASE : 1;          /*!< [20..20] Tamper 2 no erase                                                */
      __IOM uint32 TAMP2MF    : 1;            /*!< [21..21] Tamper 2 mask flag                                               */
      __IOM uint32 TAMP3IE    : 1;            /*!< [22..22] Tamper 3 interrupt enable                                        */
      __IOM uint32 TAMP3NOERASE : 1;          /*!< [23..23] Tamper 3 no erase                                                */
      __IOM uint32 TAMP3MF    : 1;            /*!< [24..24] Tamper 3 mask flag                                               */
            uint32            : 7;
    } bit;
  } TAMPCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000044) alarm A sub second register                                */
    
    struct {
      __IOM uint32 SS         : 15;           /*!< [14..0] Sub seconds value                                                 */
            uint32            : 9;
      __IOM uint32 MASKSS     : 4;            /*!< [27..24] Mask the most-significant bits starting at this bit              */
            uint32            : 4;
    } bit;
  } ALRMASSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000048) alarm B sub second register                                */
    
    struct {
      __IOM uint32 SS         : 15;           /*!< [14..0] Sub seconds value                                                 */
            uint32            : 9;
      __IOM uint32 MASKSS     : 4;            /*!< [27..24] Mask the most-significant bits starting at this bit              */
            uint32            : 4;
    } bit;
  } ALRMBSSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000004C) option register                                            */
    
    struct {
      __IOM uint32 RTC_ALARM_TYPE : 1;        /*!< [0..0] RTC_ALARM on PC13 output type                                      */
      __IOM uint32 RTC_OUT_RMP : 1;           /*!< [1..1] RTC_OUT remap                                                      */
            uint32            : 30;
    } bit;
  } OR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000050) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP0R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000054) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP1R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000058) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP2R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000005C) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP3R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000060) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP4R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000064) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP5R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000068) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP6R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000006C) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP7R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000070) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP8R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000074) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP9R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000078) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP10R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000007C) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP11R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000080) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP12R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000084) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP13R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000088) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP14R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000008C) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP15R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000090) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP16R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000094) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP17R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000098) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP18R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000009C) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP19R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000A0) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP20R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000A4) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP21R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000A8) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP22R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000AC) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP23R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000B0) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP24R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000B4) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP25R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000B8) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP26R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000BC) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP27R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000C0) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP28R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000C4) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP29R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000C8) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP30R;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000000CC) backup register                                            */
    
    struct {
      __IOM uint32 BKP        : 32;           /*!< [31..0] BKP                                                               */
    } bit;
  } BKP31R;
} RTC_Type;                                     /*!< Size = 208 (0xd0)                                                         */



/* =========================================================================================================================== */
/* ================                                          USART6                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver       transmitter (USART6)
  */

typedef struct {                                /*!< (@ 0x40011400) USART6 Structure                                           */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Control register 1                                         */
    
    struct {
      __IOM uint32 UE         : 1;            /*!< [0..0] USART enable                                                       */
      __IOM uint32 UESM       : 1;            /*!< [1..1] USART enable in Stop mode                                          */
      __IOM uint32 RE         : 1;            /*!< [2..2] Receiver enable                                                    */
      __IOM uint32 TE         : 1;            /*!< [3..3] Transmitter enable                                                 */
      __IOM uint32 IDLEIE     : 1;            /*!< [4..4] IDLE interrupt enable                                              */
      __IOM uint32 RXNEIE     : 1;            /*!< [5..5] RXNE interrupt enable                                              */
      __IOM uint32 TCIE       : 1;            /*!< [6..6] Transmission complete interrupt enable                             */
      __IOM uint32 TXEIE      : 1;            /*!< [7..7] interrupt enable                                                   */
      __IOM uint32 PEIE       : 1;            /*!< [8..8] PE interrupt enable                                                */
      __IOM uint32 PS         : 1;            /*!< [9..9] Parity selection                                                   */
      __IOM uint32 PCE        : 1;            /*!< [10..10] Parity control enable                                            */
      __IOM uint32 WAKE       : 1;            /*!< [11..11] Receiver wakeup method                                           */
      __IOM uint32 M0         : 1;            /*!< [12..12] Word length                                                      */
      __IOM uint32 MME        : 1;            /*!< [13..13] Mute mode enable                                                 */
      __IOM uint32 CMIE       : 1;            /*!< [14..14] Character match interrupt enable                                 */
      __IOM uint32 OVER8      : 1;            /*!< [15..15] Oversampling mode                                                */
      __IOM uint32 DEDT0      : 1;            /*!< [16..16] DEDT0                                                            */
      __IOM uint32 DEDT1      : 1;            /*!< [17..17] DEDT1                                                            */
      __IOM uint32 DEDT2      : 1;            /*!< [18..18] DEDT2                                                            */
      __IOM uint32 DEDT3      : 1;            /*!< [19..19] DEDT3                                                            */
      __IOM uint32 DEDT4      : 1;            /*!< [20..20] Driver Enable de-assertion time                                  */
      __IOM uint32 DEAT0      : 1;            /*!< [21..21] DEAT0                                                            */
      __IOM uint32 DEAT1      : 1;            /*!< [22..22] DEAT1                                                            */
      __IOM uint32 DEAT2      : 1;            /*!< [23..23] DEAT2                                                            */
      __IOM uint32 DEAT3      : 1;            /*!< [24..24] DEAT3                                                            */
      __IOM uint32 DEAT4      : 1;            /*!< [25..25] Driver Enable assertion time                                     */
      __IOM uint32 RTOIE      : 1;            /*!< [26..26] Receiver timeout interrupt enable                                */
      __IOM uint32 EOBIE      : 1;            /*!< [27..27] End of Block interrupt enable                                    */
      __IOM uint32 M1         : 1;            /*!< [28..28] Word length                                                      */
            uint32            : 3;
    } bit;
  } CR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Control register 2                                         */
    
    struct {
            uint32            : 4;
      __IOM uint32 ADDM7      : 1;            /*!< [4..4] 7-bit Address Detection/4-bit Address Detection                    */
      __IOM uint32 LBDL       : 1;            /*!< [5..5] LIN break detection length                                         */
      __IOM uint32 LBDIE      : 1;            /*!< [6..6] LIN break detection interrupt enable                               */
            uint32            : 1;
      __IOM uint32 LBCL       : 1;            /*!< [8..8] Last bit clock pulse                                               */
      __IOM uint32 CPHA       : 1;            /*!< [9..9] Clock phase                                                        */
      __IOM uint32 CPOL       : 1;            /*!< [10..10] Clock polarity                                                   */
      __IOM uint32 CLKEN      : 1;            /*!< [11..11] Clock enable                                                     */
      __IOM uint32 STOP       : 2;            /*!< [13..12] STOP bits                                                        */
      __IOM uint32 LINEN      : 1;            /*!< [14..14] LIN mode enable                                                  */
      __IOM uint32 SWAP       : 1;            /*!< [15..15] Swap TX/RX pins                                                  */
      __IOM uint32 RXINV      : 1;            /*!< [16..16] RX pin active level inversion                                    */
      __IOM uint32 TXINV      : 1;            /*!< [17..17] TX pin active level inversion                                    */
      __IOM uint32 TAINV      : 1;            /*!< [18..18] Binary data inversion                                            */
      __IOM uint32 MSBFIRST   : 1;            /*!< [19..19] Most significant bit first                                       */
      __IOM uint32 ABREN      : 1;            /*!< [20..20] Auto baud rate enable                                            */
      __IOM uint32 ABRMOD0    : 1;            /*!< [21..21] ABRMOD0                                                          */
      __IOM uint32 ABRMOD1    : 1;            /*!< [22..22] Auto baud rate mode                                              */
      __IOM uint32 RTOEN      : 1;            /*!< [23..23] Receiver timeout enable                                          */
      __IOM uint32 ADD0_3     : 4;            /*!< [27..24] Address of the USART node                                        */
      __IOM uint32 ADD4_7     : 4;            /*!< [31..28] Address of the USART node                                        */
    } bit;
  } CR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Control register 3                                         */
    
    struct {
      __IOM uint32 EIE        : 1;            /*!< [0..0] Error interrupt enable                                             */
      __IOM uint32 IREN       : 1;            /*!< [1..1] Ir mode enable                                                     */
      __IOM uint32 IRLP       : 1;            /*!< [2..2] Ir low-power                                                       */
      __IOM uint32 HDSEL      : 1;            /*!< [3..3] Half-duplex selection                                              */
      __IOM uint32 NACK       : 1;            /*!< [4..4] Smartcard NACK enable                                              */
      __IOM uint32 SCEN       : 1;            /*!< [5..5] Smartcard mode enable                                              */
      __IOM uint32 DMAR       : 1;            /*!< [6..6] DMA enable receiver                                                */
      __IOM uint32 DMAT       : 1;            /*!< [7..7] DMA enable transmitter                                             */
      __IOM uint32 RTSE       : 1;            /*!< [8..8] RTS enable                                                         */
      __IOM uint32 CTSE       : 1;            /*!< [9..9] CTS enable                                                         */
      __IOM uint32 CTSIE      : 1;            /*!< [10..10] CTS interrupt enable                                             */
      __IOM uint32 ONEBIT     : 1;            /*!< [11..11] One sample bit method enable                                     */
      __IOM uint32 OVRDIS     : 1;            /*!< [12..12] Overrun Disable                                                  */
      __IOM uint32 DDRE       : 1;            /*!< [13..13] DMA Disable on Reception Error                                   */
      __IOM uint32 DEM        : 1;            /*!< [14..14] Driver enable mode                                               */
      __IOM uint32 DEP        : 1;            /*!< [15..15] Driver enable polarity selection                                 */
            uint32            : 1;
      __IOM uint32 SCARCNT    : 3;            /*!< [19..17] Smartcard auto-retry count                                       */
      __IOM uint32 WUS        : 2;            /*!< [21..20] Wakeup from Stop mode interrupt flag selection                   */
      __IOM uint32 WUFIE      : 1;            /*!< [22..22] Wakeup from Stop mode interrupt enable                           */
            uint32            : 9;
    } bit;
  } CR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Baud rate register                                         */
    
    struct {
      __IOM uint32 DIV_Fraction : 4;          /*!< [3..0] DIV_Fraction                                                       */
      __IOM uint32 DIV_Mantissa : 12;         /*!< [15..4] DIV_Mantissa                                                      */
            uint32            : 16;
    } bit;
  } BRR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) Guard time and prescaler register                          */
    
    struct {
      __IOM uint32 PSC        : 8;            /*!< [7..0] Prescaler value                                                    */
      __IOM uint32 GT         : 8;            /*!< [15..8] Guard time value                                                  */
            uint32            : 16;
    } bit;
  } GTPR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Receiver timeout register                                  */
    
    struct {
      __IOM uint32 RTO        : 24;           /*!< [23..0] Receiver timeout value                                            */
      __IOM uint32 BLEN       : 8;            /*!< [31..24] Block Length                                                     */
    } bit;
  } RTOR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000018) Request register                                           */
    
    struct {
      __OM  uint32 ABRRQ      : 1;            /*!< [0..0] Auto baud rate request                                             */
      __OM  uint32 SBKRQ      : 1;            /*!< [1..1] Send break request                                                 */
      __OM  uint32 MMRQ       : 1;            /*!< [2..2] Mute mode request                                                  */
      __OM  uint32 RXFRQ      : 1;            /*!< [3..3] Receive data flush request                                         */
      __OM  uint32 TXFRQ      : 1;            /*!< [4..4] Transmit data flush request                                        */
            uint32            : 27;
    } bit;
  } RQR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000001C) Interrupt & status register                                */
    
    struct {
      __IM  uint32 PE         : 1;            /*!< [0..0] PE                                                                 */
      __IM  uint32 FE         : 1;            /*!< [1..1] FE                                                                 */
      __IM  uint32 NF         : 1;            /*!< [2..2] NF                                                                 */
      __IM  uint32 ORE        : 1;            /*!< [3..3] ORE                                                                */
      __IM  uint32 IDLE       : 1;            /*!< [4..4] IDLE                                                               */
      __IM  uint32 RXNE       : 1;            /*!< [5..5] RXNE                                                               */
      __IM  uint32 TC         : 1;            /*!< [6..6] TC                                                                 */
      __IM  uint32 TXE        : 1;            /*!< [7..7] TXE                                                                */
      __IM  uint32 LBDF       : 1;            /*!< [8..8] LBDF                                                               */
      __IM  uint32 CTSIF      : 1;            /*!< [9..9] CTSIF                                                              */
      __IM  uint32 CTS        : 1;            /*!< [10..10] CTS                                                              */
      __IM  uint32 RTOF       : 1;            /*!< [11..11] RTOF                                                             */
      __IM  uint32 EOBF       : 1;            /*!< [12..12] EOBF                                                             */
            uint32            : 1;
      __IM  uint32 ABRE       : 1;            /*!< [14..14] ABRE                                                             */
      __IM  uint32 ABRF       : 1;            /*!< [15..15] ABRF                                                             */
      __IM  uint32 BUSY       : 1;            /*!< [16..16] BUSY                                                             */
      __IM  uint32 CMF        : 1;            /*!< [17..17] CMF                                                              */
      __IM  uint32 SBKF       : 1;            /*!< [18..18] SBKF                                                             */
      __IM  uint32 RWU        : 1;            /*!< [19..19] RWU                                                              */
      __IM  uint32 WUF        : 1;            /*!< [20..20] WUF                                                              */
      __IM  uint32 TEACK      : 1;            /*!< [21..21] TEACK                                                            */
      __IM  uint32 REACK      : 1;            /*!< [22..22] REACK                                                            */
            uint32            : 9;
    } bit;
  } ISR;
  
  union {
    __OM  uint32 reg;                         /*!< (@ 0x00000020) Interrupt flag clear register                              */
    
    struct {
      __OM  uint32 PECF       : 1;            /*!< [0..0] Parity error clear flag                                            */
      __OM  uint32 FECF       : 1;            /*!< [1..1] Framing error clear flag                                           */
      __OM  uint32 NCF        : 1;            /*!< [2..2] Noise detected clear flag                                          */
      __OM  uint32 ORECF      : 1;            /*!< [3..3] Overrun error clear flag                                           */
      __OM  uint32 IDLECF     : 1;            /*!< [4..4] Idle line detected clear flag                                      */
            uint32            : 1;
      __OM  uint32 TCCF       : 1;            /*!< [6..6] Transmission complete clear flag                                   */
            uint32            : 1;
      __OM  uint32 LBDCF      : 1;            /*!< [8..8] LIN break detection clear flag                                     */
      __OM  uint32 CTSCF      : 1;            /*!< [9..9] CTS clear flag                                                     */
            uint32            : 1;
      __OM  uint32 RTOCF      : 1;            /*!< [11..11] Receiver timeout clear flag                                      */
      __OM  uint32 EOBCF      : 1;            /*!< [12..12] End of block clear flag                                          */
            uint32            : 4;
      __OM  uint32 CMCF       : 1;            /*!< [17..17] Character match clear flag                                       */
            uint32            : 2;
      __OM  uint32 WUCF       : 1;            /*!< [20..20] Wakeup from Stop mode clear flag                                 */
            uint32            : 11;
    } bit;
  } ICR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000024) Receive data register                                      */
    
    struct {
      __IM  uint32 RDR        : 9;            /*!< [8..0] Receive data value                                                 */
            uint32            : 23;
    } bit;
  } RDR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) Transmit data register                                     */
    
    struct {
      __IOM uint32 TDR        : 9;            /*!< [8..0] Transmit data value                                                */
            uint32            : 23;
    } bit;
  } TDR;
} USART6_Type;                                  /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_GLOBAL                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_GLOBAL)
  */

typedef struct {                                /*!< (@ 0x50000000) OTG_FS_GLOBAL Structure                                    */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) OTG_FS control and status register (OTG_FS_GOTGCTL)        */
    
    struct {
      __IM  uint32 SRQSCS     : 1;            /*!< [0..0] Session request success                                            */
      __IOM uint32 SRQ        : 1;            /*!< [1..1] Session request                                                    */
      __IOM uint32 VBVALOEN   : 1;            /*!< [2..2] VBUS valid override enable                                         */
      __IOM uint32 VBVALOVAL  : 1;            /*!< [3..3] VBUS valid override value                                          */
      __IOM uint32 AVALOEN    : 1;            /*!< [4..4] A-peripheral session valid override enable                         */
      __IOM uint32 AVALOVAL   : 1;            /*!< [5..5] A-peripheral session valid override value                          */
      __IOM uint32 BVALOEN    : 1;            /*!< [6..6] B-peripheral session valid override enable                         */
      __IOM uint32 BVALOVAL   : 1;            /*!< [7..7] B-peripheral session valid override value                          */
      __IM  uint32 HNGSCS     : 1;            /*!< [8..8] Host negotiation success                                           */
      __IOM uint32 HNPRQ      : 1;            /*!< [9..9] HNP request                                                        */
      __IOM uint32 HSHNPEN    : 1;            /*!< [10..10] Host set HNP enable                                              */
      __IOM uint32 DHNPEN     : 1;            /*!< [11..11] Device HNP enabled                                               */
      __IOM uint32 EHEN       : 1;            /*!< [12..12] Embedded host enable                                             */
            uint32            : 3;
      __IM  uint32 CIDSTS     : 1;            /*!< [16..16] Connector ID status                                              */
      __IM  uint32 DBCT       : 1;            /*!< [17..17] Long/short debounce time                                         */
      __IM  uint32 ASVLD      : 1;            /*!< [18..18] A-session valid                                                  */
      __IM  uint32 BSVLD      : 1;            /*!< [19..19] B-session valid                                                  */
      __IOM uint32 OTGVER     : 1;            /*!< [20..20] OTG version                                                      */
            uint32            : 11;
    } bit;
  } OTG_FS_GOTGCTL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) OTG_FS interrupt register (OTG_FS_GOTGINT)                 */
    
    struct {
            uint32            : 2;
      __IOM uint32 SEDET      : 1;            /*!< [2..2] Session end detected                                               */
            uint32            : 5;
      __IOM uint32 SRSSCHG    : 1;            /*!< [8..8] Session request success status change                              */
      __IOM uint32 HNSSCHG    : 1;            /*!< [9..9] Host negotiation success status change                             */
            uint32            : 7;
      __IOM uint32 HNGDET     : 1;            /*!< [17..17] Host negotiation detected                                        */
      __IOM uint32 ADTOCHG    : 1;            /*!< [18..18] A-device timeout change                                          */
      __IOM uint32 DBCDNE     : 1;            /*!< [19..19] Debounce done                                                    */
      __IOM uint32 IDCHNG     : 1;            /*!< [20..20] ID input pin changed                                             */
            uint32            : 11;
    } bit;
  } OTG_FS_GOTGINT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) OTG_FS AHB configuration register (OTG_FS_GAHBCFG)         */
    
    struct {
      __IOM uint32 GINT       : 1;            /*!< [0..0] Global interrupt mask                                              */
            uint32            : 6;
      __IOM uint32 TXFELVL    : 1;            /*!< [7..7] TxFIFO empty level                                                 */
      __IOM uint32 PTXFELVL   : 1;            /*!< [8..8] Periodic TxFIFO empty level                                        */
            uint32            : 23;
    } bit;
  } OTG_FS_GAHBCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) OTG_FS USB configuration register (OTG_FS_GUSBCFG)         */
    
    struct {
      __IOM uint32 TOCAL      : 3;            /*!< [2..0] FS timeout calibration                                             */
            uint32            : 3;
      __OM  uint32 PHYSEL     : 1;            /*!< [6..6] Full Speed serial transceiver select                               */
            uint32            : 1;
      __IOM uint32 SRPCAP     : 1;            /*!< [8..8] SRP-capable                                                        */
      __IOM uint32 HNPCAP     : 1;            /*!< [9..9] HNP-capable                                                        */
      __IOM uint32 TRDT       : 4;            /*!< [13..10] USB turnaround time                                              */
            uint32            : 15;
      __IOM uint32 FHMOD      : 1;            /*!< [29..29] Force host mode                                                  */
      __IOM uint32 FDMOD      : 1;            /*!< [30..30] Force device mode                                                */
            uint32            : 1;
    } bit;
  } OTG_FS_GUSBCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) OTG_FS reset register (OTG_FS_GRSTCTL)                     */
    
    struct {
      __IOM uint32 CSRST      : 1;            /*!< [0..0] Core soft reset                                                    */
      __IOM uint32 HSRST      : 1;            /*!< [1..1] HCLK soft reset                                                    */
      __IOM uint32 FCRST      : 1;            /*!< [2..2] Host frame counter reset                                           */
            uint32            : 1;
      __IOM uint32 RXFFLSH    : 1;            /*!< [4..4] RxFIFO flush                                                       */
      __IOM uint32 TXFFLSH    : 1;            /*!< [5..5] TxFIFO flush                                                       */
      __IOM uint32 TXFNUM     : 5;            /*!< [10..6] TxFIFO number                                                     */
            uint32            : 20;
      __IM  uint32 AHBIDL     : 1;            /*!< [31..31] AHB master idle                                                  */
    } bit;
  } OTG_FS_GRSTCTL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) OTG_FS core interrupt register (OTG_FS_GINTSTS)            */
    
    struct {
      __IM  uint32 CMOD       : 1;            /*!< [0..0] Current mode of operation                                          */
      __IOM uint32 MMIS       : 1;            /*!< [1..1] Mode mismatch interrupt                                            */
      __IM  uint32 OTGINT     : 1;            /*!< [2..2] OTG interrupt                                                      */
      __IOM uint32 SOF        : 1;            /*!< [3..3] Start of frame                                                     */
      __IM  uint32 RXFLVL     : 1;            /*!< [4..4] RxFIFO non-empty                                                   */
      __IM  uint32 NPTXFE     : 1;            /*!< [5..5] Non-periodic TxFIFO empty                                          */
      __IM  uint32 GINAKEFF   : 1;            /*!< [6..6] Global IN non-periodic NAK effective                               */
      __IM  uint32 GOUTNAKEFF : 1;            /*!< [7..7] Global OUT NAK effective                                           */
            uint32            : 2;
      __IOM uint32 ESUSP      : 1;            /*!< [10..10] Early suspend                                                    */
      __IOM uint32 USBSUSP    : 1;            /*!< [11..11] USB suspend                                                      */
      __IOM uint32 USBRST     : 1;            /*!< [12..12] USB reset                                                        */
      __IOM uint32 ENUMDNE    : 1;            /*!< [13..13] Enumeration done                                                 */
      __IOM uint32 ISOODRP    : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt                         */
      __IOM uint32 EOPF       : 1;            /*!< [15..15] End of periodic frame interrupt                                  */
            uint32            : 2;
      __IM  uint32 IEPINT     : 1;            /*!< [18..18] IN endpoint interrupt                                            */
      __IM  uint32 OEPINT     : 1;            /*!< [19..19] OUT endpoint interrupt                                           */
      __IOM uint32 IISOIXFR   : 1;            /*!< [20..20] Incomplete isochronous IN transfer                               */
      __IOM uint32 IPXFR_INCOMPISOOUT : 1;    /*!< [21..21] Incomplete periodic transfer(Host mode)/Incomplete
                                                     isochronous OUT transfer(Device mode)                                     */
            uint32            : 1;
      __IOM uint32 RSTDET     : 1;            /*!< [23..23] Reset detected interrupt                                         */
      __IM  uint32 HPRTINT    : 1;            /*!< [24..24] Host port interrupt                                              */
      __IM  uint32 HCINT      : 1;            /*!< [25..25] Host channels interrupt                                          */
      __IM  uint32 PTXFE      : 1;            /*!< [26..26] Periodic TxFIFO empty                                            */
            uint32            : 1;
      __IOM uint32 CIDSCHG    : 1;            /*!< [28..28] Connector ID status change                                       */
      __IOM uint32 DISCINT    : 1;            /*!< [29..29] Disconnect detected interrupt                                    */
      __IOM uint32 SRQINT     : 1;            /*!< [30..30] Session request/new session detected interrupt                   */
      __IOM uint32 WKUPINT    : 1;            /*!< [31..31] Resume/remote wakeup detected interrupt                          */
    } bit;
  } OTG_FS_GINTSTS;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) OTG_FS interrupt mask register (OTG_FS_GINTMSK)            */
    
    struct {
            uint32            : 1;
      __IOM uint32 MMISM      : 1;            /*!< [1..1] Mode mismatch interrupt mask                                       */
      __IOM uint32 OTGINT     : 1;            /*!< [2..2] OTG interrupt mask                                                 */
      __IOM uint32 SOFM       : 1;            /*!< [3..3] Start of frame mask                                                */
      __IOM uint32 RXFLVLM    : 1;            /*!< [4..4] Receive FIFO non-empty mask                                        */
      __IOM uint32 NPTXFEM    : 1;            /*!< [5..5] Non-periodic TxFIFO empty mask                                     */
      __IOM uint32 GINAKEFFM  : 1;            /*!< [6..6] Global non-periodic IN NAK effective mask                          */
      __IOM uint32 GONAKEFFM  : 1;            /*!< [7..7] Global OUT NAK effective mask                                      */
            uint32            : 2;
      __IOM uint32 ESUSPM     : 1;            /*!< [10..10] Early suspend mask                                               */
      __IOM uint32 USBSUSPM   : 1;            /*!< [11..11] USB suspend mask                                                 */
      __IOM uint32 USBRST     : 1;            /*!< [12..12] USB reset mask                                                   */
      __IOM uint32 ENUMDNEM   : 1;            /*!< [13..13] Enumeration done mask                                            */
      __IOM uint32 ISOODRPM   : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt mask                    */
      __IOM uint32 EOPFM      : 1;            /*!< [15..15] End of periodic frame interrupt mask                             */
            uint32            : 2;
      __IOM uint32 IEPINT     : 1;            /*!< [18..18] IN endpoints interrupt mask                                      */
      __IOM uint32 OEPINT     : 1;            /*!< [19..19] OUT endpoints interrupt mask                                     */
      __IOM uint32 IISOIXFRM  : 1;            /*!< [20..20] Incomplete isochronous IN transfer mask                          */
      __IOM uint32 IPXFRM_IISOOXFRM : 1;      /*!< [21..21] Incomplete periodic transfer mask(Host mode)/Incomplete
                                                     isochronous OUT transfer mask(Device mode)                                */
            uint32            : 1;
      __IOM uint32 RSTDETM    : 1;            /*!< [23..23] Reset detected interrupt mask                                    */
      __IM  uint32 PRTIM      : 1;            /*!< [24..24] Host port interrupt mask                                         */
      __IOM uint32 HCIM       : 1;            /*!< [25..25] Host channels interrupt mask                                     */
      __IOM uint32 PTXFEM     : 1;            /*!< [26..26] Periodic TxFIFO empty mask                                       */
      __IOM uint32 LPMIN      : 1;            /*!< [27..27] LPM interrupt mask                                               */
      __IOM uint32 CIDSCHGM   : 1;            /*!< [28..28] Connector ID status change mask                                  */
      __IOM uint32 DISCINT    : 1;            /*!< [29..29] Disconnect detected interrupt mask                               */
      __IOM uint32 SRQIM      : 1;            /*!< [30..30] Session request/new session detected interrupt mask              */
      __IOM uint32 WUIM       : 1;            /*!< [31..31] Resume/remote wakeup detected interrupt mask                     */
    } bit;
  } OTG_FS_GINTMSK;
  
  union {
    union {
      __IM  uint32 reg;                       /*!< (@ 0x0000001C) OTG_FS Receive status debug read(Device mode)              */
      
      struct {
        __IM  uint32 EPNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32 BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32 DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32 PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
        __IM  uint32 FRMNUM   : 4;            /*!< [24..21] Frame number                                                     */
              uint32          : 7;
      } bit;
    } OTG_FS_GRXSTSR_Device;
    
    union {
      __IM  uint32 reg;                       /*!< (@ 0x0000001C) OTG_FS Receive status debug read(Host mode)                */
      
      struct {
        __IM  uint32 CHNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32 BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32 DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32 PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
              uint32          : 11;
      } bit;
    } OTG_FS_GRXSTSR_Host;
  };
  
  union {
    union {
      __IM  uint32 reg;                       /*!< (@ 0x00000020) OTG status read and pop register (Device mode)             */
      
      struct {
        __IM  uint32 EPNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32 BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32 DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32 PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
        __IM  uint32 FRMNUM   : 4;            /*!< [24..21] Frame number                                                     */
              uint32          : 7;
      } bit;
    } OTG_FS_GRXSTSP_Device;
    
    union {
      __IM  uint32 reg;                       /*!< (@ 0x00000020) OTG status read and pop register (Host mode)               */
      
      struct {
        __IM  uint32 CHNUM    : 4;            /*!< [3..0] Channel number                                                     */
        __IM  uint32 BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32 DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32 PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
              uint32          : 11;
      } bit;
    } OTG_FS_GRXSTSP_Host;
  };
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) OTG_FS Receive FIFO size register (OTG_FS_GRXFSIZ)         */
    
    struct {
      __IOM uint32 RXFD       : 16;           /*!< [15..0] RxFIFO depth                                                      */
            uint32            : 16;
    } bit;
  } OTG_FS_GRXFSIZ;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000028) OTG_FS Endpoint 0 Transmit FIFO size                       */
      
      struct {
        __IOM uint32 TX0FSA   : 16;           /*!< [15..0] Endpoint 0 transmit RAM start address                             */
        __IOM uint32 TX0FD    : 16;           /*!< [31..16] Endpoint 0 TxFIFO depth                                          */
      } bit;
    } OTG_FS_DIEPTXF0_Device;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000028) OTG_FS Host non-periodic transmit FIFO size register       */
      
      struct {
        __IOM uint32 NPTXFSA  : 16;           /*!< [15..0] Non-periodic transmit RAM start address                           */
        __IOM uint32 NPTXFD   : 16;           /*!< [31..16] Non-periodic TxFIFO depth                                        */
      } bit;
    } OTG_FS_HNPTXFSIZ_Host;
  };
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000002C) OTG_FS non-periodic transmit FIFO/queue status
                                                                    register (OTG_FS_GNPTXSTS)                                 */
    
    struct {
      __IM  uint32 NPTXFSAV   : 16;           /*!< [15..0] Non-periodic TxFIFO space available                               */
      __IM  uint32 NPTQXSAV   : 8;            /*!< [23..16] Non-periodic transmit request queue space available              */
      __IM  uint32 NPTXQTOP   : 7;            /*!< [30..24] Top of the non-periodic transmit request queue                   */
            uint32            : 1;
    } bit;
  } OTG_FS_HNPTXSTS;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) OTG I2C access register                                    */
    
    struct {
      __IOM uint32 RWDATA     : 8;            /*!< [7..0] I2C Read/Write Data                                                */
      __IOM uint32 REGADDR    : 8;            /*!< [15..8] I2C Register Address                                              */
      __IOM uint32 ADDR       : 7;            /*!< [22..16] I2C Address                                                      */
      __IOM uint32 I2CEN      : 1;            /*!< [23..23] I2C Enable                                                       */
      __IOM uint32 ACK        : 1;            /*!< [24..24] I2C ACK                                                          */
            uint32            : 1;
      __IOM uint32 I2CDEVADR  : 2;            /*!< [27..26] I2C Device Address                                               */
      __IOM uint32 I2CDATSE0  : 1;            /*!< [28..28] I2C DatSe0 USB mode                                              */
            uint32            : 1;
      __IOM uint32 RW         : 1;            /*!< [30..30] Read/Write Indicator                                             */
      __IOM uint32 BSYDNE     : 1;            /*!< [31..31] I2C Busy/Done                                                    */
    } bit;
  } OTG_FS_GI2CCTL;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) OTG_FS general core configuration register (OTG_FS_GCCFG)  */
    
    struct {
      __IOM uint32 DCDET      : 1;            /*!< [0..0] Data contact detection (DCD) status                                */
      __IOM uint32 PDET       : 1;            /*!< [1..1] Primary detection (PD) status                                      */
      __IOM uint32 SDET       : 1;            /*!< [2..2] Secondary detection (SD) status                                    */
      __IOM uint32 PS2DET     : 1;            /*!< [3..3] DM pull-up detection status                                        */
            uint32            : 12;
      __IOM uint32 PWRDWN     : 1;            /*!< [16..16] Power down                                                       */
      __IOM uint32 BCDEN      : 1;            /*!< [17..17] Battery charging detector (BCD) enable                           */
      __IOM uint32 DCDEN      : 1;            /*!< [18..18] Data contact detection (DCD) mode enable                         */
      __IOM uint32 PDEN       : 1;            /*!< [19..19] Primary detection (PD) mode enable                               */
      __IOM uint32 SDEN       : 1;            /*!< [20..20] Secondary detection (SD) mode enable                             */
      __IOM uint32 VBDEN      : 1;            /*!< [21..21] USB VBUS detection enable                                        */
            uint32            : 10;
    } bit;
  } OTG_FS_GCCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) core ID register                                           */
    
    struct {
      __IOM uint32 PRODUCT_ID : 32;           /*!< [31..0] Product ID field                                                  */
    } bit;
  } OTG_FS_CID;
  __IM  uint32  RESERVED1[5];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000054) OTG core LPM configuration register                        */
    
    struct {
      __IOM uint32 LPMEN      : 1;            /*!< [0..0] LPM support enable                                                 */
      __IOM uint32 LPMACK     : 1;            /*!< [1..1] LPM token acknowledge enable                                       */
      __IOM uint32 BESL       : 4;            /*!< [5..2] Best effort service latency                                        */
      __IOM uint32 REMWAKE    : 1;            /*!< [6..6] bRemoteWake value                                                  */
      __IOM uint32 L1SSEN     : 1;            /*!< [7..7] L1 Shallow Sleep enable                                            */
      __IOM uint32 BESLTHRS   : 4;            /*!< [11..8] BESL threshold                                                    */
      __IOM uint32 L1DSEN     : 1;            /*!< [12..12] L1 deep sleep enable                                             */
      __IM  uint32 LPMRST     : 2;            /*!< [14..13] LPM response                                                     */
      __IM  uint32 SLPSTS     : 1;            /*!< [15..15] Port sleep status                                                */
      __IM  uint32 L1RSMOK    : 1;            /*!< [16..16] Sleep State Resume OK                                            */
      __IOM uint32 LPMCHIDX   : 4;            /*!< [20..17] LPM Channel Index                                                */
      __IOM uint32 LPMRCNT    : 3;            /*!< [23..21] LPM retry count                                                  */
      __IOM uint32 SNDLPM     : 1;            /*!< [24..24] Send LPM transaction                                             */
      __IM  uint32 LPMRCNTSTS : 3;            /*!< [27..25] LPM retry count status                                           */
      __IOM uint32 ENBESL     : 1;            /*!< [28..28] Enable best effort service latency                               */
            uint32            : 3;
    } bit;
  } OTG_FS_GLPMCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000058) OTG power down register                                    */
    
    struct {
      __IOM uint32 ADPMEN     : 1;            /*!< [0..0] ADP module enable                                                  */
            uint32            : 22;
      __IOM uint32 ADPIF      : 1;            /*!< [23..23] ADP interrupt flag                                               */
            uint32            : 8;
    } bit;
  } OTG_FS_GPWRDN;
  __IM  uint32  RESERVED2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000060) OTG ADP timer, control and status register                 */
    
    struct {
      __IOM uint32 PRBDSCHG   : 2;            /*!< [1..0] Probe discharge                                                    */
      __IOM uint32 PRBDELTA   : 2;            /*!< [3..2] Probe delta                                                        */
      __IOM uint32 PRBPER     : 2;            /*!< [5..4] Probe period                                                       */
      __IM  uint32 RTIM       : 11;           /*!< [16..6] Ramp time                                                         */
      __IOM uint32 ENAPRB     : 1;            /*!< [17..17] Enable probe                                                     */
      __IOM uint32 ENASNS     : 1;            /*!< [18..18] Enable sense                                                     */
      __IM  uint32 ADPRST     : 1;            /*!< [19..19] ADP reset                                                        */
      __IOM uint32 ADPEN      : 1;            /*!< [20..20] ADP enable                                                       */
      __IOM uint32 ADPPRBIF   : 1;            /*!< [21..21] ADP probe interrupt flag                                         */
      __IOM uint32 ADPSNSIF   : 1;            /*!< [22..22] ADP sense interrupt flag                                         */
      __IOM uint32 ADPTOIF    : 1;            /*!< [23..23] ADP timeout interrupt flag                                       */
      __IOM uint32 ADPPRBIM   : 1;            /*!< [24..24] ADP probe interrupt mask                                         */
      __IOM uint32 ADPSNSIM   : 1;            /*!< [25..25] ADP sense interrupt mask                                         */
      __IOM uint32 ADPTOIM    : 1;            /*!< [26..26] ADP timeout interrupt mask                                       */
      __IOM uint32 AR         : 2;            /*!< [28..27] Access request                                                   */
            uint32            : 3;
    } bit;
  } OTG_FS_GADPCTL;
  __IM  uint32  RESERVED3[39];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000100) OTG_FS Host periodic transmit FIFO size register
                                                                    (OTG_FS_HPTXFSIZ)                                          */
    
    struct {
      __IOM uint32 PTXSA      : 16;           /*!< [15..0] Host periodic TxFIFO start address                                */
      __IOM uint32 PTXFSIZ    : 16;           /*!< [31..16] Host periodic TxFIFO depth                                       */
    } bit;
  } OTG_FS_HPTXFSIZ;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000104) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF1)                                 */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFO2 transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_FS_DIEPTXF1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF2)                                 */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFO3 transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_FS_DIEPTXF2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000010C) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF3)                                 */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFO4 transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_FS_DIEPTXF3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000110) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF4)                                 */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint Tx FIFO depth                                        */
    } bit;
  } OTG_FS_DIEPTXF4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000114) OTG_FS device IN endpoint transmit FIFO size
                                                                    register (OTG_FS_DIEPTXF5)                                 */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint Tx FIFO depth                                        */
    } bit;
  } OTG_FS_DIEPTXF5;
} OTG_FS_GLOBAL_Type;                           /*!< Size = 280 (0x118)                                                        */



/* =========================================================================================================================== */
/* ================                                        OTG_FS_HOST                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_HOST)
  */

typedef struct {                                /*!< (@ 0x50000400) OTG_FS_HOST Structure                                      */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) OTG_FS host configuration register (OTG_FS_HCFG)           */
    
    struct {
      __IOM uint32 FSLSPCS    : 2;            /*!< [1..0] FS/LS PHY clock select                                             */
      __IM  uint32 FSLSS      : 1;            /*!< [2..2] FS- and LS-only support                                            */
            uint32            : 29;
    } bit;
  } OTG_FS_HCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) OTG_FS Host frame interval register                        */
    
    struct {
      __IOM uint32 FRIVL      : 16;           /*!< [15..0] Frame interval                                                    */
            uint32            : 16;
    } bit;
  } OTG_FS_HFIR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) OTG_FS host frame number/frame time remaining
                                                                    register (OTG_FS_HFNUM)                                    */
    
    struct {
      __IM  uint32 FRNUM      : 16;           /*!< [15..0] Frame number                                                      */
      __IM  uint32 FTREM      : 16;           /*!< [31..16] Frame time remaining                                             */
    } bit;
  } OTG_FS_HFNUM;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) OTG_FS_Host periodic transmit FIFO/queue status
                                                                    register (OTG_FS_HPTXSTS)                                  */
    
    struct {
      __IOM uint32 PTXFSAVL   : 16;           /*!< [15..0] Periodic transmit data FIFO space available                       */
      __IM  uint32 PTXQSAV    : 8;            /*!< [23..16] Periodic transmit request queue space available                  */
      __IM  uint32 PTXQTOP    : 8;            /*!< [31..24] Top of the periodic transmit request queue                       */
    } bit;
  } OTG_FS_HPTXSTS;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000014) OTG_FS Host all channels interrupt register                */
    
    struct {
      __IM  uint32 HAINT      : 16;           /*!< [15..0] Channel interrupts                                                */
            uint32            : 16;
    } bit;
  } OTG_FS_HAINT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) OTG_FS host all channels interrupt mask register           */
    
    struct {
      __IOM uint32 HAINTM     : 16;           /*!< [15..0] Channel interrupt mask                                            */
            uint32            : 16;
    } bit;
  } OTG_FS_HAINTMSK;
  __IM  uint32  RESERVED1[9];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) OTG_FS host port control and status register
                                                                    (OTG_FS_HPRT)                                              */
    
    struct {
      __IM  uint32 PCSTS      : 1;            /*!< [0..0] Port connect status                                                */
      __IOM uint32 PCDET      : 1;            /*!< [1..1] Port connect detected                                              */
      __IOM uint32 PENA       : 1;            /*!< [2..2] Port enable                                                        */
      __IOM uint32 PENCHNG    : 1;            /*!< [3..3] Port enable/disable change                                         */
      __IM  uint32 POCA       : 1;            /*!< [4..4] Port overcurrent active                                            */
      __IOM uint32 POCCHNG    : 1;            /*!< [5..5] Port overcurrent change                                            */
      __IOM uint32 PRES       : 1;            /*!< [6..6] Port resume                                                        */
      __IOM uint32 PSUSP      : 1;            /*!< [7..7] Port suspend                                                       */
      __IOM uint32 PRST       : 1;            /*!< [8..8] Port reset                                                         */
            uint32            : 1;
      __IM  uint32 PLSTS      : 2;            /*!< [11..10] Port line status                                                 */
      __IOM uint32 PPWR       : 1;            /*!< [12..12] Port power                                                       */
      __IOM uint32 PTCTL      : 4;            /*!< [16..13] Port test control                                                */
      __IM  uint32 PSPD       : 2;            /*!< [18..17] Port speed                                                       */
            uint32            : 13;
    } bit;
  } OTG_FS_HPRT;
  __IM  uint32  RESERVED2[47];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000100) OTG_FS host channel-0 characteristics register
                                                                    (OTG_FS_HCCHAR0)                                           */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR0;
  __IM  uint32  RESERVED3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) OTG_FS host channel-0 interrupt register (OTG_FS_HCINT0)   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000010C) OTG_FS host channel-0 mask register (OTG_FS_HCINTMSK0)     */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000110) OTG_FS host channel-0 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ0;
  __IM  uint32  RESERVED4[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000120) OTG_FS host channel-1 characteristics register
                                                                    (OTG_FS_HCCHAR1)                                           */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR1;
  __IM  uint32  RESERVED5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000128) OTG_FS host channel-1 interrupt register (OTG_FS_HCINT1)   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000012C) OTG_FS host channel-1 mask register (OTG_FS_HCINTMSK1)     */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000130) OTG_FS host channel-1 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ1;
  __IM  uint32  RESERVED6[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000140) OTG_FS host channel-2 characteristics register
                                                                    (OTG_FS_HCCHAR2)                                           */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR2;
  __IM  uint32  RESERVED7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000148) OTG_FS host channel-2 interrupt register (OTG_FS_HCINT2)   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000014C) OTG_FS host channel-2 mask register (OTG_FS_HCINTMSK2)     */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000150) OTG_FS host channel-2 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ2;
  __IM  uint32  RESERVED8[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000160) OTG_FS host channel-3 characteristics register
                                                                    (OTG_FS_HCCHAR3)                                           */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR3;
  __IM  uint32  RESERVED9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000168) OTG_FS host channel-3 interrupt register (OTG_FS_HCINT3)   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000016C) OTG_FS host channel-3 mask register (OTG_FS_HCINTMSK3)     */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000170) OTG_FS host channel-3 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ3;
  __IM  uint32  RESERVED10[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000180) OTG_FS host channel-4 characteristics register
                                                                    (OTG_FS_HCCHAR4)                                           */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR4;
  __IM  uint32  RESERVED11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000188) OTG_FS host channel-4 interrupt register (OTG_FS_HCINT4)   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000018C) OTG_FS host channel-4 mask register (OTG_FS_HCINTMSK4)     */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000190) OTG_FS host channel-x transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ4;
  __IM  uint32  RESERVED12[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A0) OTG_FS host channel-5 characteristics register
                                                                    (OTG_FS_HCCHAR5)                                           */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR5;
  __IM  uint32  RESERVED13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A8) OTG_FS host channel-5 interrupt register (OTG_FS_HCINT5)   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001AC) OTG_FS host channel-5 mask register (OTG_FS_HCINTMSK5)     */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B0) OTG_FS host channel-5 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ5;
  __IM  uint32  RESERVED14[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C0) OTG_FS host channel-6 characteristics register
                                                                    (OTG_FS_HCCHAR6)                                           */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR6;
  __IM  uint32  RESERVED15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C8) OTG_FS host channel-6 interrupt register (OTG_FS_HCINT6)   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001CC) OTG_FS host channel-6 mask register (OTG_FS_HCINTMSK6)     */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001D0) OTG_FS host channel-6 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ6;
  __IM  uint32  RESERVED16[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001E0) OTG_FS host channel-7 characteristics register
                                                                    (OTG_FS_HCCHAR7)                                           */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR7;
  __IM  uint32  RESERVED17;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001E8) OTG_FS host channel-7 interrupt register (OTG_FS_HCINT7)   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001EC) OTG_FS host channel-7 mask register (OTG_FS_HCINTMSK7)     */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001F0) OTG_FS host channel-7 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001F4) OTG_FS host channel-8 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001F8) OTG_FS host channel-8 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001FC) OTG_FS host channel-8 mask register                        */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000200) OTG_FS host channel-8 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000204) OTG_FS host channel-9 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000208) OTG_FS host channel-9 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000020C) OTG_FS host channel-9 mask register                        */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000210) OTG_FS host channel-9 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000214) OTG_FS host channel-10 characteristics register            */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000218) OTG_FS host channel-10 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000021C) OTG_FS host channel-10 mask register                       */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000220) OTG_FS host channel-10 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000224) OTG_FS host channel-11 characteristics register            */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MCNT       : 2;            /*!< [21..20] Multicount                                                       */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_FS_HCCHAR11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000228) OTG_FS host channel-11 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
            uint32            : 1;
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINT11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000022C) OTG_FS host channel-11 mask register                       */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
            uint32            : 1;
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_FS_HCINTMSK11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000230) OTG_FS host channel-11 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_FS_HCTSIZ11;
} OTG_FS_HOST_Type;                             /*!< Size = 564 (0x234)                                                        */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_DEVICE                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_DEVICE)
  */

typedef struct {                                /*!< (@ 0x50000800) OTG_FS_DEVICE Structure                                    */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) OTG_FS device configuration register (OTG_FS_DCFG)         */
    
    struct {
      __IOM uint32 DSPD       : 2;            /*!< [1..0] Device speed                                                       */
      __IOM uint32 NZLSOHSK   : 1;            /*!< [2..2] Non-zero-length status OUT handshake                               */
            uint32            : 1;
      __IOM uint32 DAD        : 7;            /*!< [10..4] Device address                                                    */
      __IOM uint32 PFIVL      : 2;            /*!< [12..11] Periodic frame interval                                          */
            uint32            : 19;
    } bit;
  } OTG_FS_DCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) OTG_FS device control register (OTG_FS_DCTL)               */
    
    struct {
      __IOM uint32 RWUSIG     : 1;            /*!< [0..0] Remote wakeup signaling                                            */
      __IOM uint32 SDIS       : 1;            /*!< [1..1] Soft disconnect                                                    */
      __IM  uint32 GINSTS     : 1;            /*!< [2..2] Global IN NAK status                                               */
      __IM  uint32 GONSTS     : 1;            /*!< [3..3] Global OUT NAK status                                              */
      __IOM uint32 TCTL       : 3;            /*!< [6..4] Test control                                                       */
      __IOM uint32 SGINAK     : 1;            /*!< [7..7] Set global IN NAK                                                  */
      __IOM uint32 CGINAK     : 1;            /*!< [8..8] Clear global IN NAK                                                */
      __IOM uint32 SGONAK     : 1;            /*!< [9..9] Set global OUT NAK                                                 */
      __IOM uint32 CGONAK     : 1;            /*!< [10..10] Clear global OUT NAK                                             */
      __IOM uint32 POPRGDNE   : 1;            /*!< [11..11] Power-on programming done                                        */
            uint32            : 20;
    } bit;
  } OTG_FS_DCTL;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) OTG_FS device status register (OTG_FS_DSTS)                */
    
    struct {
      __IM  uint32 SUSPSTS    : 1;            /*!< [0..0] Suspend status                                                     */
      __IM  uint32 ENUMSPD    : 2;            /*!< [2..1] Enumerated speed                                                   */
      __IM  uint32 EERR       : 1;            /*!< [3..3] Erratic error                                                      */
            uint32            : 4;
      __IM  uint32 FNSOF      : 14;           /*!< [21..8] Frame number of the received SOF                                  */
            uint32            : 10;
    } bit;
  } OTG_FS_DSTS;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) OTG_FS device IN endpoint common interrupt mask
                                                                    register (OTG_FS_DIEPMSK)                                  */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32 EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32            : 1;
      __IOM uint32 TOM        : 1;            /*!< [3..3] Timeout condition mask (Non-isochronous endpoints)                 */
      __IOM uint32 ITTXFEMSK  : 1;            /*!< [4..4] IN token received when TxFIFO empty mask                           */
      __IOM uint32 INEPNMM    : 1;            /*!< [5..5] IN token received with EP mismatch mask                            */
      __IOM uint32 INEPNEM    : 1;            /*!< [6..6] IN endpoint NAK effective mask                                     */
            uint32            : 25;
    } bit;
  } OTG_FS_DIEPMSK;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) OTG_FS device OUT endpoint common interrupt mask
                                                                    register (OTG_FS_DOEPMSK)                                  */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32 EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32            : 1;
      __IOM uint32 STUPM      : 1;            /*!< [3..3] SETUP phase done mask                                              */
      __IOM uint32 OTEPDM     : 1;            /*!< [4..4] OUT token received when endpoint disabled mask                     */
            uint32            : 27;
    } bit;
  } OTG_FS_DOEPMSK;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000018) OTG_FS device all endpoints interrupt register
                                                                    (OTG_FS_DAINT)                                             */
    
    struct {
      __IM  uint32 IEPINT     : 16;           /*!< [15..0] IN endpoint interrupt bits                                        */
      __IM  uint32 OEPINT     : 16;           /*!< [31..16] OUT endpoint interrupt bits                                      */
    } bit;
  } OTG_FS_DAINT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) OTG_FS all endpoints interrupt mask register
                                                                    (OTG_FS_DAINTMSK)                                          */
    
    struct {
      __IOM uint32 IEPM       : 16;           /*!< [15..0] IN EP interrupt mask bits                                         */
      __IOM uint32 OEPINT     : 16;           /*!< [31..16] OUT endpoint interrupt bits                                      */
    } bit;
  } OTG_FS_DAINTMSK;
  __IM  uint32  RESERVED1[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) OTG_FS device VBUS discharge time register                 */
    
    struct {
      __IOM uint32 VBUSDT     : 16;           /*!< [15..0] Device VBUS discharge time                                        */
            uint32            : 16;
    } bit;
  } OTG_FS_DVBUSDIS;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) OTG_FS device VBUS pulsing time register                   */
    
    struct {
      __IOM uint32 DVBUSP     : 12;           /*!< [11..0] Device VBUS pulsing time                                          */
            uint32            : 20;
    } bit;
  } OTG_FS_DVBUSPULSE;
  __IM  uint32  RESERVED2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) OTG_FS device IN endpoint FIFO empty interrupt
                                                                    mask register                                              */
    
    struct {
      __IOM uint32 INEPTXFEM  : 16;           /*!< [15..0] IN EP Tx FIFO empty interrupt mask bits                           */
            uint32            : 16;
    } bit;
  } OTG_FS_DIEPEMPMSK;
  __IM  uint32  RESERVED3[50];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000100) OTG_FS device control IN endpoint 0 control register
                                                                    (OTG_FS_DIEPCTL0)                                          */
    
    struct {
      __IOM uint32 MPSIZ      : 2;            /*!< [1..0] Maximum packet size                                                */
            uint32            : 13;
      __IM  uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
            uint32            : 1;
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IM  uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32            : 1;
      __IOM uint32 STALL      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
            uint32            : 2;
      __IM  uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IM  uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_FS_DIEPCTL0;
  __IM  uint32  RESERVED4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) device endpoint-x interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] TOC                                                                */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] ITTXFE                                                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] INEPNE                                                             */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] TXFE                                                               */
            uint32            : 24;
    } bit;
  } OTG_FS_DIEPINT0;
  __IM  uint32  RESERVED5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000110) device endpoint-0 transfer size register                   */
    
    struct {
      __IOM uint32 XFRSIZ     : 7;            /*!< [6..0] Transfer size                                                      */
            uint32            : 12;
      __IOM uint32 PKTCNT     : 2;            /*!< [20..19] Packet count                                                     */
            uint32            : 11;
    } bit;
  } OTG_FS_DIEPTSIZ0;
  __IM  uint32  RESERVED6;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000118) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space available                                */
            uint32            : 16;
    } bit;
  } OTG_FS_DTXFSTS0;
  __IM  uint32  RESERVED7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000120) OTG device endpoint-1 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TXFNUM                                                           */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM_SD1PID : 1;        /*!< [29..29] SODDFRM/SD1PID                                                   */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DIEPCTL1;
  __IM  uint32  RESERVED8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000128) device endpoint-1 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] TOC                                                                */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] ITTXFE                                                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] INEPNE                                                             */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] TXFE                                                               */
            uint32            : 24;
    } bit;
  } OTG_FS_DIEPINT1;
  __IM  uint32  RESERVED9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000130) device endpoint-1 transfer size register                   */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_FS_DIEPTSIZ1;
  __IM  uint32  RESERVED10;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000138) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space available                                */
            uint32            : 16;
    } bit;
  } OTG_FS_DTXFSTS1;
  __IM  uint32  RESERVED11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000140) OTG device endpoint-2 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TXFNUM                                                           */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DIEPCTL2;
  __IM  uint32  RESERVED12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000148) device endpoint-2 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] TOC                                                                */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] ITTXFE                                                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] INEPNE                                                             */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] TXFE                                                               */
            uint32            : 24;
    } bit;
  } OTG_FS_DIEPINT2;
  __IM  uint32  RESERVED13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000150) device endpoint-2 transfer size register                   */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_FS_DIEPTSIZ2;
  __IM  uint32  RESERVED14;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000158) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space available                                */
            uint32            : 16;
    } bit;
  } OTG_FS_DTXFSTS2;
  __IM  uint32  RESERVED15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000160) OTG device endpoint-3 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TXFNUM                                                           */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DIEPCTL3;
  __IM  uint32  RESERVED16;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000168) device endpoint-3 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] TOC                                                                */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] ITTXFE                                                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] INEPNE                                                             */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] TXFE                                                               */
            uint32            : 24;
    } bit;
  } OTG_FS_DIEPINT3;
  __IM  uint32  RESERVED17;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000170) device endpoint-3 transfer size register                   */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_FS_DIEPTSIZ3;
  __IM  uint32  RESERVED18;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000178) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space available                                */
            uint32            : 16;
    } bit;
  } OTG_FS_DTXFSTS3;
  __IM  uint32  RESERVED19;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000180) OTG device endpoint-4 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TXFNUM                                                           */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DIEPCTL4;
  __IM  uint32  RESERVED20;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000188) device endpoint-4 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] TOC                                                                */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] ITTXFE                                                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] INEPNE                                                             */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] TXFE                                                               */
            uint32            : 24;
    } bit;
  } OTG_FS_DIEPINT4;
  __IM  uint32  RESERVED21[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000194) device endpoint-4 transfer size register                   */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_FS_DIEPTSIZ4;
  __IM  uint32  RESERVED22;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000019C) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space available                                */
            uint32            : 16;
    } bit;
  } OTG_FS_DTXFSTS4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A0) OTG device endpoint-5 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TXFNUM                                                           */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DIEPCTL5;
  __IM  uint32  RESERVED23;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A8) device endpoint-5 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] TOC                                                                */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] ITTXFE                                                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] INEPNE                                                             */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] TXFE                                                               */
            uint32            : 24;
    } bit;
  } OTG_FS_DIEPINT5;
  __IM  uint32  RESERVED24;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B0) device endpoint-5 transfer size register                   */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_FS_DIEPTSIZ55;
  __IM  uint32  RESERVED25;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B8) OTG_FS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space available                                */
            uint32            : 16;
    } bit;
  } OTG_FS_DTXFSTS55;
  __IM  uint32  RESERVED26[81];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000300) device endpoint-0 control register                         */
    
    struct {
      __IM  uint32 MPSIZ      : 2;            /*!< [1..0] MPSIZ                                                              */
            uint32            : 13;
      __IM  uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
            uint32            : 1;
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IM  uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] SNPM                                                             */
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
            uint32            : 2;
      __IM  uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __OM  uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DOEPCTL0;
  __IM  uint32  RESERVED27;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000308) device endpoint-0 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] STUP                                                               */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OTEPDIS                                                            */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] B2BSTUP                                                            */
            uint32            : 25;
    } bit;
  } OTG_FS_DOEPINT0;
  __IM  uint32  RESERVED28;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000310) device OUT endpoint-0 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 7;            /*!< [6..0] Transfer size                                                      */
            uint32            : 12;
      __IOM uint32 PKTCNT     : 1;            /*!< [19..19] Packet count                                                     */
            uint32            : 9;
      __IOM uint32 STUPCNT    : 2;            /*!< [30..29] SETUP packet count                                               */
            uint32            : 1;
    } bit;
  } OTG_FS_DOEPTSIZ0;
  __IM  uint32  RESERVED29[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000320) device endpoint-1 control register                         */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] SNPM                                                             */
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DOEPCTL1;
  __IM  uint32  RESERVED30;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000328) device endpoint-1 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] STUP                                                               */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OTEPDIS                                                            */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] B2BSTUP                                                            */
            uint32            : 25;
    } bit;
  } OTG_FS_DOEPINT1;
  __IM  uint32  RESERVED31;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000330) device OUT endpoint-1 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_FS_DOEPTSIZ1;
  __IM  uint32  RESERVED32[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000340) device endpoint-2 control register                         */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] SNPM                                                             */
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DOEPCTL2;
  __IM  uint32  RESERVED33;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000348) device endpoint-2 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] STUP                                                               */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OTEPDIS                                                            */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] B2BSTUP                                                            */
            uint32            : 25;
    } bit;
  } OTG_FS_DOEPINT2;
  __IM  uint32  RESERVED34;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000350) device OUT endpoint-2 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_FS_DOEPTSIZ2;
  __IM  uint32  RESERVED35[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000360) device endpoint-3 control register                         */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] SNPM                                                             */
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DOEPCTL3;
  __IM  uint32  RESERVED36;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000368) device endpoint-3 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] STUP                                                               */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OTEPDIS                                                            */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] B2BSTUP                                                            */
            uint32            : 25;
    } bit;
  } OTG_FS_DOEPINT3;
  __IM  uint32  RESERVED37;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000370) device OUT endpoint-3 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_FS_DOEPTSIZ3;
  __IM  uint32  RESERVED38;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000378) device endpoint-4 control register                         */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] SNPM                                                             */
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DOEPCTL4;
  __IM  uint32  RESERVED39;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000380) device endpoint-4 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] STUP                                                               */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OTEPDIS                                                            */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] B2BSTUP                                                            */
            uint32            : 25;
    } bit;
  } OTG_FS_DOEPINT4;
  __IM  uint32  RESERVED40;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000388) device OUT endpoint-4 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_FS_DOEPTSIZ4;
  __IM  uint32  RESERVED41;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000390) device endpoint-5 control register                         */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] MPSIZ                                                             */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USBAEP                                                           */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] EONUM/DPID                                                       */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAKSTS                                                           */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] EPTYP                                                            */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] SNPM                                                             */
      __IOM uint32 Stall      : 1;            /*!< [21..21] Stall                                                            */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] CNAK                                                             */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] SNAK                                                             */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] SD0PID/SEVNFRM                                                   */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] SODDFRM                                                          */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] EPDIS                                                            */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] EPENA                                                            */
    } bit;
  } OTG_FS_DOEPCTL5;
  __IM  uint32  RESERVED42;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000398) device endpoint-5 interrupt register                       */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] XFRC                                                               */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] EPDISD                                                             */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] STUP                                                               */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OTEPDIS                                                            */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] B2BSTUP                                                            */
            uint32            : 25;
    } bit;
  } OTG_FS_DOEPINT5;
  __IM  uint32  RESERVED43;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003A0) device OUT endpoint-5 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_FS_DOEPTSIZ5;
} OTG_FS_DEVICE_Type;                           /*!< Size = 932 (0x3a4)                                                        */



/* =========================================================================================================================== */
/* ================                                       OTG_FS_PWRCLK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go full speed (OTG_FS_PWRCLK)
  */

typedef struct {                                /*!< (@ 0x50000E00) OTG_FS_PWRCLK Structure                                    */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) OTG_FS power and clock gating control register
                                                                    (OTG_FS_PCGCCTL)                                           */
    
    struct {
      __IOM uint32 STPPCLK    : 1;            /*!< [0..0] Stop PHY clock                                                     */
      __IOM uint32 GATEHCLK   : 1;            /*!< [1..1] Gate HCLK                                                          */
            uint32            : 2;
      __IOM uint32 PHYSUSP    : 1;            /*!< [4..4] PHY Suspended                                                      */
            uint32            : 27;
    } bit;
  } OTG_FS_PCGCCTL;
} OTG_FS_PWRCLK_Type;                           /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                       OTG_HS_GLOBAL                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (OTG_HS_GLOBAL)
  */

typedef struct {                                /*!< (@ 0x40040000) OTG_HS_GLOBAL Structure                                    */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) OTG_HS control and status register                         */
    
    struct {
      __IM  uint32 SRQSCS     : 1;            /*!< [0..0] Session request success                                            */
      __IOM uint32 SRQ        : 1;            /*!< [1..1] Session request                                                    */
            uint32            : 6;
      __IM  uint32 HNGSCS     : 1;            /*!< [8..8] Host negotiation success                                           */
      __IOM uint32 HNPRQ      : 1;            /*!< [9..9] HNP request                                                        */
      __IOM uint32 HSHNPEN    : 1;            /*!< [10..10] Host set HNP enable                                              */
      __IOM uint32 DHNPEN     : 1;            /*!< [11..11] Device HNP enabled                                               */
      __IOM uint32 EHEN       : 1;            /*!< [12..12] Embedded host enable                                             */
            uint32            : 3;
      __IM  uint32 CIDSTS     : 1;            /*!< [16..16] Connector ID status                                              */
      __IM  uint32 DBCT       : 1;            /*!< [17..17] Long/short debounce time                                         */
      __IM  uint32 ASVLD      : 1;            /*!< [18..18] A-session valid                                                  */
      __IM  uint32 BSVLD      : 1;            /*!< [19..19] B-session valid                                                  */
            uint32            : 12;
    } bit;
  } OTG_HS_GOTGCTL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) OTG_HS interrupt register                                  */
    
    struct {
            uint32            : 2;
      __IOM uint32 SEDET      : 1;            /*!< [2..2] Session end detected                                               */
            uint32            : 5;
      __IOM uint32 SRSSCHG    : 1;            /*!< [8..8] Session request success status change                              */
      __IOM uint32 HNSSCHG    : 1;            /*!< [9..9] Host negotiation success status change                             */
            uint32            : 7;
      __IOM uint32 HNGDET     : 1;            /*!< [17..17] Host negotiation detected                                        */
      __IOM uint32 ADTOCHG    : 1;            /*!< [18..18] A-device timeout change                                          */
      __IOM uint32 DBCDNE     : 1;            /*!< [19..19] Debounce done                                                    */
      __IOM uint32 IDCHNG     : 1;            /*!< [20..20] ID input pin changed                                             */
            uint32            : 11;
    } bit;
  } OTG_HS_GOTGINT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) OTG_HS AHB configuration register                          */
    
    struct {
      __IOM uint32 GINT       : 1;            /*!< [0..0] Global interrupt mask                                              */
      __IOM uint32 HBSTLEN    : 4;            /*!< [4..1] Burst length/type                                                  */
      __IOM uint32 DMAEN      : 1;            /*!< [5..5] DMA enable                                                         */
            uint32            : 1;
      __IOM uint32 TXFELVL    : 1;            /*!< [7..7] TxFIFO empty level                                                 */
      __IOM uint32 PTXFELVL   : 1;            /*!< [8..8] Periodic TxFIFO empty level                                        */
            uint32            : 23;
    } bit;
  } OTG_HS_GAHBCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) OTG_HS USB configuration register                          */
    
    struct {
      __IOM uint32 TOCAL      : 3;            /*!< [2..0] FS timeout calibration                                             */
            uint32            : 3;
      __OM  uint32 PHYSEL     : 1;            /*!< [6..6] USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial
                                                     transceiver select                                                        */
            uint32            : 1;
      __IOM uint32 SRPCAP     : 1;            /*!< [8..8] SRP-capable                                                        */
      __IOM uint32 HNPCAP     : 1;            /*!< [9..9] HNP-capable                                                        */
      __IOM uint32 TRDT       : 4;            /*!< [13..10] USB turnaround time                                              */
            uint32            : 1;
      __IOM uint32 PHYLPCS    : 1;            /*!< [15..15] PHY Low-power clock select                                       */
            uint32            : 1;
      __IOM uint32 ULPIFSLS   : 1;            /*!< [17..17] ULPI FS/LS select                                                */
      __IOM uint32 ULPIAR     : 1;            /*!< [18..18] ULPI Auto-resume                                                 */
      __IOM uint32 ULPICSM    : 1;            /*!< [19..19] ULPI Clock SuspendM                                              */
      __IOM uint32 ULPIEVBUSD : 1;            /*!< [20..20] ULPI External VBUS Drive                                         */
      __IOM uint32 ULPIEVBUSI : 1;            /*!< [21..21] ULPI external VBUS indicator                                     */
      __IOM uint32 TSDPS      : 1;            /*!< [22..22] TermSel DLine pulsing selection                                  */
      __IOM uint32 PCCI       : 1;            /*!< [23..23] Indicator complement                                             */
      __IOM uint32 PTCI       : 1;            /*!< [24..24] Indicator pass through                                           */
      __IOM uint32 ULPIIPD    : 1;            /*!< [25..25] ULPI interface protect disable                                   */
            uint32            : 3;
      __IOM uint32 FHMOD      : 1;            /*!< [29..29] Forced host mode                                                 */
      __IOM uint32 FDMOD      : 1;            /*!< [30..30] Forced peripheral mode                                           */
            uint32            : 1;
    } bit;
  } OTG_HS_GUSBCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) OTG_HS reset register                                      */
    
    struct {
      __IOM uint32 CSRST      : 1;            /*!< [0..0] Core soft reset                                                    */
      __IOM uint32 HSRST      : 1;            /*!< [1..1] HCLK soft reset                                                    */
      __IOM uint32 FCRST      : 1;            /*!< [2..2] Host frame counter reset                                           */
            uint32            : 1;
      __IOM uint32 RXFFLSH    : 1;            /*!< [4..4] RxFIFO flush                                                       */
      __IOM uint32 TXFFLSH    : 1;            /*!< [5..5] TxFIFO flush                                                       */
      __IOM uint32 TXFNUM     : 5;            /*!< [10..6] TxFIFO number                                                     */
            uint32            : 19;
      __IM  uint32 DMAREQ     : 1;            /*!< [30..30] DMA request signal enabled for USB OTG HS                        */
      __IM  uint32 AHBIDL     : 1;            /*!< [31..31] AHB master idle                                                  */
    } bit;
  } OTG_HS_GRSTCTL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) OTG_HS core interrupt register                             */
    
    struct {
      __IM  uint32 CMOD       : 1;            /*!< [0..0] Current mode of operation                                          */
      __IOM uint32 MMIS       : 1;            /*!< [1..1] Mode mismatch interrupt                                            */
      __IM  uint32 OTGINT     : 1;            /*!< [2..2] OTG interrupt                                                      */
      __IOM uint32 SOF        : 1;            /*!< [3..3] Start of frame                                                     */
      __IM  uint32 RXFLVL     : 1;            /*!< [4..4] RxFIFO nonempty                                                    */
      __IM  uint32 NPTXFE     : 1;            /*!< [5..5] Nonperiodic TxFIFO empty                                           */
      __IM  uint32 GINAKEFF   : 1;            /*!< [6..6] Global IN nonperiodic NAK effective                                */
      __IM  uint32 BOUTNAKEFF : 1;            /*!< [7..7] Global OUT NAK effective                                           */
            uint32            : 2;
      __IOM uint32 ESUSP      : 1;            /*!< [10..10] Early suspend                                                    */
      __IOM uint32 USBSUSP    : 1;            /*!< [11..11] USB suspend                                                      */
      __IOM uint32 USBRST     : 1;            /*!< [12..12] USB reset                                                        */
      __IOM uint32 ENUMDNE    : 1;            /*!< [13..13] Enumeration done                                                 */
      __IOM uint32 ISOODRP    : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt                         */
      __IOM uint32 EOPF       : 1;            /*!< [15..15] End of periodic frame interrupt                                  */
            uint32            : 2;
      __IM  uint32 IEPINT     : 1;            /*!< [18..18] IN endpoint interrupt                                            */
      __IM  uint32 OEPINT     : 1;            /*!< [19..19] OUT endpoint interrupt                                           */
      __IOM uint32 IISOIXFR   : 1;            /*!< [20..20] Incomplete isochronous IN transfer                               */
      __IOM uint32 PXFR_INCOMPISOOUT : 1;     /*!< [21..21] Incomplete periodic transfer                                     */
      __IOM uint32 DATAFSUSP  : 1;            /*!< [22..22] Data fetch suspended                                             */
            uint32            : 1;
      __IM  uint32 HPRTINT    : 1;            /*!< [24..24] Host port interrupt                                              */
      __IM  uint32 HCINT      : 1;            /*!< [25..25] Host channels interrupt                                          */
      __IM  uint32 PTXFE      : 1;            /*!< [26..26] Periodic TxFIFO empty                                            */
            uint32            : 1;
      __IOM uint32 CIDSCHG    : 1;            /*!< [28..28] Connector ID status change                                       */
      __IOM uint32 DISCINT    : 1;            /*!< [29..29] Disconnect detected interrupt                                    */
      __IOM uint32 SRQINT     : 1;            /*!< [30..30] Session request/new session detected interrupt                   */
      __IOM uint32 WKUINT     : 1;            /*!< [31..31] Resume/remote wakeup detected interrupt                          */
    } bit;
  } OTG_HS_GINTSTS;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) OTG_HS interrupt mask register                             */
    
    struct {
            uint32            : 1;
      __IOM uint32 MMISM      : 1;            /*!< [1..1] Mode mismatch interrupt mask                                       */
      __IOM uint32 OTGINT     : 1;            /*!< [2..2] OTG interrupt mask                                                 */
      __IOM uint32 SOFM       : 1;            /*!< [3..3] Start of frame mask                                                */
      __IOM uint32 RXFLVLM    : 1;            /*!< [4..4] Receive FIFO nonempty mask                                         */
      __IOM uint32 NPTXFEM    : 1;            /*!< [5..5] Nonperiodic TxFIFO empty mask                                      */
      __IOM uint32 GINAKEFFM  : 1;            /*!< [6..6] Global nonperiodic IN NAK effective mask                           */
      __IOM uint32 GONAKEFFM  : 1;            /*!< [7..7] Global OUT NAK effective mask                                      */
            uint32            : 2;
      __IOM uint32 ESUSPM     : 1;            /*!< [10..10] Early suspend mask                                               */
      __IOM uint32 USBSUSPM   : 1;            /*!< [11..11] USB suspend mask                                                 */
      __IOM uint32 USBRST     : 1;            /*!< [12..12] USB reset mask                                                   */
      __IOM uint32 ENUMDNEM   : 1;            /*!< [13..13] Enumeration done mask                                            */
      __IOM uint32 ISOODRPM   : 1;            /*!< [14..14] Isochronous OUT packet dropped interrupt mask                    */
      __IOM uint32 EOPFM      : 1;            /*!< [15..15] End of periodic frame interrupt mask                             */
            uint32            : 2;
      __IOM uint32 IEPINT     : 1;            /*!< [18..18] IN endpoints interrupt mask                                      */
      __IOM uint32 OEPINT     : 1;            /*!< [19..19] OUT endpoints interrupt mask                                     */
      __IOM uint32 IISOIXFRM  : 1;            /*!< [20..20] Incomplete isochronous IN transfer mask                          */
      __IOM uint32 PXFRM_IISOOXFRM : 1;       /*!< [21..21] Incomplete periodic transfer mask                                */
      __IOM uint32 FSUSPM     : 1;            /*!< [22..22] Data fetch suspended mask                                        */
      __IOM uint32 RSTDE      : 1;            /*!< [23..23] Reset detected interrupt mask                                    */
      __IM  uint32 PRTIM      : 1;            /*!< [24..24] Host port interrupt mask                                         */
      __IOM uint32 HCIM       : 1;            /*!< [25..25] Host channels interrupt mask                                     */
      __IOM uint32 PTXFEM     : 1;            /*!< [26..26] Periodic TxFIFO empty mask                                       */
      __IOM uint32 LPMINTM    : 1;            /*!< [27..27] LPM interrupt mask                                               */
      __IOM uint32 CIDSCHGM   : 1;            /*!< [28..28] Connector ID status change mask                                  */
      __IOM uint32 DISCINT    : 1;            /*!< [29..29] Disconnect detected interrupt mask                               */
      __IOM uint32 SRQIM      : 1;            /*!< [30..30] Session request/new session detected interrupt mask              */
      __IOM uint32 WUIM       : 1;            /*!< [31..31] Resume/remote wakeup detected interrupt mask                     */
    } bit;
  } OTG_HS_GINTMSK;
  
  union {
    union {
      __IM  uint32 reg;                       /*!< (@ 0x0000001C) OTG_HS Receive status debug read register (host
                                                                    mode)                                                      */
      
      struct {
        __IM  uint32 CHNUM    : 4;            /*!< [3..0] Channel number                                                     */
        __IM  uint32 BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32 DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32 PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
              uint32          : 11;
      } bit;
    } OTG_HS_GRXSTSR_Host;
    
    union {
      __IM  uint32 reg;                       /*!< (@ 0x0000001C) OTG_HS Receive status debug read register (peripheral
                                                                    mode mode)                                                 */
      
      struct {
        __IM  uint32 EPNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32 BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32 DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32 PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
        __IM  uint32 FRMNUM   : 4;            /*!< [24..21] Frame number                                                     */
              uint32          : 7;
      } bit;
    } OTG_HS_GRXSTSR_Device;
  };
  
  union {
    union {
      __IM  uint32 reg;                       /*!< (@ 0x00000020) OTG_HS status read and pop register (host mode)            */
      
      struct {
        __IM  uint32 CHNUM    : 4;            /*!< [3..0] Channel number                                                     */
        __IM  uint32 BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32 DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32 PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
              uint32          : 11;
      } bit;
    } OTG_HS_GRXSTSP_Host;
    
    union {
      __IM  uint32 reg;                       /*!< (@ 0x00000020) OTG_HS status read and pop register (peripheral
                                                                    mode)                                                      */
      
      struct {
        __IM  uint32 EPNUM    : 4;            /*!< [3..0] Endpoint number                                                    */
        __IM  uint32 BCNT     : 11;           /*!< [14..4] Byte count                                                        */
        __IM  uint32 DPID     : 2;            /*!< [16..15] Data PID                                                         */
        __IM  uint32 PKTSTS   : 4;            /*!< [20..17] Packet status                                                    */
        __IM  uint32 FRMNUM   : 4;            /*!< [24..21] Frame number                                                     */
              uint32          : 7;
      } bit;
    } OTG_HS_GRXSTSP_Device;
  };
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) OTG_HS Receive FIFO size register                          */
    
    struct {
      __IOM uint32 RXFD       : 16;           /*!< [15..0] RxFIFO depth                                                      */
            uint32            : 16;
    } bit;
  } OTG_HS_GRXFSIZ;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000028) OTG_HS nonperiodic transmit FIFO size register
                                                                    (host mode)                                                */
      
      struct {
        __IOM uint32 NPTXFSA  : 16;           /*!< [15..0] Nonperiodic transmit RAM start address                            */
        __IOM uint32 NPTXFD   : 16;           /*!< [31..16] Nonperiodic TxFIFO depth                                         */
      } bit;
    } OTG_HS_HNPTXFSIZ_Host;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x00000028) Endpoint 0 transmit FIFO size (peripheral mode)            */
      
      struct {
        __IOM uint32 TX0FSA   : 16;           /*!< [15..0] Endpoint 0 transmit RAM start address                             */
        __IOM uint32 TX0FD    : 16;           /*!< [31..16] Endpoint 0 TxFIFO depth                                          */
      } bit;
    } OTG_HS_DIEPTXF0_Device;
  };
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x0000002C) OTG_HS nonperiodic transmit FIFO/queue status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 NPTXFSAV   : 16;           /*!< [15..0] Nonperiodic TxFIFO space available                                */
      __IM  uint32 NPTQXSAV   : 8;            /*!< [23..16] Nonperiodic transmit request queue space available               */
      __IM  uint32 NPTXQTOP   : 7;            /*!< [30..24] Top of the nonperiodic transmit request queue                    */
            uint32            : 1;
    } bit;
  } OTG_HS_GNPTXSTS;
  __IM  uint32  RESERVED[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) OTG_HS general core configuration register                 */
    
    struct {
      __IOM uint32 DCDET      : 1;            /*!< [0..0] Data contact detection (DCD) status                                */
      __IOM uint32 PDET       : 1;            /*!< [1..1] Primary detection (PD) status                                      */
      __IOM uint32 SDET       : 1;            /*!< [2..2] Secondary detection (SD) status                                    */
      __IOM uint32 PS2DET     : 1;            /*!< [3..3] DM pull-up detection status                                        */
            uint32            : 12;
      __IOM uint32 PWRDWN     : 1;            /*!< [16..16] Power down                                                       */
      __IOM uint32 BCDEN      : 1;            /*!< [17..17] Battery charging detector (BCD) enable                           */
      __IOM uint32 DCDEN      : 1;            /*!< [18..18] Data contact detection (DCD) mode enable                         */
      __IOM uint32 PDEN       : 1;            /*!< [19..19] Primary detection (PD) mode enable                               */
      __IOM uint32 SDEN       : 1;            /*!< [20..20] Secondary detection (SD) mode enable                             */
      __IOM uint32 VBDEN      : 1;            /*!< [21..21] USB VBUS detection enable                                        */
            uint32            : 10;
    } bit;
  } OTG_HS_GCCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) OTG_HS core ID register                                    */
    
    struct {
      __IOM uint32 PRODUCT_ID : 32;           /*!< [31..0] Product ID field                                                  */
    } bit;
  } OTG_HS_CID;
  __IM  uint32  RESERVED1[5];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000054) OTG core LPM configuration register                        */
    
    struct {
      __IOM uint32 LPMEN      : 1;            /*!< [0..0] LPM support enable                                                 */
      __IOM uint32 LPMACK     : 1;            /*!< [1..1] LPM token acknowledge enable                                       */
      __IM  uint32 BESL       : 4;            /*!< [5..2] Best effort service latency                                        */
      __IM  uint32 REMWAKE    : 1;            /*!< [6..6] bRemoteWake value                                                  */
      __IOM uint32 L1SSEN     : 1;            /*!< [7..7] L1 Shallow Sleep enable                                            */
      __IOM uint32 BESLTHRS   : 4;            /*!< [11..8] BESL threshold                                                    */
      __IOM uint32 L1DSEN     : 1;            /*!< [12..12] L1 deep sleep enable                                             */
      __IM  uint32 LPMRST     : 2;            /*!< [14..13] LPM response                                                     */
      __IM  uint32 SLPSTS     : 1;            /*!< [15..15] Port sleep status                                                */
      __IM  uint32 L1RSMOK    : 1;            /*!< [16..16] Sleep State Resume OK                                            */
      __IOM uint32 LPMCHIDX   : 4;            /*!< [20..17] LPM Channel Index                                                */
      __IOM uint32 LPMRCNT    : 3;            /*!< [23..21] LPM retry count                                                  */
      __IOM uint32 SNDLPM     : 1;            /*!< [24..24] Send LPM transaction                                             */
      __IM  uint32 LPMRCNTSTS : 3;            /*!< [27..25] LPM retry count status                                           */
      __IOM uint32 ENBESL     : 1;            /*!< [28..28] Enable best effort service latency                               */
            uint32            : 3;
    } bit;
  } OTG_HS_GLPMCFG;
  __IM  uint32  RESERVED2[42];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000100) OTG_HS Host periodic transmit FIFO size register           */
    
    struct {
      __IOM uint32 PTXSA      : 16;           /*!< [15..0] Host periodic TxFIFO start address                                */
      __IOM uint32 PTXFD      : 16;           /*!< [31..16] Host periodic TxFIFO depth                                       */
    } bit;
  } OTG_HS_HPTXFSIZ;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000104) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_HS_DIEPTXF1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_HS_DIEPTXF2;
  __IM  uint32  RESERVED3[4];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000011C) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_HS_DIEPTXF3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000120) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_HS_DIEPTXF4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000124) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_HS_DIEPTXF5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000128) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_HS_DIEPTXF6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000012C) OTG_HS device IN endpoint transmit FIFO size
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTXSA   : 16;           /*!< [15..0] IN endpoint FIFOx transmit RAM start address                      */
      __IOM uint32 INEPTXFD   : 16;           /*!< [31..16] IN endpoint TxFIFO depth                                         */
    } bit;
  } OTG_HS_DIEPTXF7;
} OTG_HS_GLOBAL_Type;                           /*!< Size = 304 (0x130)                                                        */



/* =========================================================================================================================== */
/* ================                                        OTG_HS_HOST                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (OTG_HS_HOST)
  */

typedef struct {                                /*!< (@ 0x40040400) OTG_HS_HOST Structure                                      */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) OTG_HS host configuration register                         */
    
    struct {
      __IOM uint32 FSLSPCS    : 2;            /*!< [1..0] FS/LS PHY clock select                                             */
      __IM  uint32 FSLSS      : 1;            /*!< [2..2] FS- and LS-only support                                            */
            uint32            : 29;
    } bit;
  } OTG_HS_HCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) OTG_HS Host frame interval register                        */
    
    struct {
      __IOM uint32 FRIVL      : 16;           /*!< [15..0] Frame interval                                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_HFIR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) OTG_HS host frame number/frame time remaining
                                                                    register                                                   */
    
    struct {
      __IM  uint32 FRNUM      : 16;           /*!< [15..0] Frame number                                                      */
      __IM  uint32 FTREM      : 16;           /*!< [31..16] Frame time remaining                                             */
    } bit;
  } OTG_HS_HFNUM;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) OTG_HS_Host periodic transmit FIFO/queue status
                                                                    register                                                   */
    
    struct {
      __IOM uint32 PTXFSAVL   : 16;           /*!< [15..0] Periodic transmit data FIFO space available                       */
      __IM  uint32 PTXQSAV    : 8;            /*!< [23..16] Periodic transmit request queue space available                  */
      __IM  uint32 PTXQTOP    : 8;            /*!< [31..24] Top of the periodic transmit request queue                       */
    } bit;
  } OTG_HS_HPTXSTS;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000014) OTG_HS Host all channels interrupt register                */
    
    struct {
      __IM  uint32 HAINT      : 16;           /*!< [15..0] Channel interrupts                                                */
            uint32            : 16;
    } bit;
  } OTG_HS_HAINT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) OTG_HS host all channels interrupt mask register           */
    
    struct {
      __IOM uint32 HAINTM     : 16;           /*!< [15..0] Channel interrupt mask                                            */
            uint32            : 16;
    } bit;
  } OTG_HS_HAINTMSK;
  __IM  uint32  RESERVED1[9];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000040) OTG_HS host port control and status register               */
    
    struct {
      __IM  uint32 PCSTS      : 1;            /*!< [0..0] Port connect status                                                */
      __IOM uint32 PCDET      : 1;            /*!< [1..1] Port connect detected                                              */
      __IOM uint32 PENA       : 1;            /*!< [2..2] Port enable                                                        */
      __IOM uint32 PENCHNG    : 1;            /*!< [3..3] Port enable/disable change                                         */
      __IM  uint32 POCA       : 1;            /*!< [4..4] Port overcurrent active                                            */
      __IOM uint32 POCCHNG    : 1;            /*!< [5..5] Port overcurrent change                                            */
      __IOM uint32 PRES       : 1;            /*!< [6..6] Port resume                                                        */
      __IOM uint32 PSUSP      : 1;            /*!< [7..7] Port suspend                                                       */
      __IOM uint32 PRST       : 1;            /*!< [8..8] Port reset                                                         */
            uint32            : 1;
      __IM  uint32 PLSTS      : 2;            /*!< [11..10] Port line status                                                 */
      __IOM uint32 PPWR       : 1;            /*!< [12..12] Port power                                                       */
      __IOM uint32 PTCTL      : 4;            /*!< [16..13] Port test control                                                */
      __IM  uint32 PSPD       : 2;            /*!< [18..17] Port speed                                                       */
            uint32            : 13;
    } bit;
  } OTG_HS_HPRT;
  __IM  uint32  RESERVED2[47];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000100) OTG_HS host channel-0 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000104) OTG_HS host channel-0 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) OTG_HS host channel-11 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000010C) OTG_HS host channel-11 interrupt mask register             */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000110) OTG_HS host channel-11 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000114) OTG_HS host channel-0 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA0;
  __IM  uint32  RESERVED3[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000120) OTG_HS host channel-1 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000124) OTG_HS host channel-1 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000128) OTG_HS host channel-1 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000012C) OTG_HS host channel-1 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000130) OTG_HS host channel-1 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000134) OTG_HS host channel-1 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA1;
  __IM  uint32  RESERVED4[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000140) OTG_HS host channel-2 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000144) OTG_HS host channel-2 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000148) OTG_HS host channel-2 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000014C) OTG_HS host channel-2 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000150) OTG_HS host channel-2 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000154) OTG_HS host channel-2 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA2;
  __IM  uint32  RESERVED5[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000160) OTG_HS host channel-3 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000164) OTG_HS host channel-3 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000168) OTG_HS host channel-3 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000016C) OTG_HS host channel-3 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000170) OTG_HS host channel-3 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000174) OTG_HS host channel-3 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA3;
  __IM  uint32  RESERVED6[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000180) OTG_HS host channel-4 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000184) OTG_HS host channel-4 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000188) OTG_HS host channel-4 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000018C) OTG_HS host channel-4 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000190) OTG_HS host channel-4 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000194) OTG_HS host channel-4 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA4;
  __IM  uint32  RESERVED7[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A0) OTG_HS host channel-5 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A4) OTG_HS host channel-5 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A8) OTG_HS host channel-5 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001AC) OTG_HS host channel-5 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B0) OTG_HS host channel-5 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B4) OTG_HS host channel-5 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA5;
  __IM  uint32  RESERVED8[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C0) OTG_HS host channel-6 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C4) OTG_HS host channel-6 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C8) OTG_HS host channel-6 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001CC) OTG_HS host channel-6 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001D0) OTG_HS host channel-6 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001D4) OTG_HS host channel-6 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA6;
  __IM  uint32  RESERVED9[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001E0) OTG_HS host channel-7 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001E4) OTG_HS host channel-7 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001E8) OTG_HS host channel-7 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001EC) OTG_HS host channel-7 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001F0) OTG_HS host channel-7 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001F4) OTG_HS host channel-7 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA7;
  __IM  uint32  RESERVED10[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000200) OTG_HS host channel-8 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000204) OTG_HS host channel-8 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000208) OTG_HS host channel-8 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000020C) OTG_HS host channel-8 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000210) OTG_HS host channel-8 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000214) OTG_HS host channel-8 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA8;
  __IM  uint32  RESERVED11[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000220) OTG_HS host channel-9 characteristics register             */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000224) OTG_HS host channel-9 split control register               */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000228) OTG_HS host channel-9 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000022C) OTG_HS host channel-9 interrupt mask register              */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000230) OTG_HS host channel-9 transfer size register               */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000234) OTG_HS host channel-9 DMA address register                 */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA9;
  __IM  uint32  RESERVED12[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000240) OTG_HS host channel-10 characteristics register            */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000244) OTG_HS host channel-10 split control register              */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000248) OTG_HS host channel-10 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000024C) OTG_HS host channel-10 interrupt mask register             */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000250) OTG_HS host channel-10 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000254) OTG_HS host channel-10 DMA address register                */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA10;
  __IM  uint32  RESERVED13[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000260) OTG_HS host channel-11 characteristics register            */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000264) OTG_HS host channel-11 split control register              */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000268) OTG_HS host channel-11 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000026C) OTG_HS host channel-11 interrupt mask register             */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] response received interrupt mask                                   */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error mask                                             */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error mask                                                  */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000270) OTG_HS host channel-11 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000274) OTG_HS host channel-11 DMA address register                */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000278) OTG_HS host channel-12 characteristics register            */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000027C) OTG_HS host channel-12 split control register              */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000280) OTG_HS host channel-12 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000284) OTG_HS host channel-12 interrupt mask register             */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000288) OTG_HS host channel-12 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000028C) OTG_HS host channel-12 DMA address register                */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000290) OTG_HS host channel-13 characteristics register            */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000294) OTG_HS host channel-13 split control register              */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000298) OTG_HS host channel-13 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000029C) OTG_HS host channel-13 interrupt mask register             */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALLM response received interrupt mask                            */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002A0) OTG_HS host channel-13 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002A4) OTG_HS host channel-13 DMA address register                */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002A8) OTG_HS host channel-14 characteristics register            */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002AC) OTG_HS host channel-14 split control register              */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002B0) OTG_HS host channel-14 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002B4) OTG_HS host channel-14 interrupt mask register             */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALLM     : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAKM response received interrupt mask                              */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACKM response received/transmitted interrupt mask                  */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002B8) OTG_HS host channel-14 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002BC) OTG_HS host channel-14 DMA address register                */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002C0) OTG_HS host channel-15 characteristics register            */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
      __IOM uint32 EPNUM      : 4;            /*!< [14..11] Endpoint number                                                  */
      __IOM uint32 EPDIR      : 1;            /*!< [15..15] Endpoint direction                                               */
            uint32            : 1;
      __IOM uint32 LSDEV      : 1;            /*!< [17..17] Low-speed device                                                 */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 MC         : 2;            /*!< [21..20] Multi Count (MC) / Error Count (EC)                              */
      __IOM uint32 DAD        : 7;            /*!< [28..22] Device address                                                   */
      __IOM uint32 ODDFRM     : 1;            /*!< [29..29] Odd frame                                                        */
      __IOM uint32 CHDIS      : 1;            /*!< [30..30] Channel disable                                                  */
      __IOM uint32 CHENA      : 1;            /*!< [31..31] Channel enable                                                   */
    } bit;
  } OTG_HS_HCCHAR15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002C4) OTG_HS host channel-15 split control register              */
    
    struct {
      __IOM uint32 PRTADDR    : 7;            /*!< [6..0] Port address                                                       */
      __IOM uint32 HUBADDR    : 7;            /*!< [13..7] Hub address                                                       */
      __IOM uint32 XACTPOS    : 2;            /*!< [15..14] XACTPOS                                                          */
      __IOM uint32 COMPLSPLT  : 1;            /*!< [16..16] Do complete split                                                */
            uint32            : 14;
      __IOM uint32 SPLITEN    : 1;            /*!< [31..31] Split enable                                                     */
    } bit;
  } OTG_HS_HCSPLT15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002C8) OTG_HS host channel-15 interrupt register                  */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed                                                 */
      __IOM uint32 CHH        : 1;            /*!< [1..1] Channel halted                                                     */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt                                  */
      __IOM uint32 NAK        : 1;            /*!< [4..4] NAK response received interrupt                                    */
      __IOM uint32 ACK        : 1;            /*!< [5..5] ACK response received/transmitted interrupt                        */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERR      : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERR      : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMOR      : 1;            /*!< [9..9] Frame overrun                                                      */
      __IOM uint32 DTERR      : 1;            /*!< [10..10] Data toggle error                                                */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINT15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002CC) OTG_HS host channel-15 interrupt mask register             */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed mask                                            */
      __IOM uint32 CHHM       : 1;            /*!< [1..1] Channel halted mask                                                */
      __IOM uint32 AHBERR     : 1;            /*!< [2..2] AHB error                                                          */
      __IOM uint32 STALL      : 1;            /*!< [3..3] STALL response received interrupt mask                             */
      __IOM uint32 NAKM       : 1;            /*!< [4..4] NAK response received interrupt mask                               */
      __IOM uint32 ACKM       : 1;            /*!< [5..5] ACK response received/transmitted interrupt mask                   */
      __IOM uint32 NYET       : 1;            /*!< [6..6] Response received interrupt                                        */
      __IOM uint32 TXERRM     : 1;            /*!< [7..7] Transaction error                                                  */
      __IOM uint32 BBERRM     : 1;            /*!< [8..8] Babble error                                                       */
      __IOM uint32 FRMORM     : 1;            /*!< [9..9] Frame overrun mask                                                 */
      __IOM uint32 DTERRM     : 1;            /*!< [10..10] Data toggle error mask                                           */
            uint32            : 21;
    } bit;
  } OTG_HS_HCINTMSK15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002D0) OTG_HS host channel-15 transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 DPID       : 2;            /*!< [30..29] Data PID                                                         */
            uint32            : 1;
    } bit;
  } OTG_HS_HCTSIZ15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000002D4) OTG_HS host channel-15 DMA address register                */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_HCDMA15;
} OTG_HS_HOST_Type;                             /*!< Size = 728 (0x2d8)                                                        */



/* =========================================================================================================================== */
/* ================                                       OTG_HS_DEVICE                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (OTG_HS_DEVICE)
  */

typedef struct {                                /*!< (@ 0x40040800) OTG_HS_DEVICE Structure                                    */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) OTG_HS device configuration register                       */
    
    struct {
      __IOM uint32 DSPD       : 2;            /*!< [1..0] Device speed                                                       */
      __IOM uint32 NZLSOHSK   : 1;            /*!< [2..2] Nonzero-length status OUT handshake                                */
            uint32            : 1;
      __IOM uint32 DAD        : 7;            /*!< [10..4] Device address                                                    */
      __IOM uint32 PFIVL      : 2;            /*!< [12..11] Periodic (micro)frame interval                                   */
            uint32            : 11;
      __IOM uint32 PERSCHIVL  : 2;            /*!< [25..24] Periodic scheduling interval                                     */
            uint32            : 6;
    } bit;
  } OTG_HS_DCFG;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) OTG_HS device control register                             */
    
    struct {
      __IOM uint32 RWUSIG     : 1;            /*!< [0..0] Remote wakeup signaling                                            */
      __IOM uint32 SDIS       : 1;            /*!< [1..1] Soft disconnect                                                    */
      __IM  uint32 GINSTS     : 1;            /*!< [2..2] Global IN NAK status                                               */
      __IM  uint32 GONSTS     : 1;            /*!< [3..3] Global OUT NAK status                                              */
      __IOM uint32 TCTL       : 3;            /*!< [6..4] Test control                                                       */
      __OM  uint32 SGINAK     : 1;            /*!< [7..7] Set global IN NAK                                                  */
      __OM  uint32 CGINAK     : 1;            /*!< [8..8] Clear global IN NAK                                                */
      __OM  uint32 SGONAK     : 1;            /*!< [9..9] Set global OUT NAK                                                 */
      __OM  uint32 CGONAK     : 1;            /*!< [10..10] Clear global OUT NAK                                             */
      __IOM uint32 POPRGDNE   : 1;            /*!< [11..11] Power-on programming done                                        */
            uint32            : 20;
    } bit;
  } OTG_HS_DCTL;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) OTG_HS device status register                              */
    
    struct {
      __IM  uint32 SUSPSTS    : 1;            /*!< [0..0] Suspend status                                                     */
      __IM  uint32 ENUMSPD    : 2;            /*!< [2..1] Enumerated speed                                                   */
      __IM  uint32 EERR       : 1;            /*!< [3..3] Erratic error                                                      */
            uint32            : 4;
      __IM  uint32 FNSOF      : 14;           /*!< [21..8] Frame number of the received SOF                                  */
            uint32            : 10;
    } bit;
  } OTG_HS_DSTS;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) OTG_HS device IN endpoint common interrupt mask
                                                                    register                                                   */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32 EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32            : 1;
      __IOM uint32 TOM        : 1;            /*!< [3..3] Timeout condition mask (nonisochronous endpoints)                  */
      __IOM uint32 ITTXFEMSK  : 1;            /*!< [4..4] IN token received when TxFIFO empty mask                           */
      __IOM uint32 INEPNMM    : 1;            /*!< [5..5] IN token received with EP mismatch mask                            */
      __IOM uint32 INEPNEM    : 1;            /*!< [6..6] IN endpoint NAK effective mask                                     */
            uint32            : 1;
      __IOM uint32 TXFURM     : 1;            /*!< [8..8] FIFO underrun mask                                                 */
      __IOM uint32 BIM        : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32            : 22;
    } bit;
  } OTG_HS_DIEPMSK;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) OTG_HS device OUT endpoint common interrupt mask
                                                                    register                                                   */
    
    struct {
      __IOM uint32 XFRCM      : 1;            /*!< [0..0] Transfer completed interrupt mask                                  */
      __IOM uint32 EPDM       : 1;            /*!< [1..1] Endpoint disabled interrupt mask                                   */
            uint32            : 1;
      __IOM uint32 STUPM      : 1;            /*!< [3..3] SETUP phase done mask                                              */
      __IOM uint32 OTEPDM     : 1;            /*!< [4..4] OUT token received when endpoint disabled mask                     */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received mask                           */
            uint32            : 1;
      __IOM uint32 OPEM       : 1;            /*!< [8..8] OUT packet error mask                                              */
      __IOM uint32 BOIM       : 1;            /*!< [9..9] BNA interrupt mask                                                 */
            uint32            : 22;
    } bit;
  } OTG_HS_DOEPMSK;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000018) OTG_HS device all endpoints interrupt register             */
    
    struct {
      __IM  uint32 IEPINT     : 16;           /*!< [15..0] IN endpoint interrupt bits                                        */
      __IM  uint32 OEPINT     : 16;           /*!< [31..16] OUT endpoint interrupt bits                                      */
    } bit;
  } OTG_HS_DAINT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) OTG_HS all endpoints interrupt mask register               */
    
    struct {
      __IOM uint32 IEPM       : 16;           /*!< [15..0] IN EP interrupt mask bits                                         */
      __IOM uint32 OEPM       : 16;           /*!< [31..16] OUT EP interrupt mask bits                                       */
    } bit;
  } OTG_HS_DAINTMSK;
  __IM  uint32  RESERVED1[2];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) OTG_HS device VBUS discharge time register                 */
    
    struct {
      __IOM uint32 VBUSDT     : 16;           /*!< [15..0] Device VBUS discharge time                                        */
            uint32            : 16;
    } bit;
  } OTG_HS_DVBUSDIS;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) OTG_HS device VBUS pulsing time register                   */
    
    struct {
      __IOM uint32 DVBUSP     : 12;           /*!< [11..0] Device VBUS pulsing time                                          */
            uint32            : 20;
    } bit;
  } OTG_HS_DVBUSPULSE;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000030) OTG_HS Device threshold control register                   */
    
    struct {
      __IOM uint32 NONISOTHREN : 1;           /*!< [0..0] Nonisochronous IN endpoints threshold enable                       */
      __IOM uint32 ISOTHREN   : 1;            /*!< [1..1] ISO IN endpoint threshold enable                                   */
      __IOM uint32 TXTHRLEN   : 9;            /*!< [10..2] Transmit threshold length                                         */
            uint32            : 5;
      __IOM uint32 RXTHREN    : 1;            /*!< [16..16] Receive threshold enable                                         */
      __IOM uint32 RXTHRLEN   : 9;            /*!< [25..17] Receive threshold length                                         */
            uint32            : 1;
      __IOM uint32 ARPEN      : 1;            /*!< [27..27] Arbiter parking enable                                           */
            uint32            : 4;
    } bit;
  } OTG_HS_DTHRCTL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) OTG_HS device IN endpoint FIFO empty interrupt
                                                                    mask register                                              */
    
    struct {
      __IOM uint32 INEPTXFEM  : 16;           /*!< [15..0] IN EP Tx FIFO empty interrupt mask bits                           */
            uint32            : 16;
    } bit;
  } OTG_HS_DIEPEMPMSK;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) OTG_HS device each endpoint interrupt register             */
    
    struct {
            uint32            : 1;
      __IOM uint32 IEP1INT    : 1;            /*!< [1..1] IN endpoint 1interrupt bit                                         */
            uint32            : 15;
      __IOM uint32 OEP1INT    : 1;            /*!< [17..17] OUT endpoint 1 interrupt bit                                     */
            uint32            : 14;
    } bit;
  } OTG_HS_DEACHINT;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000003C) OTG_HS device each endpoint interrupt register
                                                                    mask                                                       */
    
    struct {
            uint32            : 1;
      __IOM uint32 IEP1INTM   : 1;            /*!< [1..1] IN Endpoint 1 interrupt mask bit                                   */
            uint32            : 15;
      __IOM uint32 OEP1INTM   : 1;            /*!< [17..17] OUT Endpoint 1 interrupt mask bit                                */
            uint32            : 14;
    } bit;
  } OTG_HS_DEACHINTMSK;
  __IM  uint32  RESERVED2[48];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000100) OTG device endpoint-0 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DIEPCTL0;
  __IM  uint32  RESERVED3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) OTG device endpoint-0 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32 TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32 BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32            : 1;
      __IOM uint32 PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32 BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32 NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32            : 18;
    } bit;
  } OTG_HS_DIEPINT0;
  __IM  uint32  RESERVED4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000110) OTG_HS device IN endpoint 0 transfer size register         */
    
    struct {
      __IOM uint32 XFRSIZ     : 7;            /*!< [6..0] Transfer size                                                      */
            uint32            : 12;
      __IOM uint32 PKTCNT     : 2;            /*!< [20..19] Packet count                                                     */
            uint32            : 11;
    } bit;
  } OTG_HS_DIEPTSIZ0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000114) OTG_HS device endpoint-1 DMA address register              */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_DIEPDMA1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000118) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_DTXFSTS0;
  __IM  uint32  RESERVED5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000120) OTG device endpoint-1 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DIEPCTL1;
  __IM  uint32  RESERVED6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000128) OTG device endpoint-1 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32 TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32 BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32            : 1;
      __IOM uint32 PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32 BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32 NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32            : 18;
    } bit;
  } OTG_HS_DIEPINT1;
  __IM  uint32  RESERVED7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000130) OTG_HS device endpoint transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_HS_DIEPTSIZ1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000134) OTG_HS device endpoint-2 DMA address register              */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_DIEPDMA2;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000138) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_DTXFSTS1;
  __IM  uint32  RESERVED8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000140) OTG device endpoint-2 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DIEPCTL2;
  __IM  uint32  RESERVED9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000148) OTG device endpoint-2 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32 TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32 BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32            : 1;
      __IOM uint32 PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32 BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32 NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32            : 18;
    } bit;
  } OTG_HS_DIEPINT2;
  __IM  uint32  RESERVED10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000150) OTG_HS device endpoint transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_HS_DIEPTSIZ2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000154) OTG_HS device endpoint-3 DMA address register              */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_DIEPDMA3;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000158) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_DTXFSTS2;
  __IM  uint32  RESERVED11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000160) OTG device endpoint-3 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DIEPCTL3;
  __IM  uint32  RESERVED12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000168) OTG device endpoint-3 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32 TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32 BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32            : 1;
      __IOM uint32 PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32 BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32 NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32            : 18;
    } bit;
  } OTG_HS_DIEPINT3;
  __IM  uint32  RESERVED13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000170) OTG_HS device endpoint transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_HS_DIEPTSIZ3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000174) OTG_HS device endpoint-4 DMA address register              */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_DIEPDMA4;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000178) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_DTXFSTS3;
  __IM  uint32  RESERVED14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000180) OTG device endpoint-4 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DIEPCTL4;
  __IM  uint32  RESERVED15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000188) OTG device endpoint-4 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32 TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32 BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32            : 1;
      __IOM uint32 PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32 BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32 NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32            : 18;
    } bit;
  } OTG_HS_DIEPINT4;
  __IM  uint32  RESERVED16;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000190) OTG_HS device endpoint transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_HS_DIEPTSIZ4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000194) OTG_HS device endpoint-5 DMA address register              */
    
    struct {
      __IOM uint32 DMAADDR    : 32;           /*!< [31..0] DMA address                                                       */
    } bit;
  } OTG_HS_DIEPDMA5;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000198) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_DTXFSTS4;
  __IM  uint32  RESERVED17;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x000001A0) OTG device endpoint-5 control register                     */
      
      struct {
        __IOM uint32 MPSIZ    : 11;           /*!< [10..0] Maximum packet size                                               */
              uint32          : 4;
        __IOM uint32 USBAEP   : 1;            /*!< [15..15] USB active endpoint                                              */
        __IM  uint32 EONUM_DPID : 1;          /*!< [16..16] Even/odd frame                                                   */
        __IM  uint32 NAKSTS   : 1;            /*!< [17..17] NAK status                                                       */
        __IOM uint32 EPTYP    : 2;            /*!< [19..18] Endpoint type                                                    */
              uint32          : 1;
        __IOM uint32 Stall    : 1;            /*!< [21..21] STALL handshake                                                  */
        __IOM uint32 TXFNUM   : 4;            /*!< [25..22] TxFIFO number                                                    */
        __OM  uint32 CNAK     : 1;            /*!< [26..26] Clear NAK                                                        */
        __OM  uint32 SNAK     : 1;            /*!< [27..27] Set NAK                                                          */
        __OM  uint32 SD0PID_SEVNFRM : 1;      /*!< [28..28] Set DATA0 PID                                                    */
        __OM  uint32 SODDFRM  : 1;            /*!< [29..29] Set odd frame                                                    */
        __IOM uint32 EPDIS    : 1;            /*!< [30..30] Endpoint disable                                                 */
        __IOM uint32 EPENA    : 1;            /*!< [31..31] Endpoint enable                                                  */
      } bit;
    } OTG_HS_DIEPCTL5;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x000001A0) OTG_HS device endpoint transfer size register              */
      
      struct {
        __IOM uint32 XFRSIZ   : 19;           /*!< [18..0] Transfer size                                                     */
        __IOM uint32 PKTCNT   : 10;           /*!< [28..19] Packet count                                                     */
        __IOM uint32 MCNT     : 2;            /*!< [30..29] Multi count                                                      */
              uint32          : 1;
      } bit;
    } OTG_HS_DIEPTSIZ6;
  };
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001A4) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_DTXFSTS6;
  
  union {
    union {
      __IOM uint32 reg;                       /*!< (@ 0x000001A8) OTG device endpoint-5 interrupt register                   */
      
      struct {
        __IOM uint32 XFRC     : 1;            /*!< [0..0] Transfer completed interrupt                                       */
        __IOM uint32 EPDISD   : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
              uint32          : 1;
        __IOM uint32 TOC      : 1;            /*!< [3..3] Timeout condition                                                  */
        __IOM uint32 ITTXFE   : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
              uint32          : 1;
        __IOM uint32 INEPNE   : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
        __IM  uint32 TXFE     : 1;            /*!< [7..7] Transmit FIFO empty                                                */
        __IOM uint32 TXFIFOUDRN : 1;          /*!< [8..8] Transmit Fifo Underrun                                             */
        __IOM uint32 BNA      : 1;            /*!< [9..9] Buffer not available interrupt                                     */
              uint32          : 1;
        __IOM uint32 PKTDRPSTS : 1;           /*!< [11..11] Packet dropped status                                            */
        __IOM uint32 BERR     : 1;            /*!< [12..12] Babble error interrupt                                           */
        __IOM uint32 NAK      : 1;            /*!< [13..13] NAK interrupt                                                    */
              uint32          : 18;
      } bit;
    } OTG_HS_DIEPINT5;
    
    union {
      __IOM uint32 reg;                       /*!< (@ 0x000001A8) OTG_HS device endpoint transfer size register              */
      
      struct {
        __IOM uint32 XFRSIZ   : 19;           /*!< [18..0] Transfer size                                                     */
        __IOM uint32 PKTCNT   : 10;           /*!< [28..19] Packet count                                                     */
        __IOM uint32 MCNT     : 2;            /*!< [30..29] Multi count                                                      */
              uint32          : 1;
      } bit;
    } OTG_HS_DIEPTSIZ7;
  };
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001AC) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IOM uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_DTXFSTS7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001B0) OTG_HS device endpoint transfer size register              */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 MCNT       : 2;            /*!< [30..29] Multi count                                                      */
            uint32            : 1;
    } bit;
  } OTG_HS_DIEPTSIZ5;
  __IM  uint32  RESERVED18;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x000001B8) OTG_HS device IN endpoint transmit FIFO status
                                                                    register                                                   */
    
    struct {
      __IM  uint32 INEPTFSAV  : 16;           /*!< [15..0] IN endpoint TxFIFO space avail                                    */
            uint32            : 16;
    } bit;
  } OTG_HS_DTXFSTS5;
  __IM  uint32  RESERVED19;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C0) OTG device endpoint-6 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DIEPCTL6;
  __IM  uint32  RESERVED20;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001C8) OTG device endpoint-6 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32 TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32 BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32            : 1;
      __IOM uint32 PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32 BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32 NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32            : 18;
    } bit;
  } OTG_HS_DIEPINT6;
  __IM  uint32  RESERVED21[5];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001E0) OTG device endpoint-7 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even/odd frame                                                   */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
            uint32            : 1;
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
      __IOM uint32 TXFNUM     : 4;            /*!< [25..22] TxFIFO number                                                    */
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID                                                    */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DIEPCTL7;
  __IM  uint32  RESERVED22;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000001E8) OTG device endpoint-7 interrupt register                   */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 TOC        : 1;            /*!< [3..3] Timeout condition                                                  */
      __IOM uint32 ITTXFE     : 1;            /*!< [4..4] IN token received when TxFIFO is empty                             */
            uint32            : 1;
      __IOM uint32 INEPNE     : 1;            /*!< [6..6] IN endpoint NAK effective                                          */
      __IM  uint32 TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IOM uint32 TXFIFOUDRN : 1;            /*!< [8..8] Transmit Fifo Underrun                                             */
      __IOM uint32 BNA        : 1;            /*!< [9..9] Buffer not available interrupt                                     */
            uint32            : 1;
      __IOM uint32 PKTDRPSTS  : 1;            /*!< [11..11] Packet dropped status                                            */
      __IOM uint32 BERR       : 1;            /*!< [12..12] Babble error interrupt                                           */
      __IOM uint32 NAK        : 1;            /*!< [13..13] NAK interrupt                                                    */
            uint32            : 18;
    } bit;
  } OTG_HS_DIEPINT7;
  __IM  uint32  RESERVED23[69];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000300) OTG_HS device control OUT endpoint 0 control
                                                                    register                                                   */
    
    struct {
      __IM  uint32 MPSIZ      : 2;            /*!< [1..0] Maximum packet size                                                */
            uint32            : 13;
      __IM  uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
            uint32            : 1;
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IM  uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
            uint32            : 2;
      __IM  uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __OM  uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DOEPCTL0;
  __IM  uint32  RESERVED24;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000308) OTG_HS device endpoint-0 interrupt register                */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32            : 7;
      __IOM uint32 NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32            : 17;
    } bit;
  } OTG_HS_DOEPINT0;
  __IM  uint32  RESERVED25;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000310) OTG_HS device endpoint-0 transfer size register            */
    
    struct {
      __IOM uint32 XFRSIZ     : 7;            /*!< [6..0] Transfer size                                                      */
            uint32            : 12;
      __IOM uint32 PKTCNT     : 1;            /*!< [19..19] Packet count                                                     */
            uint32            : 9;
      __IOM uint32 STUPCNT    : 2;            /*!< [30..29] SETUP packet count                                               */
            uint32            : 1;
    } bit;
  } OTG_HS_DOEPTSIZ0;
  __IM  uint32  RESERVED26[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000320) OTG device endpoint-1 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even odd frame/Endpoint data PID                                 */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID/Set even frame                                     */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DOEPCTL1;
  __IM  uint32  RESERVED27;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000328) OTG_HS device endpoint-1 interrupt register                */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32            : 7;
      __IOM uint32 NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32            : 17;
    } bit;
  } OTG_HS_DOEPINT1;
  __IM  uint32  RESERVED28;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000330) OTG_HS device endpoint-1 transfer size register            */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_HS_DOEPTSIZ1;
  __IM  uint32  RESERVED29[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000340) OTG device endpoint-2 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even odd frame/Endpoint data PID                                 */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID/Set even frame                                     */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DOEPCTL2;
  __IM  uint32  RESERVED30;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000348) OTG_HS device endpoint-2 interrupt register                */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32            : 7;
      __IOM uint32 NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32            : 17;
    } bit;
  } OTG_HS_DOEPINT2;
  __IM  uint32  RESERVED31;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000350) OTG_HS device endpoint-2 transfer size register            */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_HS_DOEPTSIZ2;
  __IM  uint32  RESERVED32[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000360) OTG device endpoint-3 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even odd frame/Endpoint data PID                                 */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID/Set even frame                                     */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DOEPCTL3;
  __IM  uint32  RESERVED33;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000368) OTG_HS device endpoint-3 interrupt register                */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32            : 7;
      __IOM uint32 NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32            : 17;
    } bit;
  } OTG_HS_DOEPINT3;
  __IM  uint32  RESERVED34;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000370) OTG_HS device endpoint-3 transfer size register            */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_HS_DOEPTSIZ3;
  __IM  uint32  RESERVED35[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000380) OTG device endpoint-4 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even odd frame/Endpoint data PID                                 */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID/Set even frame                                     */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DOEPCTL4;
  __IM  uint32  RESERVED36;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000388) OTG_HS device endpoint-4 interrupt register                */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32            : 7;
      __IOM uint32 NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32            : 17;
    } bit;
  } OTG_HS_DOEPINT4;
  __IM  uint32  RESERVED37;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000390) OTG_HS device endpoint-4 transfer size register            */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_HS_DOEPTSIZ4;
  __IM  uint32  RESERVED38[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003A0) OTG device endpoint-5 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even odd frame/Endpoint data PID                                 */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID/Set even frame                                     */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DOEPCTL5;
  __IM  uint32  RESERVED39;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003A8) OTG_HS device endpoint-5 interrupt register                */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32            : 7;
      __IOM uint32 NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32            : 17;
    } bit;
  } OTG_HS_DOEPINT5;
  __IM  uint32  RESERVED40;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003B0) OTG_HS device endpoint-5 transfer size register            */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_HS_DOEPTSIZ5;
  __IM  uint32  RESERVED41[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003C0) OTG device endpoint-6 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even odd frame/Endpoint data PID                                 */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID/Set even frame                                     */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DOEPCTL6;
  __IM  uint32  RESERVED42;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003C8) OTG_HS device endpoint-6 interrupt register                */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32            : 7;
      __IOM uint32 NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32            : 17;
    } bit;
  } OTG_HS_DOEPINT6;
  __IM  uint32  RESERVED43;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003D0) OTG_HS device endpoint-6 transfer size register            */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_HS_DOEPTSIZ6;
  __IM  uint32  RESERVED44[3];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003E0) OTG device endpoint-7 control register                     */
    
    struct {
      __IOM uint32 MPSIZ      : 11;           /*!< [10..0] Maximum packet size                                               */
            uint32            : 4;
      __IOM uint32 USBAEP     : 1;            /*!< [15..15] USB active endpoint                                              */
      __IM  uint32 EONUM_DPID : 1;            /*!< [16..16] Even odd frame/Endpoint data PID                                 */
      __IM  uint32 NAKSTS     : 1;            /*!< [17..17] NAK status                                                       */
      __IOM uint32 EPTYP      : 2;            /*!< [19..18] Endpoint type                                                    */
      __IOM uint32 SNPM       : 1;            /*!< [20..20] Snoop mode                                                       */
      __IOM uint32 Stall      : 1;            /*!< [21..21] STALL handshake                                                  */
            uint32            : 4;
      __OM  uint32 CNAK       : 1;            /*!< [26..26] Clear NAK                                                        */
      __OM  uint32 SNAK       : 1;            /*!< [27..27] Set NAK                                                          */
      __OM  uint32 SD0PID_SEVNFRM : 1;        /*!< [28..28] Set DATA0 PID/Set even frame                                     */
      __OM  uint32 SODDFRM    : 1;            /*!< [29..29] Set odd frame                                                    */
      __IOM uint32 EPDIS      : 1;            /*!< [30..30] Endpoint disable                                                 */
      __IOM uint32 EPENA      : 1;            /*!< [31..31] Endpoint enable                                                  */
    } bit;
  } OTG_HS_DOEPCTL7;
  __IM  uint32  RESERVED45;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003E8) OTG_HS device endpoint-7 interrupt register                */
    
    struct {
      __IOM uint32 XFRC       : 1;            /*!< [0..0] Transfer completed interrupt                                       */
      __IOM uint32 EPDISD     : 1;            /*!< [1..1] Endpoint disabled interrupt                                        */
            uint32            : 1;
      __IOM uint32 STUP       : 1;            /*!< [3..3] SETUP phase done                                                   */
      __IOM uint32 OTEPDIS    : 1;            /*!< [4..4] OUT token received when endpoint disabled                          */
            uint32            : 1;
      __IOM uint32 B2BSTUP    : 1;            /*!< [6..6] Back-to-back SETUP packets received                                */
            uint32            : 7;
      __IOM uint32 NYET       : 1;            /*!< [14..14] NYET interrupt                                                   */
            uint32            : 17;
    } bit;
  } OTG_HS_DOEPINT7;
  __IM  uint32  RESERVED46;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x000003F0) OTG_HS device endpoint-7 transfer size register            */
    
    struct {
      __IOM uint32 XFRSIZ     : 19;           /*!< [18..0] Transfer size                                                     */
      __IOM uint32 PKTCNT     : 10;           /*!< [28..19] Packet count                                                     */
      __IOM uint32 RXDPID_STUPCNT : 2;        /*!< [30..29] Received data PID/SETUP packet count                             */
            uint32            : 1;
    } bit;
  } OTG_HS_DOEPTSIZ7;
} OTG_HS_DEVICE_Type;                           /*!< Size = 1012 (0x3f4)                                                       */



/* =========================================================================================================================== */
/* ================                                       OTG_HS_PWRCLK                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief USB on the go high speed (OTG_HS_PWRCLK)
  */

typedef struct {                                /*!< (@ 0x40040E00) OTG_HS_PWRCLK Structure                                    */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Power and clock gating control register                    */
    
    struct {
      __IOM uint32 STPPCLK    : 1;            /*!< [0..0] Stop PHY clock                                                     */
      __IOM uint32 GATEHCLK   : 1;            /*!< [1..1] Gate HCLK                                                          */
            uint32            : 2;
      __IOM uint32 PHYSUSP    : 1;            /*!< [4..4] PHY suspended                                                      */
            uint32            : 27;
    } bit;
  } OTG_HS_PCGCR;
} OTG_HS_PWRCLK_Type;                           /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           NVIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested Vectored Interrupt       Controller (NVIC)
  */

typedef struct {                                /*!< (@ 0xE000E100) NVIC Structure                                             */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Interrupt Set-Enable Register                              */
    
    struct {
      __IOM uint32 SETENA     : 32;           /*!< [31..0] SETENA                                                            */
    } bit;
  } ISER0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Interrupt Set-Enable Register                              */
    
    struct {
      __IOM uint32 SETENA     : 32;           /*!< [31..0] SETENA                                                            */
    } bit;
  } ISER1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Interrupt Set-Enable Register                              */
    
    struct {
      __IOM uint32 SETENA     : 32;           /*!< [31..0] SETENA                                                            */
    } bit;
  } ISER2;
  __IM  uint32  RESERVED[29];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000080) Interrupt Clear-Enable Register                            */
    
    struct {
      __IOM uint32 CLRENA     : 32;           /*!< [31..0] CLRENA                                                            */
    } bit;
  } ICER0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000084) Interrupt Clear-Enable Register                            */
    
    struct {
      __IOM uint32 CLRENA     : 32;           /*!< [31..0] CLRENA                                                            */
    } bit;
  } ICER1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000088) Interrupt Clear-Enable Register                            */
    
    struct {
      __IOM uint32 CLRENA     : 32;           /*!< [31..0] CLRENA                                                            */
    } bit;
  } ICER2;
  __IM  uint32  RESERVED1[29];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000100) Interrupt Set-Pending Register                             */
    
    struct {
      __IOM uint32 SETPEND    : 32;           /*!< [31..0] SETPEND                                                           */
    } bit;
  } ISPR0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000104) Interrupt Set-Pending Register                             */
    
    struct {
      __IOM uint32 SETPEND    : 32;           /*!< [31..0] SETPEND                                                           */
    } bit;
  } ISPR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000108) Interrupt Set-Pending Register                             */
    
    struct {
      __IOM uint32 SETPEND    : 32;           /*!< [31..0] SETPEND                                                           */
    } bit;
  } ISPR2;
  __IM  uint32  RESERVED2[29];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000180) Interrupt Clear-Pending Register                           */
    
    struct {
      __IOM uint32 CLRPEND    : 32;           /*!< [31..0] CLRPEND                                                           */
    } bit;
  } ICPR0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000184) Interrupt Clear-Pending Register                           */
    
    struct {
      __IOM uint32 CLRPEND    : 32;           /*!< [31..0] CLRPEND                                                           */
    } bit;
  } ICPR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000188) Interrupt Clear-Pending Register                           */
    
    struct {
      __IOM uint32 CLRPEND    : 32;           /*!< [31..0] CLRPEND                                                           */
    } bit;
  } ICPR2;
  __IM  uint32  RESERVED3[29];
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000200) Interrupt Active Bit Register                              */
    
    struct {
      __IM  uint32 ACTIVE     : 32;           /*!< [31..0] ACTIVE                                                            */
    } bit;
  } IABR0;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000204) Interrupt Active Bit Register                              */
    
    struct {
      __IM  uint32 ACTIVE     : 32;           /*!< [31..0] ACTIVE                                                            */
    } bit;
  } IABR1;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000208) Interrupt Active Bit Register                              */
    
    struct {
      __IM  uint32 ACTIVE     : 32;           /*!< [31..0] ACTIVE                                                            */
    } bit;
  } IABR2;
  __IM  uint32  RESERVED4[61];
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000300) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR0;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000304) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000308) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000030C) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000310) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR4;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000314) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR5;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000318) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR6;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000031C) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR7;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000320) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR8;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000324) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR9;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000328) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR10;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000032C) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR11;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000330) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR12;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000334) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR13;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000338) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR14;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000033C) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR15;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000340) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR16;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000344) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR17;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000348) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR18;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000034C) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR19;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000350) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR20;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000354) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR21;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000358) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR22;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000035C) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR23;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000360) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR24;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000364) Interrupt Priority Register                                */
    
    struct {
      __IOM uint32 IPR_N0     : 8;            /*!< [7..0] IPR_N0                                                             */
      __IOM uint32 IPR_N1     : 8;            /*!< [15..8] IPR_N1                                                            */
      __IOM uint32 IPR_N2     : 8;            /*!< [23..16] IPR_N2                                                           */
      __IOM uint32 IPR_N3     : 8;            /*!< [31..24] IPR_N3                                                           */
    } bit;
  } IPR25;
} NVIC_Type;                                    /*!< Size = 872 (0x368)                                                        */



/* =========================================================================================================================== */
/* ================                                            MPU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Memory protection unit (MPU)
  */

typedef struct {                                /*!< (@ 0xE000ED90) MPU Structure                                              */
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000000) MPU type register                                          */
    
    struct {
      __IM  uint32 SEPARATE   : 1;            /*!< [0..0] Separate flag                                                      */
            uint32            : 7;
      __IM  uint32 DREGION    : 8;            /*!< [15..8] Number of MPU data regions                                        */
      __IM  uint32 IREGION    : 8;            /*!< [23..16] Number of MPU instruction regions                                */
            uint32            : 8;
    } bit;
  } MPU_TYPER;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000004) MPU control register                                       */
    
    struct {
      __IM  uint32 ENABLE     : 1;            /*!< [0..0] Enables the MPU                                                    */
      __IM  uint32 HFNMIENA   : 1;            /*!< [1..1] Enables the operation of MPU during hard fault                     */
      __IM  uint32 PRIVDEFENA : 1;            /*!< [2..2] Enable priviliged software access to default memory map            */
            uint32            : 29;
    } bit;
  } MPU_CTRL;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) MPU region number register                                 */
    
    struct {
      __IOM uint32 REGION     : 8;            /*!< [7..0] MPU region                                                         */
            uint32            : 24;
    } bit;
  } MPU_RNR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) MPU region base address register                           */
    
    struct {
      __IOM uint32 REGION     : 4;            /*!< [3..0] MPU region field                                                   */
      __IOM uint32 VALID      : 1;            /*!< [4..4] MPU region number valid                                            */
      __IOM uint32 ADDR       : 27;           /*!< [31..5] Region base address field                                         */
    } bit;
  } MPU_RBAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) MPU region attribute and size register                     */
    
    struct {
      __IOM uint32 ENABLE     : 1;            /*!< [0..0] Region enable bit.                                                 */
      __IOM uint32 SIZE       : 5;            /*!< [5..1] Size of the MPU protection region                                  */
            uint32            : 2;
      __IOM uint32 SRD        : 8;            /*!< [15..8] Subregion disable bits                                            */
      __IOM uint32 B          : 1;            /*!< [16..16] memory attribute                                                 */
      __IOM uint32 C          : 1;            /*!< [17..17] memory attribute                                                 */
      __IOM uint32 S          : 1;            /*!< [18..18] Shareable memory attribute                                       */
      __IOM uint32 TEX        : 3;            /*!< [21..19] memory attribute                                                 */
            uint32            : 2;
      __IOM uint32 AP         : 3;            /*!< [26..24] Access permission                                                */
            uint32            : 1;
      __IOM uint32 XN         : 1;            /*!< [28..28] Instruction access disable bit                                   */
            uint32            : 3;
    } bit;
  } MPU_RASR;
} MPU_Type;                                     /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                            STK                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SysTick timer (STK)
  */

typedef struct {                                /*!< (@ 0xE000E010) STK Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) SysTick control and status register                        */
    
    struct {
      __IOM uint32 ENABLE     : 1;            /*!< [0..0] Counter enable                                                     */
      __IOM uint32 TICKINT    : 1;            /*!< [1..1] SysTick exception request enable                                   */
      __IOM uint32 CLKSOURCE  : 1;            /*!< [2..2] Clock source selection                                             */
            uint32            : 13;
      __IOM uint32 COUNTFLAG  : 1;            /*!< [16..16] COUNTFLAG                                                        */
            uint32            : 15;
    } bit;
  } CSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) SysTick reload value register                              */
    
    struct {
      __IOM uint32 RELOAD     : 24;           /*!< [23..0] RELOAD value                                                      */
            uint32            : 8;
    } bit;
  } RVR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) SysTick current value register                             */
    
    struct {
      __IOM uint32 CURRENT    : 24;           /*!< [23..0] Current counter value                                             */
            uint32            : 8;
    } bit;
  } CVR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) SysTick calibration value register                         */
    
    struct {
      __IOM uint32 TENMS      : 24;           /*!< [23..0] Calibration value                                                 */
            uint32            : 6;
      __IOM uint32 SKEW       : 1;            /*!< [30..30] SKEW flag: Indicates whether the TENMS value is exact            */
      __IOM uint32 NOREF      : 1;            /*!< [31..31] NOREF flag. Reads as zero                                        */
    } bit;
  } CALIB;
} STK_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                         NVIC_STIR                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested vectored interrupt       controller (NVIC_STIR)
  */

typedef struct {                                /*!< (@ 0xE000EF00) NVIC_STIR Structure                                        */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Software trigger interrupt register                        */
    
    struct {
      __IOM uint32 INTID      : 9;            /*!< [8..0] Software generated interrupt ID                                    */
            uint32            : 23;
    } bit;
  } STIR;
} NVIC_STIR_Type;                               /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         FPU_CPACR                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Floating point unit CPACR (FPU_CPACR)
  */

typedef struct {                                /*!< (@ 0xE000ED88) FPU_CPACR Structure                                        */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Coprocessor access control register                        */
    
    struct {
            uint32            : 20;
      __IOM uint32 CP         : 4;            /*!< [23..20] CP                                                               */
            uint32            : 8;
    } bit;
  } CPACR;
} FPU_CPACR_Type;                               /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         SCB_ACTRL                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief System control block ACTLR (SCB_ACTRL)
  */

typedef struct {                                /*!< (@ 0xE000E008) SCB_ACTRL Structure                                        */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Auxiliary control register                                 */
    
    struct {
            uint32            : 2;
      __IOM uint32 DISFOLD    : 1;            /*!< [2..2] DISFOLD                                                            */
            uint32            : 7;
      __IOM uint32 FPEXCODIS  : 1;            /*!< [10..10] FPEXCODIS                                                        */
      __IOM uint32 DISRAMODE  : 1;            /*!< [11..11] DISRAMODE                                                        */
      __IOM uint32 DISITMATBFLUSH : 1;        /*!< [12..12] DISITMATBFLUSH                                                   */
            uint32            : 19;
    } bit;
  } ACTRL;
} SCB_ACTRL_Type;                               /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                            FPU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Floting point unit (FPU)
  */

typedef struct {                                /*!< (@ 0xE000EF34) FPU Structure                                              */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Floating-point context control register                    */
    
    struct {
      __IOM uint32 LSPACT     : 1;            /*!< [0..0] LSPACT                                                             */
      __IOM uint32 USER       : 1;            /*!< [1..1] USER                                                               */
            uint32            : 1;
      __IOM uint32 THREAD     : 1;            /*!< [3..3] THREAD                                                             */
      __IOM uint32 HFRDY      : 1;            /*!< [4..4] HFRDY                                                              */
      __IOM uint32 MMRDY      : 1;            /*!< [5..5] MMRDY                                                              */
      __IOM uint32 BFRDY      : 1;            /*!< [6..6] BFRDY                                                              */
            uint32            : 1;
      __IOM uint32 MONRDY     : 1;            /*!< [8..8] MONRDY                                                             */
            uint32            : 21;
      __IOM uint32 LSPEN      : 1;            /*!< [30..30] LSPEN                                                            */
      __IOM uint32 ASPEN      : 1;            /*!< [31..31] ASPEN                                                            */
    } bit;
  } FPCCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Floating-point context address register                    */
    
    struct {
            uint32            : 3;
      __IOM uint32 ADDRESS    : 29;           /*!< [31..3] Location of unpopulated floating-point                            */
    } bit;
  } FPCAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Floating-point status control register                     */
    
    struct {
      __IOM uint32 IOC        : 1;            /*!< [0..0] Invalid operation cumulative exception bit                         */
      __IOM uint32 DZC        : 1;            /*!< [1..1] Division by zero cumulative exception bit.                         */
      __IOM uint32 OFC        : 1;            /*!< [2..2] Overflow cumulative exception bit                                  */
      __IOM uint32 UFC        : 1;            /*!< [3..3] Underflow cumulative exception bit                                 */
      __IOM uint32 IXC        : 1;            /*!< [4..4] Inexact cumulative exception bit                                   */
            uint32            : 2;
      __IOM uint32 IDC        : 1;            /*!< [7..7] Input denormal cumulative exception bit.                           */
            uint32            : 14;
      __IOM uint32 RMode      : 2;            /*!< [23..22] Rounding Mode control field                                      */
      __IOM uint32 FZ         : 1;            /*!< [24..24] Flush-to-zero mode control bit:                                  */
      __IOM uint32 DN         : 1;            /*!< [25..25] Default NaN mode control bit                                     */
      __IOM uint32 AHP        : 1;            /*!< [26..26] Alternative half-precision control bit                           */
            uint32            : 1;
      __IOM uint32 V          : 1;            /*!< [28..28] Overflow condition code flag                                     */
      __IOM uint32 C          : 1;            /*!< [29..29] Carry condition code flag                                        */
      __IOM uint32 Z          : 1;            /*!< [30..30] Zero condition code flag                                         */
      __IOM uint32 N          : 1;            /*!< [31..31] Negative condition code flag                                     */
    } bit;
  } FPSCR;
} FPU_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                            SCB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System control block (SCB)
  */

typedef struct {                                /*!< (@ 0xE000ED00) SCB Structure                                              */
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000000) CPUID base register                                        */
    
    struct {
      __IM  uint32 Revision   : 4;            /*!< [3..0] Revision number                                                    */
      __IM  uint32 PartNo     : 12;           /*!< [15..4] Part number of the processor                                      */
      __IM  uint32 Constant   : 4;            /*!< [19..16] Reads as 0xF                                                     */
      __IM  uint32 Variant    : 4;            /*!< [23..20] Variant number                                                   */
      __IM  uint32 Implementer : 8;           /*!< [31..24] Implementer code                                                 */
    } bit;
  } CPUID;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Interrupt control and state register                       */
    
    struct {
      __IOM uint32 VECTACTIVE : 9;            /*!< [8..0] Active vector                                                      */
            uint32            : 2;
      __IOM uint32 RETTOBASE  : 1;            /*!< [11..11] Return to base level                                             */
      __IOM uint32 VECTPENDING : 7;           /*!< [18..12] Pending vector                                                   */
            uint32            : 3;
      __IOM uint32 ISRPENDING : 1;            /*!< [22..22] Interrupt pending flag                                           */
            uint32            : 2;
      __IOM uint32 PENDSTCLR  : 1;            /*!< [25..25] SysTick exception clear-pending bit                              */
      __IOM uint32 PENDSTSET  : 1;            /*!< [26..26] SysTick exception set-pending bit                                */
      __IOM uint32 PENDSVCLR  : 1;            /*!< [27..27] PendSV clear-pending bit                                         */
      __IOM uint32 PENDSVSET  : 1;            /*!< [28..28] PendSV set-pending bit                                           */
            uint32            : 2;
      __IOM uint32 NMIPENDSET : 1;            /*!< [31..31] NMI set-pending bit.                                             */
    } bit;
  } ICSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) Vector table offset register                               */
    
    struct {
            uint32            : 9;
      __IOM uint32 TBLOFF     : 21;           /*!< [29..9] Vector table base offset field                                    */
            uint32            : 2;
    } bit;
  } VTOR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Application interrupt and reset control register           */
    
    struct {
      __IOM uint32 VECTRESET  : 1;            /*!< [0..0] VECTRESET                                                          */
      __IOM uint32 VECTCLRACTIVE : 1;         /*!< [1..1] VECTCLRACTIVE                                                      */
      __IOM uint32 SYSRESETREQ : 1;           /*!< [2..2] SYSRESETREQ                                                        */
            uint32            : 5;
      __IOM uint32 PRIGROUP   : 3;            /*!< [10..8] PRIGROUP                                                          */
            uint32            : 4;
      __IOM uint32 ENDIANESS  : 1;            /*!< [15..15] ENDIANESS                                                        */
      __IOM uint32 VECTKEYSTAT : 16;          /*!< [31..16] Register key                                                     */
    } bit;
  } AIRCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) System control register                                    */
    
    struct {
            uint32            : 1;
      __IOM uint32 SLEEPONEXIT : 1;           /*!< [1..1] SLEEPONEXIT                                                        */
      __IOM uint32 SLEEPDEEP  : 1;            /*!< [2..2] SLEEPDEEP                                                          */
            uint32            : 1;
      __IOM uint32 SEVEONPEND : 1;            /*!< [4..4] Send Event on Pending bit                                          */
            uint32            : 27;
    } bit;
  } SCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000014) Configuration and control register                         */
    
    struct {
      __IOM uint32 NONBASETHRDENA : 1;        /*!< [0..0] Configures how the processor enters Thread mode                    */
      __IOM uint32 USERSETMPEND : 1;          /*!< [1..1] USERSETMPEND                                                       */
            uint32            : 1;
      __IOM uint32 UNALIGN__TRP : 1;          /*!< [3..3] UNALIGN_ TRP                                                       */
      __IOM uint32 DIV_0_TRP  : 1;            /*!< [4..4] DIV_0_TRP                                                          */
            uint32            : 3;
      __IOM uint32 BFHFNMIGN  : 1;            /*!< [8..8] BFHFNMIGN                                                          */
      __IOM uint32 STKALIGN   : 1;            /*!< [9..9] STKALIGN                                                           */
            uint32            : 6;
      __IOM uint32 DC         : 1;            /*!< [16..16] DC                                                               */
      __IOM uint32 IC         : 1;            /*!< [17..17] IC                                                               */
      __IOM uint32 BP         : 1;            /*!< [18..18] BP                                                               */
            uint32            : 13;
    } bit;
  } CCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) System handler priority registers                          */
    
    struct {
      __IOM uint32 PRI_4      : 8;            /*!< [7..0] Priority of system handler 4                                       */
      __IOM uint32 PRI_5      : 8;            /*!< [15..8] Priority of system handler 5                                      */
      __IOM uint32 PRI_6      : 8;            /*!< [23..16] Priority of system handler 6                                     */
            uint32            : 8;
    } bit;
  } SHPR1;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000001C) System handler priority registers                          */
    
    struct {
            uint32            : 24;
      __IOM uint32 PRI_11     : 8;            /*!< [31..24] Priority of system handler 11                                    */
    } bit;
  } SHPR2;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000020) System handler priority registers                          */
    
    struct {
            uint32            : 16;
      __IOM uint32 PRI_14     : 8;            /*!< [23..16] Priority of system handler 14                                    */
      __IOM uint32 PRI_15     : 8;            /*!< [31..24] Priority of system handler 15                                    */
    } bit;
  } SHPR3;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000024) System handler control and state register                  */
    
    struct {
      __IOM uint32 MEMFAULTACT : 1;           /*!< [0..0] Memory management fault exception active bit                       */
      __IOM uint32 BUSFAULTACT : 1;           /*!< [1..1] Bus fault exception active bit                                     */
            uint32            : 1;
      __IOM uint32 USGFAULTACT : 1;           /*!< [3..3] Usage fault exception active bit                                   */
            uint32            : 3;
      __IOM uint32 SVCALLACT  : 1;            /*!< [7..7] SVC call active bit                                                */
      __IOM uint32 MONITORACT : 1;            /*!< [8..8] Debug monitor active bit                                           */
            uint32            : 1;
      __IOM uint32 PENDSVACT  : 1;            /*!< [10..10] PendSV exception active bit                                      */
      __IOM uint32 SYSTICKACT : 1;            /*!< [11..11] SysTick exception active bit                                     */
      __IOM uint32 USGFAULTPENDED : 1;        /*!< [12..12] Usage fault exception pending bit                                */
      __IOM uint32 MEMFAULTPENDED : 1;        /*!< [13..13] Memory management fault exception pending bit                    */
      __IOM uint32 BUSFAULTPENDED : 1;        /*!< [14..14] Bus fault exception pending bit                                  */
      __IOM uint32 SVCALLPENDED : 1;          /*!< [15..15] SVC call pending bit                                             */
      __IOM uint32 MEMFAULTENA : 1;           /*!< [16..16] Memory management fault enable bit                               */
      __IOM uint32 BUSFAULTENA : 1;           /*!< [17..17] Bus fault enable bit                                             */
      __IOM uint32 USGFAULTENA : 1;           /*!< [18..18] Usage fault enable bit                                           */
            uint32            : 13;
    } bit;
  } SHCRS;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000028) Configurable fault status register                         */
    
    struct {
      __IOM uint32 IACCVIOL   : 1;            /*!< [0..0] IACCVIOL                                                           */
      __IOM uint32 DACCVIOL   : 1;            /*!< [1..1] DACCVIOL                                                           */
            uint32            : 1;
      __IOM uint32 MUNSTKERR  : 1;            /*!< [3..3] MUNSTKERR                                                          */
      __IOM uint32 MSTKERR    : 1;            /*!< [4..4] MSTKERR                                                            */
      __IOM uint32 MLSPERR    : 1;            /*!< [5..5] MLSPERR                                                            */
            uint32            : 1;
      __IOM uint32 MMARVALID  : 1;            /*!< [7..7] MMARVALID                                                          */
      __IOM uint32 IBUSERR    : 1;            /*!< [8..8] Instruction bus error                                              */
      __IOM uint32 PRECISERR  : 1;            /*!< [9..9] Precise data bus error                                             */
      __IOM uint32 IMPRECISERR : 1;           /*!< [10..10] Imprecise data bus error                                         */
      __IOM uint32 UNSTKERR   : 1;            /*!< [11..11] Bus fault on unstacking for a return from exception              */
      __IOM uint32 STKERR     : 1;            /*!< [12..12] Bus fault on stacking for exception entry                        */
      __IOM uint32 LSPERR     : 1;            /*!< [13..13] Bus fault on floating-point lazy state preservation              */
            uint32            : 1;
      __IOM uint32 BFARVALID  : 1;            /*!< [15..15] Bus Fault Address Register (BFAR) valid flag                     */
      __IOM uint32 UNDEFINSTR : 1;            /*!< [16..16] Undefined instruction usage fault                                */
      __IOM uint32 INVSTATE   : 1;            /*!< [17..17] Invalid state usage fault                                        */
      __IOM uint32 INVPC      : 1;            /*!< [18..18] Invalid PC load usage fault                                      */
      __IOM uint32 NOCP       : 1;            /*!< [19..19] No coprocessor usage fault.                                      */
            uint32            : 4;
      __IOM uint32 UNALIGNED  : 1;            /*!< [24..24] Unaligned access usage fault                                     */
      __IOM uint32 DIVBYZERO  : 1;            /*!< [25..25] Divide by zero usage fault                                       */
            uint32            : 6;
    } bit;
  } CFSR_UFSR_BFSR_MMFSR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000002C) Hard fault status register                                 */
    
    struct {
            uint32            : 1;
      __IOM uint32 VECTTBL    : 1;            /*!< [1..1] Vector table hard fault                                            */
            uint32            : 28;
      __IOM uint32 FORCED     : 1;            /*!< [30..30] Forced hard fault                                                */
      __IOM uint32 DEBUG_VT   : 1;            /*!< [31..31] Reserved for Debug use                                           */
    } bit;
  } HFSR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000034) Memory management fault address register                   */
    
    struct {
      __IOM uint32 ADDRESS    : 32;           /*!< [31..0] Memory management fault address                                   */
    } bit;
  } MMFAR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000038) Bus fault address register                                 */
    
    struct {
      __IOM uint32 ADDRESS    : 32;           /*!< [31..0] Bus fault address                                                 */
    } bit;
  } BFAR;
} SCB_Type;                                     /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PF                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Processor features (PF)
  */

typedef struct {                                /*!< (@ 0xE000ED78) PF Structure                                               */
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000000) Cache Level ID register                                    */
    
    struct {
      __IM  uint32 CL1        : 3;            /*!< [2..0] CL1                                                                */
      __IM  uint32 CL2        : 3;            /*!< [5..3] CL2                                                                */
      __IM  uint32 CL3        : 3;            /*!< [8..6] CL3                                                                */
      __IM  uint32 CL4        : 3;            /*!< [11..9] CL4                                                               */
      __IM  uint32 CL5        : 3;            /*!< [14..12] CL5                                                              */
      __IM  uint32 CL6        : 3;            /*!< [17..15] CL6                                                              */
      __IM  uint32 CL7        : 3;            /*!< [20..18] CL7                                                              */
      __IM  uint32 LoUIS      : 3;            /*!< [23..21] LoUIS                                                            */
      __IM  uint32 LoC        : 3;            /*!< [26..24] LoC                                                              */
      __IM  uint32 LoU        : 3;            /*!< [29..27] LoU                                                              */
            uint32            : 2;
    } bit;
  } CLIDR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000004) Cache Type register                                        */
    
    struct {
      __IM  uint32 _IminLine  : 4;            /*!< [3..0] IminLine                                                           */
            uint32            : 12;
      __IM  uint32 DMinLine   : 4;            /*!< [19..16] DMinLine                                                         */
      __IM  uint32 ERG        : 4;            /*!< [23..20] ERG                                                              */
      __IM  uint32 CWG        : 4;            /*!< [27..24] CWG                                                              */
            uint32            : 1;
      __IM  uint32 Format     : 3;            /*!< [31..29] Format                                                           */
    } bit;
  } CTR;
  
  union {
    __IM  uint32 reg;                         /*!< (@ 0x00000008) Cache Size ID register                                     */
    
    struct {
      __IM  uint32 LineSize   : 3;            /*!< [2..0] LineSize                                                           */
      __IM  uint32 Associativity : 10;        /*!< [12..3] Associativity                                                     */
      __IM  uint32 NumSets    : 15;           /*!< [27..13] NumSets                                                          */
      __IM  uint32 WA         : 1;            /*!< [28..28] WA                                                               */
      __IM  uint32 RA         : 1;            /*!< [29..29] RA                                                               */
      __IM  uint32 WB         : 1;            /*!< [30..30] WB                                                               */
      __IM  uint32 WT         : 1;            /*!< [31..31] WT                                                               */
    } bit;
  } CCSIDR;
} PF_Type;                                      /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                            AC                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Access control (AC)
  */

typedef struct {                                /*!< (@ 0xE000EF90) AC Structure                                               */
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000000) Instruction and Data Tightly-Coupled Memory Control
                                                                    Registers                                                  */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] EN                                                                 */
      __IOM uint32 RMW        : 1;            /*!< [1..1] RMW                                                                */
      __IOM uint32 RETEN      : 1;            /*!< [2..2] RETEN                                                              */
      __IOM uint32 SZ         : 4;            /*!< [6..3] SZ                                                                 */
            uint32            : 25;
    } bit;
  } ITCMCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000004) Instruction and Data Tightly-Coupled Memory Control
                                                                    Registers                                                  */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] EN                                                                 */
      __IOM uint32 RMW        : 1;            /*!< [1..1] RMW                                                                */
      __IOM uint32 RETEN      : 1;            /*!< [2..2] RETEN                                                              */
      __IOM uint32 SZ         : 4;            /*!< [6..3] SZ                                                                 */
            uint32            : 25;
    } bit;
  } DTCMCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000008) AHBP Control register                                      */
    
    struct {
      __IOM uint32 EN         : 1;            /*!< [0..0] EN                                                                 */
      __IOM uint32 SZ         : 3;            /*!< [3..1] SZ                                                                 */
            uint32            : 28;
    } bit;
  } AHBPCR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x0000000C) Auxiliary Cache Control register                           */
    
    struct {
      __IOM uint32 SIWT       : 1;            /*!< [0..0] SIWT                                                               */
      __IOM uint32 ECCEN      : 1;            /*!< [1..1] ECCEN                                                              */
      __IOM uint32 FORCEWT    : 1;            /*!< [2..2] FORCEWT                                                            */
            uint32            : 29;
    } bit;
  } CACR;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000010) AHB Slave Control register                                 */
    
    struct {
      __IOM uint32 CTL        : 2;            /*!< [1..0] CTL                                                                */
      __IOM uint32 TPRI       : 9;            /*!< [10..2] TPRI                                                              */
      __IOM uint32 INITCOUNT  : 5;            /*!< [15..11] INITCOUNT                                                        */
            uint32            : 16;
    } bit;
  } AHBSCR;
  __IM  uint32  RESERVED;
  
  union {
    __IOM uint32 reg;                         /*!< (@ 0x00000018) Auxiliary Bus Fault Status register                        */
    
    struct {
      __IOM uint32 ITCM       : 1;            /*!< [0..0] ITCM                                                               */
      __IOM uint32 DTCM       : 1;            /*!< [1..1] DTCM                                                               */
      __IOM uint32 AHBP       : 1;            /*!< [2..2] AHBP                                                               */
      __IOM uint32 AXIM       : 1;            /*!< [3..3] AXIM                                                               */
      __IOM uint32 EPPB       : 1;            /*!< [4..4] EPPB                                                               */
            uint32            : 3;
      __IOM uint32 AXIMTYPE   : 2;            /*!< [9..8] AXIMTYPE                                                           */
            uint32            : 22;
    } bit;
  } ABFSR;
} AC_Type;                                      /*!< Size = 28 (0x1c)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define RNG_BASE                    0x50060800UL
#define HASH_BASE                   0x50060400UL
#define CRYP_BASE                   0x50060000UL
#define DCMI_BASE                   0x50050000UL
#define FMC_BASE                    0xA0000000UL
#define DBG_BASE                    0xE0042000UL
#define DMA2_BASE                   0x40026400UL
#define DMA1_BASE                   0x40026000UL
#define RCC_BASE                    0x40023800UL
#define GPIOD_BASE                  0x40020C00UL
#define GPIOC_BASE                  0x40020800UL
#define GPIOK_BASE                  0x40022800UL
#define GPIOJ_BASE                  0x40022400UL
#define GPIOI_BASE                  0x40022000UL
#define GPIOH_BASE                  0x40021C00UL
#define GPIOG_BASE                  0x40021800UL
#define GPIOF_BASE                  0x40021400UL
#define GPIOE_BASE                  0x40021000UL
#define GPIOB_BASE                  0x40020400UL
#define GPIOA_BASE                  0x40020000UL
#define SYSCFG_BASE                 0x40013800UL
#define SPI1_BASE                   0x40013000UL
#define SPI3_BASE                   0x40003C00UL
#define SPI4_BASE                   0x40013400UL
#define SPI5_BASE                   0x40015000UL
#define SPI6_BASE                   0x40015400UL
#define SPI2_BASE                   0x40003800UL
#define ADC1_BASE                   0x40012000UL
#define ADC2_BASE                   0x40012100UL
#define ADC3_BASE                   0x40012200UL
#define DAC_BASE                    0x40007400UL
#define PWR_BASE                    0x40007000UL
#define IWDG_BASE                   0x40003000UL
#define WWDG_BASE                   0x40002C00UL
#define C_ADC_BASE                  0x40012300UL
#define TIM1_BASE                   0x40010000UL
#define TIM8_BASE                   0x40010400UL
#define TIM2_BASE                   0x40000000UL
#define TIM3_BASE                   0x40000400UL
#define TIM4_BASE                   0x40000800UL
#define TIM5_BASE                   0x40000C00UL
#define TIM9_BASE                   0x40014000UL
#define TIM12_BASE                  0x40001800UL
#define TIM10_BASE                  0x40014400UL
#define TIM11_BASE                  0x40014800UL
#define TIM13_BASE                  0x40001C00UL
#define TIM14_BASE                  0x40002000UL
#define TIM6_BASE                   0x40001000UL
#define TIM7_BASE                   0x40001400UL
#define Ethernet_MAC_BASE           0x40028000UL
#define Ethernet_MMC_BASE           0x40028100UL
#define Ethernet_PTP_BASE           0x40028700UL
#define Ethernet_DMA_BASE           0x40029000UL
#define CRC_BASE                    0x40023000UL
#define CAN1_BASE                   0x40006400UL
#define CAN2_BASE                   0x40006800UL
#define FLASH_BASE                  0x40023C00UL
#define EXTI_BASE                   0x40013C00UL
#define LTDC_BASE                   0x40016800UL
#define SAI1_BASE                   0x40015800UL
#define SAI2_BASE                   0x40015C00UL
#define DMA2D_BASE                  0x4002B000UL
#define QUADSPI_BASE                0xA0001000UL
#define CEC_BASE                    0x40006C00UL
#define SPDIF_RX_BASE               0x40004000UL
#define SDMMC1_BASE                 0x40012C00UL
#define LPTIM1_BASE                 0x40002400UL
#define I2C1_BASE                   0x40005400UL
#define I2C2_BASE                   0x40005800UL
#define I2C3_BASE                   0x40005C00UL
#define I2C4_BASE                   0x40006000UL
#define RTC_BASE                    0x40002800UL
#define USART6_BASE                 0x40011400UL
#define USART1_BASE                 0x40011000UL
#define USART3_BASE                 0x40004800UL
#define USART2_BASE                 0x40004400UL
#define UART5_BASE                  0x40005000UL
#define UART4_BASE                  0x40004C00UL
#define UART8_BASE                  0x40007C00UL
#define UART7_BASE                  0x40007800UL
#define OTG_FS_GLOBAL_BASE          0x50000000UL
#define OTG_FS_HOST_BASE            0x50000400UL
#define OTG_FS_DEVICE_BASE          0x50000800UL
#define OTG_FS_PWRCLK_BASE          0x50000E00UL
#define OTG_HS_GLOBAL_BASE          0x40040000UL
#define OTG_HS_HOST_BASE            0x40040400UL
#define OTG_HS_DEVICE_BASE          0x40040800UL
#define OTG_HS_PWRCLK_BASE          0x40040E00UL
#define NVIC_BASE                   0xE000E100UL
#define MPU_BASE                    0xE000ED90UL
#define STK_BASE                    0xE000E010UL
#define NVIC_STIR_BASE              0xE000EF00UL
#define FPU_CPACR_BASE              0xE000ED88UL
#define SCB_ACTRL_BASE              0xE000E008UL
#define FPU_BASE                    0xE000EF34UL
#define SCB_BASE                    0xE000ED00UL
#define PF_BASE                     0xE000ED78UL
#define AC_BASE                     0xE000EF90UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define RNG                         ((RNG_Type*)               RNG_BASE)
#define HASH                        ((HASH_Type*)              HASH_BASE)
#define CRYP                        ((CRYP_Type*)              CRYP_BASE)
#define DCMI                        ((DCMI_Type*)              DCMI_BASE)
#define FMC                         ((FMC_Type*)               FMC_BASE)
#define DBG                         ((DBG_Type*)               DBG_BASE)
#define DMA2                        ((DMA2_Type*)              DMA2_BASE)
#define DMA1                        ((DMA2_Type*)              DMA1_BASE)
#define RCC                         ((RCC_Type*)               RCC_BASE)
#define GPIOD                       ((GPIOD_Type*)             GPIOD_BASE)
#define GPIOC                       ((GPIOD_Type*)             GPIOC_BASE)
#define GPIOK                       ((GPIOD_Type*)             GPIOK_BASE)
#define GPIOJ                       ((GPIOD_Type*)             GPIOJ_BASE)
#define GPIOI                       ((GPIOD_Type*)             GPIOI_BASE)
#define GPIOH                       ((GPIOD_Type*)             GPIOH_BASE)
#define GPIOG                       ((GPIOD_Type*)             GPIOG_BASE)
#define GPIOF                       ((GPIOD_Type*)             GPIOF_BASE)
#define GPIOE                       ((GPIOD_Type*)             GPIOE_BASE)
#define GPIOB                       ((GPIOB_Type*)             GPIOB_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define SYSCFG                      ((SYSCFG_Type*)            SYSCFG_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI3                        ((SPI1_Type*)              SPI3_BASE)
#define SPI4                        ((SPI1_Type*)              SPI4_BASE)
#define SPI5                        ((SPI1_Type*)              SPI5_BASE)
#define SPI6                        ((SPI1_Type*)              SPI6_BASE)
#define SPI2                        ((SPI2_Type*)              SPI2_BASE)
#define ADC1                        ((ADC1_Type*)              ADC1_BASE)
#define ADC2                        ((ADC1_Type*)              ADC2_BASE)
#define ADC3                        ((ADC1_Type*)              ADC3_BASE)
#define DAC                         ((DAC_Type*)               DAC_BASE)
#define PWR                         ((PWR_Type*)               PWR_BASE)
#define IWDG                        ((IWDG_Type*)              IWDG_BASE)
#define WWDG                        ((WWDG_Type*)              WWDG_BASE)
#define C_ADC                       ((C_ADC_Type*)             C_ADC_BASE)
#define TIM1                        ((TIM1_Type*)              TIM1_BASE)
#define TIM8                        ((TIM1_Type*)              TIM8_BASE)
#define TIM2                        ((TIM2_Type*)              TIM2_BASE)
#define TIM3                        ((TIM3_Type*)              TIM3_BASE)
#define TIM4                        ((TIM4_Type*)              TIM4_BASE)
#define TIM5                        ((TIM4_Type*)              TIM5_BASE)
#define TIM9                        ((TIM9_Type*)              TIM9_BASE)
#define TIM12                       ((TIM9_Type*)              TIM12_BASE)
#define TIM10                       ((TIM10_Type*)             TIM10_BASE)
#define TIM11                       ((TIM10_Type*)             TIM11_BASE)
#define TIM13                       ((TIM10_Type*)             TIM13_BASE)
#define TIM14                       ((TIM10_Type*)             TIM14_BASE)
#define TIM6                        ((TIM6_Type*)              TIM6_BASE)
#define TIM7                        ((TIM6_Type*)              TIM7_BASE)
#define Ethernet_MAC                ((Ethernet_MAC_Type*)      Ethernet_MAC_BASE)
#define Ethernet_MMC                ((Ethernet_MMC_Type*)      Ethernet_MMC_BASE)
#define Ethernet_PTP                ((Ethernet_PTP_Type*)      Ethernet_PTP_BASE)
#define Ethernet_DMA                ((Ethernet_DMA_Type*)      Ethernet_DMA_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define CAN1                        ((CAN1_Type*)              CAN1_BASE)
#define CAN2                        ((CAN1_Type*)              CAN2_BASE)
#define FLASH                       ((FLASH_Type*)             FLASH_BASE)
#define EXTI                        ((EXTI_Type*)              EXTI_BASE)
#define LTDC                        ((LTDC_Type*)              LTDC_BASE)
#define SAI1                        ((SAI1_Type*)              SAI1_BASE)
#define SAI2                        ((SAI1_Type*)              SAI2_BASE)
#define DMA2D                       ((DMA2D_Type*)             DMA2D_BASE)
#define QUADSPI                     ((QUADSPI_Type*)           QUADSPI_BASE)
#define CEC                         ((CEC_Type*)               CEC_BASE)
#define SPDIF_RX                    ((SPDIF_RX_Type*)          SPDIF_RX_BASE)
#define SDMMC1                      ((SDMMC1_Type*)            SDMMC1_BASE)
#define LPTIM1                      ((LPTIM1_Type*)            LPTIM1_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define I2C2                        ((I2C1_Type*)              I2C2_BASE)
#define I2C3                        ((I2C1_Type*)              I2C3_BASE)
#define I2C4                        ((I2C1_Type*)              I2C4_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define USART6                      ((USART6_Type*)            USART6_BASE)
#define USART1                      ((USART6_Type*)            USART1_BASE)
#define USART3                      ((USART6_Type*)            USART3_BASE)
#define USART2                      ((USART6_Type*)            USART2_BASE)
#define UART5                       ((USART6_Type*)            UART5_BASE)
#define UART4                       ((USART6_Type*)            UART4_BASE)
#define UART8                       ((USART6_Type*)            UART8_BASE)
#define UART7                       ((USART6_Type*)            UART7_BASE)
#define OTG_FS_GLOBAL               ((OTG_FS_GLOBAL_Type*)     OTG_FS_GLOBAL_BASE)
#define OTG_FS_HOST                 ((OTG_FS_HOST_Type*)       OTG_FS_HOST_BASE)
#define OTG_FS_DEVICE               ((OTG_FS_DEVICE_Type*)     OTG_FS_DEVICE_BASE)
#define OTG_FS_PWRCLK               ((OTG_FS_PWRCLK_Type*)     OTG_FS_PWRCLK_BASE)
#define OTG_HS_GLOBAL               ((OTG_HS_GLOBAL_Type*)     OTG_HS_GLOBAL_BASE)
#define OTG_HS_HOST                 ((OTG_HS_HOST_Type*)       OTG_HS_HOST_BASE)
#define OTG_HS_DEVICE               ((OTG_HS_DEVICE_Type*)     OTG_HS_DEVICE_BASE)
#define OTG_HS_PWRCLK               ((OTG_HS_PWRCLK_Type*)     OTG_HS_PWRCLK_BASE)
#define NVIC                        ((NVIC_Type*)              NVIC_BASE)
#define MPU                         ((MPU_Type*)               MPU_BASE)
#define STK                         ((STK_Type*)               STK_BASE)
#define NVIC_STIR                   ((NVIC_STIR_Type*)         NVIC_STIR_BASE)
#define FPU_CPACR                   ((FPU_CPACR_Type*)         FPU_CPACR_BASE)
#define SCB_ACTRL                   ((SCB_ACTRL_Type*)         SCB_ACTRL_BASE)
#define FPU                         ((FPU_Type*)               FPU_BASE)
#define SCB                         ((SCB_Type*)               SCB_BASE)
#define PF                          ((PF_Type*)                PF_BASE)
#define AC                          ((AC_Type*)                AC_BASE)


#ifdef __cplusplus
}
#endif

#endif /* STM32F7X6_H */
